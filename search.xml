<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue小案例</title>
      <link href="/2021/07/27/vue%E5%B0%8F%E6%A1%88%E4%BE%8B/"/>
      <url>/2021/07/27/vue%E5%B0%8F%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="tab切换"><a href="#tab切换" class="headerlink" title="tab切换"></a>tab切换</h3><p>切换导航栏更新对应的内容<br><img src="https://img-blog.csdnimg.cn/596105ab0cc0422e93177a4bd62a8625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bW1lcnpoaQ==,size_16,color_FFFFFF,t_70" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        .nav&#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            margin: 50px auto 0;</span><br><span class="line">        &#125;</span><br><span class="line">        ul li&#123;</span><br><span class="line">            padding: 20px;</span><br><span class="line">            <span class="built_in">float</span>: left;</span><br><span class="line">            border: 1px solid skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">        .con&#123;</span><br><span class="line">            height: 300px;</span><br><span class="line">            line-height: 200px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            border: 1px solid lightblue;</span><br><span class="line">        &#125;</span><br><span class="line">        .active&#123;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">            &lt;ul class=<span class="string">&quot;tab&quot;</span>&gt;</span><br><span class="line">                &lt;li </span><br><span class="line">                v-for=<span class="string">&quot;(item,index) in ulValue&quot;</span></span><br><span class="line">                :class=<span class="string">&quot;liIndex===index?&#x27;active&#x27;:&#x27;&#x27;&quot;</span></span><br><span class="line">                @click=<span class="string">&quot;change(index)&quot;</span></span><br><span class="line">                &gt;&#123;&#123;item&#125;&#125;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;con&quot;</span>&gt;</span><br><span class="line">                &#123;&#123;showValue&#125;&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;../vue.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 创建Vue实例</span><br><span class="line">        var vm = new Vue(&#123;//配置项</span><br><span class="line">            el:<span class="string">&quot;#app&quot;</span>,//挂载点</span><br><span class="line">            data: &#123;//数据</span><br><span class="line">                showValue:<span class="string">&quot;动作片&quot;</span>,</span><br><span class="line">                liIndex:0,</span><br><span class="line">                ulValue:[<span class="string">&quot;动作&quot;</span>,<span class="string">&quot;爱情&quot;</span>,<span class="string">&quot;科幻&quot;</span>,<span class="string">&quot;冒险&quot;</span>],</span><br><span class="line">                liValue:[<span class="string">&quot;动作片&quot;</span>,<span class="string">&quot;爱情片&quot;</span>,<span class="string">&quot;科幻片&quot;</span>,<span class="string">&quot;冒险片&quot;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;//方法，事件</span><br><span class="line">                change(index)&#123;</span><br><span class="line">                    this.liIndex = index</span><br><span class="line">                    this.showValue = this.liValue[index]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="待办任务列表"><a href="#待办任务列表" class="headerlink" title="待办任务列表"></a>待办任务列表</h3><p>显示任务、添加任务、删除任务、完成任务时颜色的切换<br><img src="https://img-blog.csdnimg.cn/0cad4347751d4224b8b2cdce50d77309.png" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .red&#123;</span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .green&#123;</span><br><span class="line">            background: green;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;inputValue&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;add()&quot;</span>&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=<span class="string">&quot;(item,index) in query&quot;</span>&gt;</span><br><span class="line">                &lt;span &gt;&#123;&#123;item.task&#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;button @click=<span class="string">&quot;del(index)&quot;</span>&gt;del&lt;/button&gt;</span><br><span class="line">                &lt;!-- 点击这里切换完成情况 已完成显示绿色，未完成显示红色 --&gt;</span><br><span class="line">                &lt;button @click=<span class="string">&quot;done(index)&quot;</span> :class=<span class="string">&quot;query[index].state?&#x27;green&#x27;:&#x27;red&#x27;&quot;</span>&gt;&#123;&#123;item.state?<span class="string">&quot;已完成&quot;</span>:<span class="string">&#x27;未完成&#x27;</span>&#125;&#125;&lt;/button&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;../vue.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 创建Vue实例</span><br><span class="line">        var vm = new Vue(&#123;//配置项</span><br><span class="line">            el:<span class="string">&quot;#app&quot;</span>,//挂载点</span><br><span class="line">            data: &#123;//数据</span><br><span class="line">                inputValue:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                //查询事项</span><br><span class="line">                query:[</span><br><span class="line">                    &#123;task:<span class="string">&quot;吃了吗&quot;</span>,state:<span class="literal">true</span>&#125;,</span><br><span class="line">                    &#123;task:<span class="string">&quot;吃了啊&quot;</span>,state:<span class="literal">false</span>&#125;,</span><br><span class="line">                    &#123;task:<span class="string">&quot;吃了啥&quot;</span>,state:<span class="literal">false</span>&#125;,</span><br><span class="line">                    &#123;task:<span class="string">&quot;吃了辣&quot;</span>,state:<span class="literal">true</span>&#125;</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;//方法，事件</span><br><span class="line">                //添加事项</span><br><span class="line">                <span class="function"><span class="title">add</span></span>()&#123;</span><br><span class="line">                    this.query.unshift(&#123;task:this.inputValue,state:<span class="literal">false</span>&#125;)</span><br><span class="line">                &#125;,</span><br><span class="line">                //删除事项</span><br><span class="line">                del(index)&#123;</span><br><span class="line">                    this.query.splice(index,1)</span><br><span class="line">                &#125;,</span><br><span class="line">                //切换事项完成情况</span><br><span class="line">                <span class="keyword">done</span>(index)&#123;</span><br><span class="line">                    this.query[index].state = !this.query[index].state</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="表格隔行换色"><a href="#表格隔行换色" class="headerlink" title="表格隔行换色"></a>表格隔行换色</h3><p>隔行换色、鼠标移入移出行的颜色编号、有一个下拉列表可以选择切换隔行的颜色<br><img src="https://img-blog.csdnimg.cn/26b2e58fbcb54ba5b5ac05eba50f388b.png" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        table&#123;</span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">        &#125;</span><br><span class="line">        .odd&#123;</span><br><span class="line">            background-color: lightblue;</span><br><span class="line">        &#125;</span><br><span class="line">        .even&#123;</span><br><span class="line">            background-color: lightcyan;</span><br><span class="line">        &#125;</span><br><span class="line">        .odd2&#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">        .even2&#123;</span><br><span class="line">            background-color:blueviolet;</span><br><span class="line">        &#125;</span><br><span class="line">        .odd3&#123;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line">        .even3&#123;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">        .hover&#123;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 双向数据绑定 --&gt;</span><br><span class="line">        &lt;select v-model=<span class="string">&quot;selectValue&quot;</span>&gt;</span><br><span class="line">            &lt;!-- 遍历数组colors 通过属性绑定来切换value值 --&gt;</span><br><span class="line">            &lt;option v-for=<span class="string">&quot;(item,index) in colors&quot;</span> :value=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">        &lt;table border=<span class="string">&quot;1&quot;</span> @mouseout=<span class="string">&quot;out&quot;</span>&gt;</span><br><span class="line">            &lt;!-- trIndex%2时颜色就会变成数组colors里面的 [selectValue][0] 第一个值绑定着option的value 第二个值是colors里面下标为0的值--&gt;</span><br><span class="line">            &lt;tr </span><br><span class="line">            v-for=<span class="string">&quot;(trItem,trIndex) in tableValue&quot;</span></span><br><span class="line">            :class=<span class="string">&quot;[trIndex%2?colors[selectValue][0]:colors[selectValue][1],hoverIndex===trIndex?&#x27;hover&#x27;:&#x27;&#x27;]&quot;</span></span><br><span class="line">            @mouseover=<span class="string">&quot;over(trIndex)&quot;</span></span><br><span class="line">            &gt;</span><br><span class="line">                &lt;td v-for=<span class="string">&quot;(tdItem,tdIndex) in trItem&quot;</span>&gt;</span><br><span class="line">                    &#123;&#123;tdItem&#125;&#125;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;../vue.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 创建Vue实例</span><br><span class="line">        var vm = new Vue(&#123;//配置项</span><br><span class="line">            el:<span class="string">&quot;#app&quot;</span>,//挂载点</span><br><span class="line">            data: &#123;//数据</span><br><span class="line">                //为-1时隐藏颜色</span><br><span class="line">                hoverIndex:-1,</span><br><span class="line">                //双向数据绑定</span><br><span class="line">                selectValue:0,</span><br><span class="line">                tableValue:[</span><br><span class="line">                    [<span class="string">&quot;第一行1&quot;</span>,<span class="string">&quot;第一行2&quot;</span>,<span class="string">&quot;第一行3&quot;</span>,<span class="string">&quot;第一行4&quot;</span>,<span class="string">&quot;第一行5&quot;</span>],</span><br><span class="line">                    [<span class="string">&quot;第二行1&quot;</span>,<span class="string">&quot;第二行2&quot;</span>,<span class="string">&quot;第二行3&quot;</span>,<span class="string">&quot;第二行4&quot;</span>,<span class="string">&quot;第二行5&quot;</span>],</span><br><span class="line">                    [<span class="string">&quot;第三行1&quot;</span>,<span class="string">&quot;第三行2&quot;</span>,<span class="string">&quot;第三行3&quot;</span>,<span class="string">&quot;第三行4&quot;</span>,<span class="string">&quot;第三行5&quot;</span>],</span><br><span class="line">                    [<span class="string">&quot;第四行1&quot;</span>,<span class="string">&quot;第四行2&quot;</span>,<span class="string">&quot;第四行3&quot;</span>,<span class="string">&quot;第四行4&quot;</span>,<span class="string">&quot;第四行5&quot;</span>],</span><br><span class="line">                    [<span class="string">&quot;第五行1&quot;</span>,<span class="string">&quot;第五行2&quot;</span>,<span class="string">&quot;第五行3&quot;</span>,<span class="string">&quot;第五行4&quot;</span>,<span class="string">&quot;第五行5&quot;</span>]</span><br><span class="line">            ],</span><br><span class="line">            colors:[</span><br><span class="line">                [<span class="string">&quot;odd&quot;</span>,<span class="string">&quot;even&quot;</span>],</span><br><span class="line">                [<span class="string">&quot;odd2&quot;</span>,<span class="string">&quot;even2&quot;</span>],</span><br><span class="line">                [<span class="string">&quot;odd3&quot;</span>,<span class="string">&quot;even3&quot;</span>],</span><br><span class="line">            ]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;//方法，事件</span><br><span class="line">                //移入时 hoverIndex大于0就会显示颜色</span><br><span class="line">                over(index)&#123;</span><br><span class="line">                    this.hoverIndex = index</span><br><span class="line">                &#125;,</span><br><span class="line">                //移出时 hoverIndex等于-1就会隐藏颜色</span><br><span class="line">                <span class="function"><span class="title">out</span></span>()&#123;</span><br><span class="line">                    this.hoverIndex = -1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础语法（一）</title>
      <link href="/2021/07/26/vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/07/26/vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="前端三大框架"><a href="#前端三大框架" class="headerlink" title="前端三大框架"></a>前端三大框架</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">框架    厂家/个人 设计模式          特点</span><br><span class="line">anguler 谷歌       mvc             数据双向绑定</span><br><span class="line">react   facebook  view视图层的框架 虚拟dom</span><br><span class="line">vue     尤雨溪     mvvm            数据双向绑定+虚拟dom</span><br></pre></td></tr></table></figure><p>mvc：model+view+controller<br>mvvm：model+view+viewModel</p><h3 id="什么是vue"><a href="#什么是vue" class="headerlink" title="什么是vue?"></a>什么是vue?</h3><p><a href="https://cn.vuejs.org/v2/guide/">vue</a>就是一套用于构建用户的渐进式框架</p><h3 id="vue的优势"><a href="#vue的优势" class="headerlink" title="vue的优势"></a>vue的优势</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.入门简单</span><br><span class="line">2.运行效率高（虚拟dom，减少dom操作）</span><br><span class="line">3.开发效率高（组件化开发）</span><br><span class="line">4.数据响应式，将开发者的精力从操作dom解放出来，主要关注数据的变化</span><br><span class="line">5.生态比较完善</span><br></pre></td></tr></table></figure><p>数据绑定：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">将实例对象的数据和渲染到视图中（view）.</span><br><span class="line">通过mustache语法（双大括号）将数据渲染到视图中.</span><br><span class="line">双大括号插值法可以写变量或者表达式，不能放语句.</span><br><span class="line">还可以输出所有数据类型，但null和undefined不会显示.</span><br></pre></td></tr></table></figure><p>虚拟dom：就是内存中的一个对象</p><h3 id="vue安装包"><a href="#vue安装包" class="headerlink" title="vue安装包"></a>vue安装包</h3><p>直接用cdn引入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h2><p>指令（directives）带有v-前缀的特殊属性（html属性）,其实就是标签的自定义属性,指令后面的值可以是变量或表达式</p><h3 id="语法模板"><a href="#语法模板" class="headerlink" title="语法模板"></a>语法模板</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 创建Vue实例</span><br><span class="line">        var vm = new Vue(&#123;//配置项</span><br><span class="line">            el:<span class="string">&quot;#app&quot;</span>,//挂载点</span><br><span class="line">            data: &#123;//数据</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;//方法，事件</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="vue常用指令"><a href="#vue常用指令" class="headerlink" title="vue常用指令"></a>vue常用指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.v-text =&gt; innerText</span><br><span class="line">2.v-html =&gt; innerHTML</span><br><span class="line">3.v-if =&gt; 用于条件性的渲染一块内容,切换时性能消耗大</span><br><span class="line">4.v-else-if =&gt; 用在v-if后面</span><br><span class="line">5.v-else =&gt; 同上</span><br><span class="line">6.v-show =&gt; 用于条件性的显示一块内容,起步时性能消耗大</span><br><span class="line">7.v-on =&gt; 用于监听dom元素的事件 v-on == @</span><br><span class="line">8.v-bind =&gt; 用于元素的属性绑定 v-bind == :</span><br><span class="line">属性绑定可以让元素的属性值为变量或表达式</span><br><span class="line">9.v-for =&gt; 基于数组循环生成对应的一组元素</span><br><span class="line">10.v-model =&gt; 数据双向绑定 用于value属性的绑定</span><br><span class="line">11.class和style的属性绑定</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue详细笔记</title>
      <link href="/2021/07/26/vue%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/26/vue%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Vue基础"><a href="#一、Vue基础" class="headerlink" title="一、Vue基础"></a>一、Vue基础</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>作者：尤雨溪</p><p>官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org</a></p><p>Vue.js是一套构建用户界面的<strong>渐进式</strong>框架。<strong>声明式渲染和组件系统是Vue的核心库所包含内容。</strong></p><ul><li>渐进式：循序渐进，不需要掌握全部的点，学多少用多少</li><li>框架：半成品的应用（之前学习的jQuery也是一个框架）</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/4f9e45db623e2c0f0dd1a45e985c36b83825ce6c.png?sign=cead88c04c73c6d314f093b1ef504d42&t=5f50707e" alt="Vue特点"></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/229fe902962263af21443024e14a78b54ea5c3d1.png?sign=976600758fc879cea5db0a54774e1bda&t=5f5070ea" alt="Vue与react在github上"></p><ul><li><strong>声明</strong>式渲染：（如同js基础一样，要使用变量则必须先声明变量，这种称之为声明式）</li></ul><p>Vue.js的核心是一个允许采用简洁的模板语法来声明式的将数据渲染进DOM的系统。</p><ul><li><strong>组件化</strong>应用构建</li></ul><p>组件系统是Vue的另一个重要概念，因为它是一种抽象的允许我们使用<strong>小型、独立</strong>和通常<strong>可复用</strong>的“小积木”构建大型应用。几乎任意类型的应用界面都可以抽象为一个组件树。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/279e26e948d53d33a2a05e10e7c29aa736fe80a1.png?sign=9f63925b42a763bb945ad25cda41928f&t=5f5073bf" alt="组件"></p><h2 id="2、Vue的开发模式"><a href="#2、Vue的开发模式" class="headerlink" title="2、Vue的开发模式"></a>2、Vue的开发模式</h2><ul><li>M-V-VM<ul><li>M：（model）普通的javascript数据对象（其实就是一个对象，对象里放了数据）</li><li>V：（view）前端展示页面（可以理解成html内容）</li><li>VM：（ViewModel）用于<strong>双向绑定数据</strong>与页面，对于我们的课程来说，就是vue的实例</li></ul></li></ul><p>MVVM 模式将 Presenter 改名为 ViewModel，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。<strong>这种模式下，页面输入改变数据，数据改变影响页面数据展示与渲染</strong></p><blockquote><p>vue使用MVVM响应式编程模型，避免直接操作（真实）DOM , 降低DOM操作的复杂性。（虚拟DOM）</p></blockquote><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/daf286bb718f7afb09ddea7205c58a18d56797f5.png?sign=9597d9d44c7ac8ace46d8ab7c0500407&t=5f560d40" alt="MVVM"></p><h1 id="二、Vue入门"><a href="#二、Vue入门" class="headerlink" title="二、Vue入门"></a>二、Vue入门</h1><h2 id="1、初识Vue"><a href="#1、初识Vue" class="headerlink" title="1、初识Vue"></a>1、初识Vue</h2><blockquote><p>vuejs文件分为“.min.js”与“.js”文件，区别在于其中带“.min”这个是生产版本（压缩版），不带“.min”的是测试版本（测试时用的，不压缩的）：</p><ul><li>生产版本<ul><li>代码压缩（代码不具备可读性）</li><li>不支持vue调试工具</li></ul></li><li>开发版本（vue.js）<ul><li>代码不压缩（代码具备可读性）</li><li><strong>支持vue的调试工具</strong></li></ul></li></ul></blockquote><p>以输出“Hello World”为例，使用Vue.js实现输出“Hello World”案例：</p><blockquote><p><strong>步骤</strong>（仅限在vue的非工程化的环境下）</p><ul><li><p>在视图部分定义渲染的容器，正常情况下内容相对固定，一般是：</p><ul><li>~~~html<div id="app"></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 通过`script`标签引入下载好的`vue.js`文件</span><br><span class="line"></span><br><span class="line">- 产生vue实例（js部分，需要去new）</span><br><span class="line"></span><br><span class="line">  - 需要给实例传递配置选项（格式是一个对象）</span><br><span class="line">  - 如果可能，会用到一些数据，数据需要在对象中声明（声明式渲染）</span><br><span class="line"></span><br><span class="line">- 如果需要展示数据的话，则需要使用特定的表达式（插值表达式，形式`&#123;&#123;表达式&#125;&#125;`，在视图部分写，哪里需要值就在哪里写）</span><br><span class="line"></span><br><span class="line">代码片段如下：</span><br><span class="line"></span><br><span class="line">~~~html</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;!-- 1. 定义渲染的容器 --&gt;</span><br><span class="line">   &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       &#123;&#123;msg&#125;&#125;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           &lt;!-- 只要不出id=app这个容器的界限，不管多少深度，都没问题 --&gt;</span><br><span class="line">           &#123;&#123;msg&#125;&#125;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;!-- 2. 引入vue.js文件 --&gt;</span><br><span class="line">   &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       // 3. 产生vue实例（V是大写的），传递配置选项</span><br><span class="line">       new Vue(&#123;</span><br><span class="line">           // el =&gt; element，指定vue负责渲染的容器的选择器</span><br><span class="line">           el: &quot;#app&quot;,</span><br><span class="line">           // data指定vue实例需要的数据（数据的初始化）</span><br><span class="line">           data: &#123;</span><br><span class="line">               msg: &quot;hello world&quot;,</span><br><span class="line">           &#125;,</span><br><span class="line">       &#125;);</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><p>Vue实例细节分析：</p><ul><li><p>Vue参数对象属性</p><ul><li>el：元素挂载的位置，值可以是CSS选择器或DOM元素</li><li>data：模型数据，值是一个对象（仅限于当前）</li></ul></li><li><p>插值表达式<code>&#123;&#123;msg&#125;&#125;</code></p><ul><li>将数据填充到HTML标签中</li></ul></li></ul><p>上述提及的都是前端vue框架的模板语法，当然vue的模板不仅仅是上述这个2个，还有更多的，比如后面要学习的：</p><ul><li>指令</li><li>事件</li><li>流程控制</li><li>….</li></ul><h2 id="2、vue-devtools工具安装"><a href="#2、vue-devtools工具安装" class="headerlink" title="2、vue devtools工具安装"></a>2、vue devtools工具安装</h2><p>通过chrome中的谷歌插件商店安装    Vue Devtools工具，此工具帮助我们进行vue数据调试所用，一定要安装。Vue工具在谷歌商店的地址是：<a href="https://chrome.google.com/webstore?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore?utm_source=chrome-ntp-icon</a></p><blockquote><p>请注意：打开chrome应用商店，<strong>需要科学上网</strong>才能访问到，至于怎么科学上网请各位自行解决。</p></blockquote><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/dc840deb63c247fb5b7fac6f162f3fece10832ae.png?sign=180564fbbac92d11b6e89e4e9d8df208&t=5f561a39" alt="Vue工具谷歌商店"></p><p>安装好后打开Chrome的<code>开发者工具（F12或Ctrl+Shift+I）</code>即可使用：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/7ea8955be2b91f4c8530fdf7696fa2f5508b3a35.png?sign=2773c0e615128ca86b96c79bca31eaf4&t=5f561a6a" alt="谷歌浏览器使用Vue工具"></p><p><strong>补充：如果自己解决不了科学上网问题，但是又需要用Vue开发工具那该怎么办？</strong></p><blockquote><p>如果实在解决不了科学上网难题，Vue官方也提供了插件源码允许我们自己编译/构建Google Chrom插件，步骤如下（构建插件流程稍微麻烦一些&lt;**不要求掌握如何构建**&gt;，此处已为同学们构建好，可以直接使用）。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/6f094719844e04c1aa853b36c18b1e18c1ee6c2d.png?sign=55a5622a22b937b7b1b419ca67dafd6b&t=5f38fa24" alt="Vue调试工具"></p></blockquote><h2 id="3、Vue模板语法"><a href="#3、Vue模板语法" class="headerlink" title="3、Vue模板语法"></a>3、Vue模板语法</h2><h3 id="3-1、插值表达式"><a href="#3-1、插值表达式" class="headerlink" title="3.1、插值表达式"></a>3.1、插值表达式</h3><p><strong>插值表达式：</strong>是vue框架提供的一种在HTML模板中绑定数据的方式，使用<code>&#123;&#123;变量名&#125;&#125;</code>方式绑定Vue实例中data中的数据变量，会将绑定的数据实时的在视图中显示出来。</p><p>插值表达式的写法支持使用：</p><ul><li>变量名</li><li><strong>部分</strong>JavaScript表达式<ul><li>注：<code>&#123;&#123;  &#125;&#125;</code>括起来的区域，就是一个就是js语法区域，在里面可以写部份的js语法。不能写 var a = 10;分支语句;循环语句</li></ul></li><li>三元运算符</li><li>方法调用（方法必须需要先声明）</li><li>…</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 直接使用变量名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 运算 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123;name + &#x27;--好的&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123; 1 + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用函数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123;title.substr(0,6)&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 三目运算 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123; age &gt; 18 ? &#x27;成年&#x27; : &#x27;未成年&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">title</span>: <span class="string">&quot;我是一个标题，你们看到没有&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2、指令"><a href="#3-2、指令" class="headerlink" title="3.2、指令"></a>3.2、指令</h3><p><strong>问1：什么是指令？</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 指令的本质就是标签中的vue<strong>自定义属性</strong></li><li><input checked="" disabled="" type="checkbox"> 指令格式以“v-”开始，例如：v-cloak，v-text、v-html等</li></ul><p><strong>指令的含义：在vue的html中，以<code>v-</code>开头的自定义属性就是指令。</strong></p><p>详见官网对指令的说明：<a href="https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4">https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4</a></p><p><strong>问2：指令有什么作用？</strong></p><p>正如插值表达式的效果，插值表达式只能用于标签之间的数据输出；在标签属性上，插值表达式无用武之地，但是有需要在属性中使用可变数据的情况，此时指令就能帮助我们解决这个问题。</p><p>语法糖：复杂操作的简化形式</p><p>当表达式的值改变时，将其产生的连带影响，响应式地作用于页面（DOM）。（简化操作）</p><p><strong>小试牛刀</strong>：v-text指令与v-html指令【相当于innertHTML和innerText】</p><blockquote><p><strong>官网</strong></p><p>v-text：<a href="https://cn.vuejs.org/v2/api/#v-text">https://cn.vuejs.org/v2/api/#v-text</a></p><p>v-html：<a href="https://cn.vuejs.org/v2/api/#v-html">https://cn.vuejs.org/v2/api/#v-html</a></p></blockquote><p>友情提醒：v-html尽量少用甚至不用，因为可能引发XSS（跨站脚本攻击，XSS）攻击。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插值表达式形式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;str1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插值表达式此时与v-text是等效的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&#x27;str2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&#x27;str1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">str1</span>: <span class="string">&#x27;迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">str2</span>: <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="三、常用指令"><a href="#三、常用指令" class="headerlink" title="三、常用指令"></a>三、常用指令</h1><h2 id="1、v-cloak"><a href="#1、v-cloak" class="headerlink" title="1、v-cloak"></a>1、v-cloak</h2><p><strong>作用：</strong>解决浏览器在加载页面时因存在时间差而产生的<code>闪动</code>问题</p><p><strong>原理：</strong>先隐藏元素挂载位置，处理好渲染后再显示最终的结果</p><p><strong>注意：</strong>需要与CSS规则一起使用</p><p><strong>文档地址：</strong><a href="https://cn.vuejs.org/v2/api/#v-cloak">https://cn.vuejs.org/v2/api/#v-cloak</a></p><p><strong>示例：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div</span><br></pre></td></tr></table></figure><blockquote><p>如果后期有多个元素需要解决闪动问题，可以将<code>v-cloak</code>写在根元素上（id=”app”顶级的div上）。</p></blockquote><h2 id="2、数据绑定指令"><a href="#2、数据绑定指令" class="headerlink" title="2、数据绑定指令"></a>2、数据绑定指令</h2><ul><li>v-text    填充纯文本<ul><li>相比插值表达式更加简洁</li><li>不存在插值表达式的闪动问题</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 和下面的一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>:<span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com/&quot;&gt;百度一下&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-html     填充HTML片段<ul><li>存在安全问题</li><li>本网站内部数据可以使用，来自第三方的数据不可使用<ul><li>只有一个场景会使用：后台会用，比如有一个企业站，会发不企业的动态的新闻，这个时候会使用富文本编辑器，由于内容是自己人加的，所以可以放心使用。  自己攻击自己（自攻）</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">html</span>:<span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com/&quot;&gt;百度一下&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-pre    填充原始信息（对应的是以前html中的标签“<pre>”）【凑数】<ul><li>跳过表达式的编译过程（先编译，后渲染），显示原始信息</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>有些时候我们不想指令中的表达式进行运行，只需要给表达式加个引号</strong>。例如：</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&#x27;&quot;msg&quot;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;&#x27;msg&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>针对后续想让指令属性值不解析的操作都可以这么去做。</p><h2 id="3、v-once"><a href="#3、v-once" class="headerlink" title="3、v-once"></a>3、v-once</h2><p><strong>作用：</strong>只渲染<strong>元素或组件</strong>一次<strong>，之后元素或组件将失去</strong>响应式（数据层面）功能（对于数据的一锤子买卖）</p><blockquote><p><strong>Q &amp; A：</strong>如何理解响应式？</p><ul><li>布局响应式：布局会随着设备尺寸的大小变化而变化的布局方式</li><li><strong>数据响应式：双向数据绑定</strong></li></ul></blockquote><p><strong>示例：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态修改message值，此绑定将不会发生改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">message</span>: <span class="string">&#x27;你好世界&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、v-bind（重点）"><a href="#4、v-bind（重点）" class="headerlink" title="4、v-bind（重点）"></a>4、v-bind（重点）</h2><p><strong>作用：</strong>动态地绑定一个或多个<code>attribute</code>【实现可以允许我们在html内置的属性值中使用变量，主要是给非指令的属性去使用绑定动态可变的数据的】</p><p>场景：复用某个数据的时候会使用。例如：飞猪官网</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-bind：给非指令的属性使用变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">v-bind:target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>&#123;&#123;alt&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-bind的简写形式，实际使用这样的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">:target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>&#123;&#123;alt&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">:target</span>=<span class="string">&quot;type&quot;</span> <span class="attr">:alt</span>=<span class="string">&quot;alt&quot;</span>&gt;</span>&#123;&#123;alt&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>&#123;&#123;alt&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">&#x27;https://www.fliggy.com/&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>: <span class="string">&#x27;_blank&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">alt</span>: <span class="string">&#x27;飞猪官网&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、v-on（重点）"><a href="#5、v-on（重点）" class="headerlink" title="5、v-on（重点）"></a>5、v-on（重点）</h2><h3 id="5-1、基本使用"><a href="#5-1、基本使用" class="headerlink" title="5.1、基本使用"></a>5.1、基本使用</h3><p><strong>作用：</strong>绑定事件监听器（事件绑定）</p><p><strong>示例：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接执行操作 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 常规写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件处理函数调用：直接写函数名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事件处理函数调用：常规调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;sth&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果事件处理函数为自定义函数，则需要先进行定义，定义的方式如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">functionName</span>: <span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2,arg3,...</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// something to do</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：事件绑定<code>v-on</code>属性表达式中切记不能直接写业务逻辑，例如<code>@click=&quot;alert(&#39;123&#39;)&quot;</code>。换言之，就咋行内上是不允许使用内置函数的，必须要调用自己定义的函数，然后你可以在自定义的函数内使用内置函数。</p></blockquote><p><strong>事件处理函数传参</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件处理函数调用：直接写函数名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件处理函数调用：常规调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;hi&#x27;,$event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不传递自定义参数的时候，上述两种用法均可以使用；但是如果需要传递自定义参数的话，则需要使用第2种方式。</p><blockquote><p>事件对象的传递与接收注意点</p><ul><li>如果事件直接使用函数名并且不写小括号，那么<strong>默认</strong>会将事件对象作为唯一参数进行传递，可以在定义函数的位置直接定义一个形参，并且在函数内可以使用该形参</li><li>如果使用常规的自定义函数调用（只要写了小括号），那么如果需要使用<strong>事件对象则必须作为最后一个参数进行传递</strong>，且事件对象的名称必须是“$event”</li></ul></blockquote><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#big</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#mid</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#sma</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;big&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;大娃&#x27;,$event)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mid&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;二娃&#x27;,$event)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sma&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;三娃&#x27;,$event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">say</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name,event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;你点了&#x27;</span> + name);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2、事件修饰符"><a href="#5-2、事件修饰符" class="headerlink" title="5.2、事件修饰符"></a>5.2、事件修饰符</h3><p>含义：用来处理事件的特定行为（也是vue提供一些语法糖）</p><p>使用示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 停止冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  串联修饰符（连贯操作） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多事件修饰符请参考官方文档：<a href="https://cn.vuejs.org/v2/api/#v-on">https://cn.vuejs.org/v2/api/#v-on</a></p><p><strong>实例代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .dawa &#123;</span><br><span class="line">            background: red;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 400px;</span><br><span class="line">        &#125;</span><br><span class="line">        .erwa &#123;</span><br><span class="line">            background: orange;</span><br><span class="line">            height: 300px;</span><br><span class="line">            width: 300px;</span><br><span class="line">        &#125;</span><br><span class="line">        .sanwa &#123;</span><br><span class="line">            background: yellow;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- 套娃行为 --&gt;</span><br><span class="line">        &lt;div class=&quot;dawa&quot; @click=&quot;call_dawa&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;erwa&quot; @click.stop=&quot;call_erwa&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;sanwa&quot; @click.stop=&quot;call_sanwa&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                call_dawa()&#123;</span><br><span class="line">                    console.log(&#x27;大娃：收到&#x27;);</span><br><span class="line">                &#125;,</span><br><span class="line">                call_erwa()&#123;</span><br><span class="line">                    console.log(&#x27;二娃：收到&#x27;);</span><br><span class="line">                &#125;,</span><br><span class="line">                call_sanwa()&#123;</span><br><span class="line">                    console.log(&#x27;三娃：你说啥&#x27;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-3、按键修饰符"><a href="#5-3、按键修饰符" class="headerlink" title="5.3、按键修饰符"></a>5.3、按键修饰符</h3><p>按键修饰符：按键事件</p><blockquote><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符。</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 回车键的时候调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Delete` 回车键的时候调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.delete</span>=<span class="string">&quot;handle&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多按键修饰符请参考官方文档：<a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6</a></p><h2 id="6、循环分支指令"><a href="#6、循环分支指令" class="headerlink" title="6、循环分支指令"></a>6、循环分支指令</h2><h3 id="6-1、循环指令"><a href="#6-1、循环指令" class="headerlink" title="6.1、循环指令"></a>6.1、循环指令</h3><p><strong>作用：</strong>根据一组<strong>数组</strong>或对象的选项列表进行渲染。</p><p><strong>指令：</strong>v-for</p><ul><li>数组遍历使用示例：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直接取值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in fruits&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 带索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in fruits&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">......</span><br><span class="line">data: &#123;</span><br><span class="line">fruits: [&#x27;apple&#x27;,&#x27;pear&#x27;,&#x27;banana&#x27;,&#x27;orange&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><blockquote><p>细节：key的作用，提高性能，不影响显示效果（<code>如果没有id，可以考虑使用索引替代</code>），切记<code>key</code>的值不能重复，只要遵循不重复的原则即可，值是什么无所谓。</p><p>key的作用就是更新组件时判断两个节点是否相同。相同就复用，不相同就删除旧的创建新的。</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in fruits&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>对象遍历使用示例（了解）：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(value,name,index) in obj&#x27;</span>&gt;</span>&#123;&#123;value + &#x27;-&#x27; + name + &#x27;-&#x27; + index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">......</span><br><span class="line">data: &#123;</span><br><span class="line">obj: &#123;</span><br><span class="line">username: &#x27;zhangsan&#x27;,</span><br><span class="line">age: 28,</span><br><span class="line">gender: &#x27;male&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><strong>示例代码：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in cars&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,key,index) in user&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;：&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">cars</span>: [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;aodi&#x27;</span>,<span class="string">&#x27;benci&#x27;</span>,<span class="string">&#x27;haima&#x27;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">user</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">gender</span>: <span class="string">&#x27;mele&#x27;</span>,<span class="comment">//性别，sex</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">age</span>: <span class="number">22</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2、分支指令"><a href="#6-2、分支指令" class="headerlink" title="6.2、分支指令"></a>6.2、分支指令</h3><p><strong>作用：</strong>根据表达式的布尔值(true/false)进行判断是否<strong>渲染</strong>/显示该元素</p><ul><li>v-if</li><li>v-else</li><li>v-else-if</li></ul><blockquote><p>上述三个指令是分支中最常见的。根据需求，v-if可以单独使用，也可以配合v-else一起使用，也可以配合v-else-if和v-else一起使用。</p></blockquote><ul><li>v-show</li></ul><blockquote><p>v-show是根据表达式之真假值，切换元素的 <code>display</code> CSS属性（是根据表达式的布尔值来判断是否<strong>显示</strong>该元素）。</p></blockquote><p>使用示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;score &gt;= 90&quot;</span>&gt;</span></span><br><span class="line">  优秀</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 80 &amp;&amp; score &lt; 90&quot;</span>&gt;</span></span><br><span class="line">  良好</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 70 &amp;&amp; score &lt; 80&quot;</span>&gt;</span></span><br><span class="line">  一般</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  不及格</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-show --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&#x27;flag&#x27;</span>&gt;</span>测试v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">......</span><br><span class="line">data: &#123;</span><br><span class="line">score: 88,</span><br><span class="line">flag:false</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><blockquote><p>思考：v-if系列与v-show的区别是什么？</p><p>v-if：控制元素是否渲染</p><p>v-show：控制元素是否显示（<strong>已经渲染</strong>，display:none;）</p></blockquote><blockquote><p>v-if系列指令、v-show指令可以与v-for指令结合起来使用（循环+分支）。例如：</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(v,k,i) in obj&#x27;</span> <span class="attr">v-show</span>=<span class="string">&#x27;v==25&#x27;</span>&gt;</span>&#123;&#123;v&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>面试题：v-for与v-if谁的优先级高，能否一起使用？</strong></p><p>答：v-for优先级高于v-if，虽然可以一起使用但是不建议一起使用。因为v-for的优先级大于v-if，在循环元素时，每个元素都要进行v-if判断，但是最终显示的元素太少造成资源浪费，所以不建议一起使用。在需要v-for与v-if一起使用时可以用v-show代替v-if。</p><h2 id="7、综合案例：简易购物车"><a href="#7、综合案例：简易购物车" class="headerlink" title="7、综合案例：简易购物车"></a>7、综合案例：简易购物车</h2><p><strong>案例效果</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/306aab7bc3f508529eacd7e352283a5670a36873.gif?sign=c1f7cd1b184d05b5a750c70759eb9a0a&t=5f5748db" alt="简易购物车案例效果"></p><blockquote><p>细节：</p><ul><li>展示基本的商品信息</li><li>计算每个商品的小计</li><li>商品数量的加、减操作<ul><li>+：增加商品数量，同时更新小计</li><li>-：减少商品熟练，同时更新小计，如果本身为“1”，再点-号则需要移除商品</li></ul></li></ul></blockquote><blockquote><p>如果需要在Vue实例中访问自身data属性中的数据，可以使用以下方式：</p><ul><li><strong>this.xxxxx</strong></li><li>this.$data.xxxxx</li><li>this._data.xxxxx</li></ul></blockquote><p><strong>参考数据源</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cartData = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;华为&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;联想&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>参考核心代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>综合案例：简易购物车<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &gt; 细节：</span></span><br><span class="line"><span class="comment">            &gt;</span></span><br><span class="line"><span class="comment">            &gt; - 展示基本的商品信息</span></span><br><span class="line"><span class="comment">            &gt; - 计算每个商品的小计</span></span><br><span class="line"><span class="comment">            &gt; - 商品数量的加、减操作</span></span><br><span class="line"><span class="comment">            &gt;   - +：增加商品数量，同时更新小计</span></span><br><span class="line"><span class="comment">            &gt;   - -：减少商品熟练，同时更新小计，如果本身为“1”，再点-号则需要移除商品</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &gt; 如果需要在Vue实例中访问自身data属性中的数据，可以使用以下方式：</span></span><br><span class="line"><span class="comment">            &gt;</span></span><br><span class="line"><span class="comment">            &gt; - this.xxxxx</span></span><br><span class="line"><span class="comment">            &gt; - this.$data.xxxxx</span></span><br><span class="line"><span class="comment">            &gt; - this._data.xxxxx</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in cartData&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span> 商品id：&#123;&#123;item.id&#125;&#125;<span class="symbol">&amp;emsp;</span> 商品名称：&#123;&#123;item.name&#125;&#125;<span class="symbol">&amp;emsp;</span></span><br><span class="line">                商品单价：&#123;&#123;item.price&#125;&#125;<span class="symbol">&amp;emsp;</span> 购买数量： <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reduce(item,index)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> &#123;&#123;item.num&#125;&#125; <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">                    @<span class="attr">click</span>=<span class="string">&quot;add(item,index)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="symbol">&amp;emsp;</span> 商品小计：&#123;&#123;item.price * item.num&#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 购物车的数据源</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> cartData = [</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">price</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">num</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;华为&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">price</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">num</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;联想&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">price</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">num</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        ]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 声明vue的数据</span></span></span><br><span class="line"><span class="javascript">                cartData</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// -1的操作方法</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">reduce</span>(<span class="params">item, index</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (item.num === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 如果再-就变0，移除该商品</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// if(confirm(&quot;这么好的商品，确定不要来一个吗？&quot;))&#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     this.cartData.splice(index, 1)</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// a &amp;&amp; b，只有当a为真的时候才会走b，如果a为假，则b不走</span></span></span><br><span class="line"><span class="javascript">                        confirm(<span class="string">&quot;这么好的商品，确定不要来一个吗？&quot;</span>) &amp;&amp; <span class="built_in">this</span>.cartData.splice(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 数量大于1，够减，继续-1</span></span></span><br><span class="line"><span class="javascript">                        item.num--</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// +1的操作方法</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">add</span>(<span class="params">item, index</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(item, index);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// this.cartData[index].num++</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 定论：在js中数组/对象其值的传递方式是引用传递</span></span></span><br><span class="line"><span class="javascript">                    item.num++</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(this);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&amp;emsp;</code>表示<code>tab</code>，一个顶四个<code>&amp;nbsp;</code></p></blockquote><h2 id="8、样式绑定"><a href="#8、样式绑定" class="headerlink" title="8、样式绑定"></a>8、样式绑定</h2><h3 id="8-1、class样式绑定"><a href="#8-1、class样式绑定" class="headerlink" title="8.1、class样式绑定"></a>8.1、class样式绑定</h3><ul><li>对象语法（<code>用于控制开关切换</code>）【高频】</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* CSS片段 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active: isActive&#125;&quot;</span>&gt;</span>class样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// JavaScript片段</span></span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">isActive</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数组写法【低频】</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* CSS片段 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[activeClass]&quot;</span>&gt;</span>数组写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// JavaScript片段</span></span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">activeClass</span>: <span class="string">&#x27;active&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2、style样式处理"><a href="#8-2、style样式处理" class="headerlink" title="8.2、style样式处理"></a>8.2、style样式处理</h3><ul><li>对象语法【高频用法】</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML片段 --&gt;</span></span><br><span class="line">&lt;div:style=&quot;&#123;color: redColor, fontSize: &#x27;20px&#x27;&#125;&quot;&gt;对象写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// JavaScript片段</span></span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">redColor</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数组语法【基本不用】</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[color, fontSize]&quot;</span>&gt;</span>数组写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// JavaScript片段</span></span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">color</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">fontSize</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="string">&#x27;font-size&#x27;</span>: <span class="string">&#x27;20px&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9、v-model"><a href="#9、v-model" class="headerlink" title="9、v-model"></a>9、v-model</h2><p><strong>作用:：</strong>表单元素的绑定，实现了<strong>双向数据绑定</strong>，通过表单项可以更改数据。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/9c5b0121053708abca7fb4fb7aad1ebbbccda672.png?sign=c753d4526e96e7bbb0e226e6b3036883&t=5f2d216b" alt="单向与双向数据绑定"></p><p>v-model会忽略所有表单元素的value、checked、selected特性的初始值,而总是将Vue实例的数据作为数据来源，应该在data选项中声明初始值。</p><ul><li>普通文本框上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    v-model其实是`语法糖`,它是下面这种写法的简写</span></span><br><span class="line"><span class="comment">    语法糖：这种语法对语言的功能并没有影响，但是更方便程序员使用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">:value</span>=<span class="string">&#x27;msg&#x27;</span> @<span class="attr">input</span>=<span class="string">&#x27;msg=$event.target.value&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">msg</span>: <span class="string">&#x27;message默认值&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>多行文本框上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>: <span class="string">&#x27;我是多行文本内容&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：在多行文本框中使用插值表达式无效（此时，其只能接受数据，不能改变数据）</strong></p><ul><li>单个复选框上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">checked</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>多个复选框上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;html&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;css&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;js&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果数组中有对应的value值，则此checkbox会被选中</span></span></span><br><span class="line"><span class="javascript"><span class="attr">checkedNames</span>:[]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：此种用法需要<code>input</code>标签提供<code>value</code>属性，并且需要注意属性的大小写要与数组元素的大小写一致</strong></p><ul><li>单选按钮上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>下拉框上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">selected</span>: <span class="string">&#x27;JS&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修饰符</li></ul><blockquote><p>.lazy：默认情况下Vue的数据同步采用<code>input</code>事件，使用<code>.lazy</code>将其修改为失去焦点时触发</p><p>.number：自动将用户的输入值转为数值类型（如果能转的话）</p><p>.trim：自动过滤用户输入的首尾空白字符</p></blockquote><h2 id="10、综合案例：全选-全不选"><a href="#10、综合案例：全选-全不选" class="headerlink" title="10、综合案例：全选/全不选"></a>10、综合案例：全选/全不选</h2><p>详细代码见代码文件</p><h1 id="四、Vue常用属性"><a href="#四、Vue常用属性" class="headerlink" title="四、Vue常用属性"></a>四、Vue常用属性</h1><h2 id="1、自定义指令-directive"><a href="#1、自定义指令-directive" class="headerlink" title="1、自定义指令 - directive"></a>1、自定义指令 - directive</h2><p>除了核心功能默认内置的指令，Vue也允许开发者注册自定义指令。有的情况下，对普通DOM元素进行底层操作，这时候就会用到自定义指令绑定到元素上执行相关操作。</p><p><strong>自定义指令分为：全局指令和局部指令</strong>，当全局指令和局部指令同名时<strong>以局部指令为准</strong>（局部指令的优先级高于全局的）。</p><p><strong>问题：全局与局部有什么区别？</strong></p><ul><li><strong>在当前（非工程化，每一个文件都是一个html文件）的时候是没区别的</strong></li><li>vue工程化的时候是有区别的<ul><li>全局的适用于整个项目的（常用）</li><li>局部的适用于当前组件的</li></ul></li></ul><p>自定义指令<strong>常用</strong>钩子函数（名字固定的函数）有：</p><ul><li>bind：在<strong>指令</strong>第一次绑定到元素时调用（在<strong>该环节中是获取不到父节点的</strong>，父节点是null），序号：1</li><li>inserted：被绑定<strong>元素</strong>插入父节点时调用（在<strong>该环节中是可以获取到父节点的</strong>），序号：2</li><li>update：数据更新时调用，序号：3（该环节会重复触发）</li><li>componentUpdated：指定元素及子节点更新完成后会触发</li><li>unbind：取消绑定后触发</li></ul><blockquote><p>请注意：不管在定义全局还是局部自定义指令时，<strong>所提及的指令名均是不带<code>v-</code>前缀的名称</strong>。</p></blockquote><p><strong>全局指令语法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;指令名&#x27;</span>,&#123;</span><br><span class="line">钩子函数名: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    <span class="comment">// el参数是挂载到的元素的DOM对象</span></span><br><span class="line">    <span class="comment">// &lt;div v-abc&gt;123&lt;/div&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传参</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;指令名&#x27;</span>,&#123;</span><br><span class="line">钩子函数名: <span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> param = binding.value</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>请务必注意，作为全局配置，不能将其写在指定的Vue实例里，后续其它全局配置亦是如此</strong></p></blockquote><p><strong>局部自定义指令定义</strong></p><p>可以在<code>new Vue</code>的时候添加<code>directives</code>以注册局部自定义指令，局部自定义指令只能在当前组件实例中使用：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">  指令名: &#123;</span><br><span class="line">    <span class="comment">// 指令的定义</span></span><br><span class="line">    钩子函数名: <span class="function"><span class="keyword">function</span> (<span class="params">el,binding</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数简写（了解，使用机会很少）</strong></p><blockquote><p>部分时候，我们可能想在 <code>bind</code> <strong>和 <strong><code>update</code> 时触发</strong>相同</strong>行为（如果只是其一，则还是单独分开声明），而不关心其它的钩子。那么这样写：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;指令名&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el,binding</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部</span></span><br><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line">  指令名: <span class="function"><span class="keyword">function</span> (<span class="params">el,binding</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 业务逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在自定义指令的方法中，不能像以前的<code>methods</code>中的方法一样使用关键词<code>this</code>，此时<code>this</code>关键词指向的是<code>Window</code>对象。</p></blockquote><p>案例：使用自定义指令实现以下效果</p><ul><li>使用全局指令定义自定义的<code>v-red（不传参）</code>和<code>v-color（传参）</code>，在元素被插入时设置内容颜色</li><li>使用局部自定义指令实现<code>v-mobile（不传参）</code>验证用户输入的是否是合法的手机号，不合法手机号为红色，合法为黑色</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指令v-red，实现将文字的颜色设置成红色 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-red</span>&gt;</span>武汉上演建党百年长江灯光秀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指令v-color：实现将文字的颜色设置成指定的颜色 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-color</span>=<span class="string">&quot;&#x27;blue&#x27;&quot;</span>&gt;</span>将延长边境防疫管控1年?中方回应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指令v-mobile：需要验证用户输入的手机号是否合法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">v-mobile</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局自定义指令</span></span></span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">&quot;red&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// bind: function(el)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     // el是指令绑定的dom对象</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     console.log(el);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     // 获取父节点，当然当前bind的时候是获取不到的，因此为null</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     console.log(el.parentNode);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// el表示dom对象</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(el);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// el.parentNode表示其父节点</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(el.parentNode);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 通过dom对象，设置颜色</span></span></span><br><span class="line"><span class="javascript">            el.style.color = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">&quot;color&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(el, binding);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// binding.value表示属性的值（该值不是看到的表达式，而是解析完后的值）</span></span></span><br><span class="line"><span class="javascript">            el.style.color = binding.value</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">mobile</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 自定义指令：</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">mobile</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 定义需要使用的函数</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(el);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 获取手机号</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> mobile = el.value</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 正则表达式验证手机号是否合法</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>.test(mobile)) &#123;</span></span><br><span class="line"><span class="javascript">                        el.style.color = <span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        el.style.color = <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、计算属性-computed"><a href="#2、计算属性-computed" class="headerlink" title="2、计算属性 - computed"></a>2、计算属性 - computed</h2><p>模板中放入太多的逻辑（方法）会让模板过重且难以维护，使用计算属性可以让模板变得简洁易于维护。计算属性是基于它们的响应式依赖进行<strong>缓存</strong>的，计算属性比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化。</p><p>计算属性定义在Vue对象中，通过关键词<code>computed</code>属性对象中定义一个个函数，并返回一个值，使用计算属性时和<code>data</code>中的数据使用方式一致。</p><p>核心点：</p><ul><li>计算属性其在代码的表现也是方法，但是与methods不同<ul><li>计算属性必须有return</li></ul></li><li>在某些场景下，计算属性的效率要比methods效率高<ul><li>计算属性支持数据的缓存操作（在依赖数据不变的情况下），而methods不行</li></ul></li></ul><p><strong>示例</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当多次调用 cfn计算属性时只要里面的 num值不改变,它会把第一次计算的结果直接返回直到data中的num值改变 计算属性才会重新发生计算 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; cfn &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; cfn &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 调用methods中的方法的时候  他每次会重新调用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; fn() &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; fn() &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">num</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 方法</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fn</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;methods&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.num;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 计算属性</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">cfn</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;computed&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.num;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>只要依赖的数据源不发生改变，计算属性里的对应方法就只被调用1次，其它时候被调用时则使用缓存。提高效率。</p><h2 id="3、监听器-watch"><a href="#3、监听器-watch" class="headerlink" title="3、监听器 - watch"></a>3、监听器 - watch</h2><p>使用watch来侦听<strong>data</strong>中数据的变化，<strong>watch中的属性（watch是对象格式）一定是data 中已经存在的数据</strong>。（特殊情况除外）</p><p><strong>使用场景：</strong>数据变化时执行<strong>异步或开销比较大的操作</strong>。</p><p><strong>典型应用：</strong><a href="http://www.pinyinzi.cn/">http://www.pinyinzi.cn/</a></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/6ae51459d0c21c076baf58e26829a6265e3ee938.png?sign=87b53c566e524496faa45fc17ee38816&t=5f3648ac" alt="监听器"></p><p><strong>案例：</strong>给定三个输入框，第一个为姓输入框，第二个为名输入框，第三个为姓名组合结果框；要求当用户更新姓或名后，第三个输入框自动生成完整的姓名结果。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">.....</span><br><span class="line">watch: &#123;</span><br><span class="line">data中数据的名称: fn方法,</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>参考代码：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;firstName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;lastName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;名&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;fullName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;全名&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fullName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fullName = val + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + val</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意点：</p><ul><li>声明监听器，使用的关键词是<code>watch</code></li><li>每个监听器的方法，可以接受2个参数，第一个参数是新的值，第二个参数是之前的值</li></ul></blockquote><p><strong>注意：</strong>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，此时就需要deep属性对对象进行<strong>深度监听</strong>。</p><p><strong>使用对象的数据形式改写上述案例参考代码：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userinfo.firstName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userinfo.lastName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;名&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userinfo.fullName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;全名&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">userinfo</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">lastName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">fullName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">userinfo</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// handler是固定的写法</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params">val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.userinfo.fullName = val.firstName + <span class="string">&#x27; &#x27;</span> + val.lastName</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 对象支持引用传值</span></span></span><br><span class="line"><span class="javascript">                    val.fullName = val.firstName + <span class="string">&#x27; &#x27;</span> + val.lastName</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">deep</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>面试题：vue中计算属性与监听器有什么区别？？</strong></p><ul><li>设计方式上的区别<ul><li>计算属性：依赖数据的，只要数据不变，它会套用固定的流程去执行。我们写好之后一劳永逸的。（我们只要告诉其数据的处理规则）</li><li>监听器：需要我们自己去写比较复杂的数据处理过程，比如说一些异步的操作、开销大的操作（我们自己写数据处理逻辑）</li></ul></li><li>响应方式上的区别<ul><li>计算属性：支持深度深度数据是否变化的监听的（默认的）</li><li>监听器：默认不支持深度响应，仅支持字面量处理，但是其支持通过代码的改动来支持深度监听</li></ul></li></ul><h2 id="4、综合案例：完善购物车"><a href="#4、综合案例：完善购物车" class="headerlink" title="4、综合案例：完善购物车"></a>4、综合案例：完善购物车</h2><p><strong>进一步需求：</strong></p><ul><li>增加自动计算总价功能，只计算被选中的商品【计算属性】</li><li>增加反选功能【事件绑定】</li><li>当手动选中全部商品，<code>全选</code>复选框自动选中，但凡有一个商品的复选框没有被选中，则<code>全选</code>复选框不选中【监听器】</li></ul><p>实现代码参考代码文件。</p><h2 id="5、过滤器"><a href="#5、过滤器" class="headerlink" title="5、过滤器"></a>5、过滤器</h2><p><strong>作用：</strong>格式化数据，比如将字符串格式化为首字母大写、将日期格式化为指定的格式等。</p><ul><li>过滤器可以定义成全局过滤器和局部过滤器。</li><li><strong>过滤器的本质就是一个方法</strong>，使用过滤器实际上就相当于方法调用，仅是书写形式上的差异（使用的时候需要用“|”（shift + \），其也可以被称之为<code>管道</code>或<code>变量/数据修饰符</code>）</li><li>这玩意在vue3中已经废弃了<ul><li>vue3中解决办法是通过methods来替代</li></ul></li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/82ec23d614d0bf55ff0e2ecc1ac9414db2607490.png?sign=019afa9de124d3e56fb0fb0584616f73&t=5f364f40" alt="过滤器"></p><p><strong>声明语法：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局过滤器</span></span><br><span class="line">Vue.filter(<span class="string">&#x27;过滤器名称&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value[,arg1,arg2...]</span>)</span>&#123;</span><br><span class="line"><span class="comment">//过滤器业务逻辑</span></span><br><span class="line"><span class="keyword">return</span> ....</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部过滤器</span></span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">filters</span>: &#123;</span><br><span class="line">    过滤器名称: <span class="function"><span class="keyword">function</span>(<span class="params">value[,arg1,arg2...]</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> something</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>过滤器的处理函数中的第一个参数<strong>固定</strong>是<code>绑定的待处理数据</code>，后续可以根据需要添加自定义参数</p></blockquote><p><strong>使用语法：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 过滤器使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | upper&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 过滤器允许连续使用，“前 → 后”按顺序执行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | upper | lower&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 过滤器支持在v-bind中使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&#x27;id | formatId&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 过滤器支持传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | mysub(1,2)&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>案例：声明转字母为大写的全局过滤器和转字母为小写的局部过滤器并使用</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;msg | toUpper&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;msg | toLower&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局过滤器：转字母为大写</span></span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">&#x27;toUpper&#x27;</span>,<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> val.toUpperCase()</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">&#x27;HeLLo WoRld&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 局部过滤器：转字母为小写</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">toLower</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> val.toLowerCase()</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、混入-mixin"><a href="#6、混入-mixin" class="headerlink" title="6、混入 - mixin"></a>6、混入 - mixin</h2><p>混入（mixins）是一种分发Vue组件中<strong>可复用</strong>功能的非常灵活的方式。<strong>混入对象可以包含任意组件选项</strong>。当组件使用混入对象时，==所有混入对象（加的水）的选项将被混入该组件本身的选项（锅底）。==</p><p>通俗来讲，就是把一部分可复用的代码片段，加入到另一个代码中。</p><p>混入分为全局混入和局部混入。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/e090362ac96d806e9cec71c693b62f2640ea9967.jpeg?sign=553e389ab69879e18d97d6c7520f7daa&t=5f58b1a8" alt="混入"></p><p><strong>示例：</strong></p><ul><li>局部混入（按需混入）【推荐】</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义一个混入对象（局部混入）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myMixin = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.hello();</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">hello</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;hello from mixin!&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            ....</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">mixins</span>: [myMixin],</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>全局混入（强制混入）</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局混入</span></span></span><br><span class="line"><span class="javascript">    Vue.mixin(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> myOption = <span class="built_in">this</span>.myOption;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (myOption) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(myOption);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">myOption</span>: <span class="string">&quot;hello!&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意事项</strong></p></blockquote><ul><li>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”，合并策略：<ul><li><code>data</code>数据对象发生冲突时以组件（被混入对象）数据优先</li><li>同名钩子函数（生命周期函数）将合并为一个数组，都将被调用，并且混入对象的钩子将在组件自身钩子<strong>之前</strong>调用</li><li>值为对象的选项，例如 <code>methods</code>、<code>components</code> 和 <code>directives</code>，将被合并为同一个对象。两个对象键名冲突时，取组件对象（自身）的键值对</li></ul></li><li>全局注册使用时需要格外小心！一旦使用全局混入，它将影响<strong>每一个</strong>之后创建的 Vue 实例</li></ul><h2 id="7、生命周期"><a href="#7、生命周期" class="headerlink" title="7、生命周期"></a>7、生命周期</h2><p>生命周期：从vue实例产生开始到vue实例被销毁这段时间所经历的过程。</p><p>vue更像工具人，在整个过程中只会按照作者预设的程序去做事，不能由开发者去控制或者diy。如果这样开发时限制是比较多的，因此作者开放了生命周期，允许我们定义vue在特定的时候去做我们让其做的事情（钩子函数）。</p><p>每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM，在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，目的是给予用户在一些特定的场景下添加他们自己代码的机会。</p><p>vue2中一共有11个生命周期。</p><p>Vue生命周期的<strong>主要阶段</strong>：</p><ul><li>挂载（初始化相关属性）<ul><li>beforeCreate<ul><li><strong>注意点</strong>：在此时不能获取data中的数据，也就是说<code>this.msg</code>得到的是<code>undefined</code></li></ul></li><li>created</li><li>beforeMount</li><li>mounted【页面加载完毕的时候就是此时】<ul><li><strong>注意点</strong>：默认情况下，在组件的生命周期中只会触发一次</li></ul></li></ul></li><li>更新（元素或组件的变更操作）<ul><li>beforeUpdate</li><li>updated<ul><li><strong>注意点</strong>：可以重复触发的</li></ul></li></ul></li><li>销毁（销毁相关属性）<ul><li>beforeDestroy<ul><li><strong>注意点</strong>：</li></ul></li><li>destroyed</li></ul></li></ul><blockquote><p>销毁（手动）使用<code>this.$destroy()</code></p></blockquote><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/5d6a79ad2a3b74d4ad9d70f868de0545f9939b8f.png?sign=b2936e9953891efac26abe8060495936&t=5f365858" alt="生命周期"></p><p>关于8个生命周期涉及到的方法，可以参考Vue官网API：<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90</a></p><p><strong>面试题：</strong></p><ul><li>常用的vue的生命周期是哪些？<ul><li>要点：4阶段，8个周期函数</li></ul></li><li>如果组件存在父子关系的时候，父组件（A）与子组件（B）生命周期执行的顺序是怎样的？<ul><li>思路：<ul><li>A组件有8个常用周期：创建2个、挂载2个、更新2个、销毁2个</li><li>B组件有8个常用周期：创建2个、挂载2个、更新2个、销毁2个</li></ul></li><li>答案：将8个周期划分为三阶段（1-4，5-6，7-8）<ul><li>渲染阶段：父1 → 父2 → 父3 → 子1 → 子2 → 子3 → 子4 → 父4</li><li>更新阶段：父5 → 子5 → 子6 → 父6</li><li>销毁阶段：父7 → 子7 → 子8 → 父8</li></ul></li></ul></li></ul><h2 id="8、虚拟DOM与diff算法"><a href="#8、虚拟DOM与diff算法" class="headerlink" title="8、虚拟DOM与diff算法"></a>8、虚拟DOM与diff算法</h2><p><strong>什么是虚拟DOM？</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/7782f6424492630815195ed5722bdae78448601c.png?sign=e33c1bcebed7f86de415715793bb5444&t=5f60a247" alt="虚拟DOM"></p><p>定义：指将真实的dom按照特定的语法转化（抽象）成一个js对象，这个<strong>js对象称之为虚拟dom</strong>。</p><p><strong>什么是diff（different）算法？</strong></p><p>差异比较算法的一种，把树形结构按照层级分解，只<strong>比较同级</strong>元素。不同层级的节点只有创建和删除操作</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/925fb1057a940bea0ea1863cb6df88c72496d65f.png?sign=a480a62fcd8497af8a60acd193b4facd&t=5f60a529" alt="diff算法"></p><p><strong><code>虚拟DOM+diff算法</code>的方式与<code>传统DOM操作</code>相比，有什么好处？</strong></p><p><strong>传统DOM操作</strong>：在一次操作中，往往会伴随多次个DOM节点更新，浏览器收到第一个DOM请求后并不知道还有若干次更新操作，因此会马上执行流程，最终执行若干次次。在后续找DOM坐标的时候，可能因为前期更新DOM导致了后续需要寻找的DOM坐标发生了变化。而操作DOM频繁还会出现页面卡顿，影响用户体验。</p><p><strong>虚拟DOM+diff算法</strong>：若一次操作中有若干次更新DOM的动作，虚拟DOM不会立即操作DOM，而是将这若干次更新的diff内容保存到本地一个JS对象中，最终将这个JS对象<strong>一次性</strong>放到DOM树上，再进行后续操作，避免大量无谓的计算量。</p><p>建议：面试之前一定要去找下比较正规的理论性的东西。</p><h2 id="9、双向数据绑定原理"><a href="#9、双向数据绑定原理" class="headerlink" title="9、双向数据绑定原理"></a>9、双向数据绑定原理</h2><p>==面试可能会被大概率问到，需要领悟其中的关键词“代理”、“Object.defineProperty（vue2）”、“Proxy（vue3）”==</p><p>==核心：数据订阅、数据劫持（代理）==</p><p><strong>当把一个普通的JavaScript对象传给Vue实例的data选项，Vue将遍历此对象所有的属性，使用Object.defineProperty把这些属性全部转为getter（获取）/setter（设置）。</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5中提供的方法</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</span><br><span class="line"><span class="comment">// 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span></span><br><span class="line"><span class="comment">// 应当直接在Object构造器对象上调用此方法，而不是在任意一个Object类型的实例上调用。</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>obj</strong></em></p><p>要定义属性的对象。</p><p><em><strong>prop</strong></em></p><p>要定义或修改的属性的名称 。</p><p><em><strong>descriptor</strong></em></p><p>要定义选项，“{    }”。在这里面设置getter和setter。</p></blockquote><p><strong>示例代码：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inpt&quot;</span> <span class="attr">oninput</span>=<span class="string">&quot;changeVal(this.value)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 定义数据源</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">&quot;hello world.&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 等同于之前的data属性</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 通过dom操作将数据写在页面上（一锤子买卖）</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;inpt&quot;</span>).value = data.msg;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;content&quot;</span>).innerText = data.msg;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3. 通过Object.defineProperty()去实现数据的劫持(代理)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> obj = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;proxy&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 设置getter和setter</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 代理获取数据</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> data.msg;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 代理设置数据</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                data.msg = val;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;content&quot;</span>).innerText = val;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 4. input事件的处理程序</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">changeVal</span>(<span class="params">val</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(val);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 更新数据源</span></span></span><br><span class="line"><span class="javascript">            obj.proxy = val;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vue2与vue3双向数据绑定的实现比较参考：</p><p><a href="https://www.jianshu.com/p/255d4dec710a">https://www.jianshu.com/p/255d4dec710a</a></p><h1 id="五、网络请求"><a href="#五、网络请求" class="headerlink" title="五、网络请求"></a>五、网络请求</h1><h2 id="1、fetch（认识）"><a href="#1、fetch（认识）" class="headerlink" title="1、fetch（认识）"></a>1、fetch（认识）</h2><ul><li><p><strong>由HTML5提供的内置API</strong></p></li><li><p>更加简单的数据获取方式，功能更强大、灵活，可以看作是xhr的升级版</p></li><li><p>基于Promise实现</p></li><li><p>fetch支持很多请求方式，但默认为<code>GET</code>请求，如果需要使用其他方式可以通过第二个自选参数的<code>method</code>选项去指定</p></li></ul><p><strong>语法结构</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fetch(url[,some settings]).then(fn2)<span class="comment">// 首个then：处理数据的格式</span></span><br><span class="line">  .then(fn3)<span class="comment">// 第二个then是处理业务逻辑的</span></span><br><span class="line">  ...</span><br><span class="line">          .catch(fn)</span><br><span class="line"><span class="comment">// catch，（try catch）</span></span><br></pre></td></tr></table></figure><p><strong>用法示例</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过url表达式来传递数据（GET）</span></span><br><span class="line">fetch(<span class="string">&quot;http://xxx/?id=123&quot;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())<span class="comment">// 将收到的数据进行转化，转化成json格式</span></span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));<span class="comment">// 最终可以获得数据并写业务逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// post标准提交(表单数据)</span></span><br><span class="line">fetch(<span class="string">&quot;http://xxxx/post&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,<span class="comment">// 请求类型限制</span></span><br><span class="line">        <span class="attr">body</span>: <span class="string">&quot;uname=lisi&amp;pwd=123&quot;</span>,<span class="comment">// 提交的数据</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// post提交json数据（接口开发）</span></span><br><span class="line">fetch(<span class="string">&quot;http://localhost:3000/books&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            <span class="attr">uname</span>: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">            <span class="attr">pwd</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><p>在上述代码示例中我们会看到有个<code>json()</code>方法，它是fetch的响应结果处理方法，fetch的常用响应结果处理方法有：</p><ul><li>text()：将返回体处理成字符串类型</li><li>json()：返回结果和JSON.parse(responseText)一样</li></ul><p><strong>将获取到的<code>list</code>数据展示出来</strong></p><p>使用fetch请求接口地址：<a href="https://api.i-lynn.cn/college">https://api.i-lynn.cn/college</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网络请求：fetch<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        fetch</span></span><br><span class="line"><span class="comment">        特点：</span></span><br><span class="line"><span class="comment">            a. h5内置的api，不需要引用相关的js即可使用；</span></span><br><span class="line"><span class="comment">            b. 与xhr的使用相比，其更加简洁、高效；</span></span><br><span class="line"><span class="comment">            c. 基于promoise；</span></span><br><span class="line"><span class="comment">            d. 支持请求类型比较全面；</span></span><br><span class="line"><span class="comment">        语法：</span></span><br><span class="line"><span class="comment">            fetch(请求地址,[可选配置对象]).then(ret =&gt; callback)[.then(ret =&gt; callback)....].catch(callback)</span></span><br><span class="line"><span class="comment">        then中形参的注意点：</span></span><br><span class="line"><span class="comment">            其有俩个方法可以实现数据类型的转化，如果需要的话也可以使用：</span></span><br><span class="line"><span class="comment">                a.   .text()    ret.text()将内容转换成文本内容</span></span><br><span class="line"><span class="comment">                b.   .json()    ret.json()将内容转换成json内容（常见形式）</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            将获取到的`list`数据展示出来</span></span><br><span class="line"><span class="comment">            使用fetch请求接口地址：https://api.i-lynn.cn/college</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item.area&#125;&#125;：&#123;&#123;item.counts&#125;&#125;所<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 初始化值用于后续接收list数据</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">list</span>: []</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 暂时不考虑封装请求到methods中（项目案例中再说）</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                fetch(<span class="string">&quot;https://api.i-lynn.cn/college&quot;</span>).then(<span class="function"><span class="params">ret</span> =&gt;</span> ret.json()).then(<span class="function"><span class="params">ret</span> =&gt;</span> <span class="built_in">this</span>.list = ret.data.list)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、axios"><a href="#2、axios" class="headerlink" title="2、axios"></a>2、axios</h2><p>文档：<a href="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye/axios/234845</a></p><p>axios 是一个基于 promise 的 <strong>HTTP ==库==<strong>，可以用在浏览器和node.js中。</strong>axios是vue作者推荐使用的网络请求库</strong>，它具有以下特性：</p><ul><li>支持浏览器和node.js（降低学习成本）</li><li>支持promise</li><li>能够拦截<code>请求和响应</code>（拦截器）</li><li>自动转换json数据</li></ul><p><strong>在使用axios之前需要在对应的模板文件中引入axios的js库文件</strong>，随后按照以下用法使用axios：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET请求方式</span></span><br><span class="line">axios.get(<span class="string">&#x27;/get_data?id=10010&#x27;</span>).then(<span class="function"><span class="params">ret</span> =&gt;</span> <span class="built_in">console</span>.log(ret.data))</span><br><span class="line">axios.get(<span class="string">&#x27;/get_data&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">10010</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">ret</span> =&gt;</span> <span class="built_in">console</span>.log(ret.data))</span><br><span class="line"></span><br><span class="line"><span class="comment">//POST请求方式</span></span><br><span class="line"><span class="comment">// 参数是对象形式的，axios发送的请求头是application/json</span></span><br><span class="line">axios.post(<span class="string">&#x27;/set_data&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;zhang&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;san&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123; &#125;)</span><br><span class="line"><span class="comment">// 参数是字符串形式的，axios发送的请求头是application/x-www-form-urlencoded</span></span><br><span class="line">axios.post(<span class="string">&#x27;/set_data&#x27;</span>,<span class="string">&quot;firstName=zhang&amp;lastName=san&quot;</span>).then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先不指定请求类型，在配置中去指定请求类型（类似$.ajax）</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;set_data&#x27;</span>,</span><br><span class="line">    <span class="comment">// 超时时间：如果请求花的时候超过了预设时间，则请求取消</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;头信息名&#x27;</span>: <span class="string">&#x27;头信息值&#x27;</span>&#125;,</span><br><span class="line">  <span class="attr">data</span>: <span class="string">&quot;username=zhangsan&amp;type=2&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure><p>当然axios<strong>除了</strong>支持传统的<code>GET</code>和<code>POST</code>方式<strong>以外</strong>，常见的请求方式还支持：</p><ul><li>put：修改数据</li><li>delete：删除数据</li></ul><blockquote><p>需要注意，<strong>针对POST/PUT请求</strong>，此处的参数提交格式以参数形式为准，如果是字符串（a=b&amp;c=d形式），则发送表单格式（”Content-Type”: “application/x-www-form-urlencoded”）；如果是对象，则发送json格式（”Content-Type”: “application/json”）。</p></blockquote><p>以上方的axios请求示例为例，axios响应结果（<code>ret</code>）的主要属性有：</p><ul><li><strong>data：实际响应回来的数据（最常用）</strong></li><li>headers：响应头信息</li><li>status：响应状态码</li><li>statusText：响应状态信息</li><li>config</li><li>request</li></ul><p>另外需要注意的是，在使用axios发送请求之前它允许我们通过<strong>全局配置</strong>做一些设置，这样可以方便后续的请求操作，例如：</p><ul><li>axios.defaults.timeout = 3000【设置超时时间】</li><li>axios.defaults.baseURL = ‘<a href="http://localhost/app&#39;%E3%80%90%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%9C%B0%E5%9D%80%E3%80%91">http://localhost/app&#39;【设置默认地址】</a></li><li>axios.defaults.headers[‘_token’] = ‘123123123’【设置请求头信息，通用头信息】<ul><li>axios.defaults.headers.get[‘_token’] = ‘123123’</li><li>axios.defaults.headers.post[‘_token’] = ‘123123’</li><li>axios.defaults.headers.common[‘_token’] = ‘123123’【通用头信息，common可以不写】</li></ul></li><li>…</li></ul><p><strong>使用axios方式改写<code>XHR</code>部分案例</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网络请求：axios<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        axios</span></span><br><span class="line"><span class="comment">        特点：</span></span><br><span class="line"><span class="comment">            a. 可以在浏览器和nodejs环境中运行；</span></span><br><span class="line"><span class="comment">            b. 基于promise；</span></span><br><span class="line"><span class="comment">            c. 实现请求的拦截和响应的拦截（项目案例中再说）；</span></span><br><span class="line"><span class="comment">            d. 其能够实现自动默认转化数据为json；</span></span><br><span class="line"><span class="comment">        缺点：</span></span><br><span class="line"><span class="comment">            a. 与fetch相比，需要引入外部的axios文件才可使用；</span></span><br><span class="line"><span class="comment">        安装：</span></span><br><span class="line"><span class="comment">            工程化：npm i axios</span></span><br><span class="line"><span class="comment">            非工程化：通过script标签引入以下地址https://unpkg.com/axios/dist/axios.min.js</span></span><br><span class="line"><span class="comment">                    或者将该地址对应的js文件另存到本地再引入本地地址</span></span><br><span class="line"><span class="comment">        语法：</span></span><br><span class="line"><span class="comment">            a. axios.请求类型(地址,[可选对象/字符串]).then(res =&gt; 处理程序)</span></span><br><span class="line"><span class="comment">                请求类型支持：get/post/put/delete.....</span></span><br><span class="line"><span class="comment">            b. axios(配置对象).then(res =&gt; 处理程序)</span></span><br><span class="line"><span class="comment">        注意点：</span></span><br><span class="line"><span class="comment">            针对post和put请求类型，axios会根据传递的参数格式自动设置请求头，规则如下：</span></span><br><span class="line"><span class="comment">                如果请求参数是对象格式，则请求头会被设置成：application/json</span></span><br><span class="line"><span class="comment">                如果请求参数是查询字符串，则请求头会被设置成：application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">            axios会自动将数据转化成json格式</span></span><br><span class="line"><span class="comment">            网络请求返回的数据在axios返回结果的data属性中</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            将获取到的`list`数据展示出来</span></span><br><span class="line"><span class="comment">            使用fetch请求接口地址：https://api.i-lynn.cn/college</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span> &#123;&#123;item.area&#125;&#125;：&#123;&#123;item.counts&#125;&#125;所 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入本地的axios --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">list</span>: []</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 1. 使用axios发送常规get请求</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// axios.get(&quot;https://api.i-lynn.cn/college?id=1044&quot;).then(res =&gt; this.list = res.data.data.list)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 2. 使用axios发送get请求，但是通过对象形式传参</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// axios.get(&quot;https://api.i-lynn.cn/college&quot;,&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     params: &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         id: 1045</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;).then(res =&gt; this.list = res.data.data.list)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 3. 使用axios发送post请求，传递表单提交数据</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// axios.post(&quot;https://api.i-lynn.cn/college&quot;,&quot;id=1046&amp;pid=1047&quot;).then(res =&gt; this.list = res.data.data.list)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 4. 使用axios发送post请求，传递的是json数据</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// axios.post(&quot;https://api.i-lynn.cn/college&quot;,&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     id: 1048,</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     pid: 1049</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;).then(res =&gt; this.list = res.data.data.list)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 5. 使用对象配置</span></span></span><br><span class="line"><span class="javascript">                axios(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>: <span class="string">&quot;https://api.i-lynn.cn/college&quot;</span>,</span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">this</span>.list = res.data.data.list)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="六、组件（重点）"><a href="#六、组件（重点）" class="headerlink" title="六、组件（重点）"></a>六、组件（重点）</h1><h2 id="1、什么是组件"><a href="#1、什么是组件" class="headerlink" title="1、什么是组件"></a>1、什么是组件</h2><p>组件 （Component）是 Vue.js 最强大的功能之一，<strong>组件是一个自定义HTML元素（标签）</strong>或称为一个模块，包括所需的模板（HTML）、逻辑（JavaScript）和样式（CSS）。</p><p><strong>组件化开发的特点：</strong></p><ul><li>标准</li><li>分治（解耦）</li><li>重用</li><li>组合</li></ul><p>组件也是有<code>全局（component）</code>与<code>局部（components）</code>之分。</p><h2 id="2、组件的注册及使用"><a href="#2、组件的注册及使用" class="headerlink" title="2、组件的注册及使用"></a>2、组件的注册及使用</h2><p>在使用组件时需要注意以下几点：</p><ul><li>构造 Vue 实例时传入的各种选项<strong>大多数</strong>都可以基于原格式在组件里使用，只有一个例外：<strong>data必须是函数，同时这个函数要求必须返回一个对象</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;你好世界&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>组件模板<code>template</code></p><ul><li><p>必须是单个根元素</p></li><li><p>~~~html</p><!-- 单个根元素 --><div>    <ul>        <li></li>    </ul>    <ul>        <li></li>    </ul></div><!-- 不符合单个根元素的情况 --><p></p><p></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 支持模板字符串形式</span><br><span class="line"></span><br><span class="line">- 组件名称命名方式</span><br><span class="line"></span><br><span class="line">  - 短横线方式（推荐）</span><br><span class="line">    - my-component</span><br><span class="line">  - 大驼峰方式（只能在其他组件模板字符串中使用，不能在HTML模板中**直接**使用）</span><br><span class="line">    - MyComponent</span><br><span class="line"></span><br><span class="line">&gt; 大驼峰式组件名不能在HTML模板中直接使用，如果需要在HTML模板中使用，需要将其进行特定规则转化：</span><br><span class="line">&gt;</span><br><span class="line">&gt; - 首字母从大写转为小写</span><br><span class="line">&gt; - 后续每遇到大写字母都要转化成小写并且在转化后的小写字母前加`-`</span><br><span class="line">&gt;</span><br><span class="line">&gt; 例如，`WoDeZuJian`这个大驼峰组件名在HTML中使用的时候需要写成`wo-de-zu-jian`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2.1、全局组件</span><br><span class="line"></span><br><span class="line">全局组件注册形式如下：</span><br><span class="line"></span><br><span class="line">~~~javascript</span><br><span class="line">// 声明全局组件</span><br><span class="line">Vue.component(componentName,&#123;</span><br><span class="line">    // 存放该组件需要使用的数据</span><br><span class="line">    data: function()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 用于定义组件的视图内容</span><br><span class="line">    template: &#x27;组件模版内容&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>上述示例中，<code>component()</code>的第一个参数是<code>组件名</code>（<strong>实则可以看作是HTML标签名称</strong>），第二个参数是一个对象形式的选项，里面存放组件的声明信息。全局组件注册后，任何Vue实例都可以使用。</p><p>例如，有以下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个全局的HelloWorld组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;HelloWorld&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;HelloWorld&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2、局部组件"><a href="#2-2、局部组件" class="headerlink" title="2.2、局部组件"></a>2.2、局部组件</h3><p>局部组件定义后只能在当前注册它的Vue实例中使用，其是通过某个 Vue 实例/组件的实例选项 components 注册。</p><p>例如，有以下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;A custom component!&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// &lt;my-component/&gt; 将只在父组件模板中可用</span></span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>: Child,</span><br><span class="line">        <span class="comment">// &lt;child/&gt;</span></span><br><span class="line">        Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-3、组件的使用"><a href="#2-3、组件的使用" class="headerlink" title="2.3、组件的使用"></a>2.3、组件的使用</h3><p>在HTML模板中，组件以<strong>一个自定义标签的形式存在</strong>，起到占位符的功能。通过Vue.js的声明式渲染后，占位符将会被替换为实际的内容，下面是一个最简单的模块示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以在一个组件的组件模板中去使用<strong>其他==已经注册==（一般是指全局组件）</strong>的组件，例如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用局部组件component_two --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component_two</span>&gt;</span><span class="tag">&lt;/<span class="name">component_two</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注册全局组件component_one</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;component_one&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;我是组件component_one&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> component_two = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>:</span></span><br><span class="line"><span class="javascript">            <span class="string">`&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;div&gt;我是组件component_two&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;component_one&gt;&lt;/component_one&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;/div&gt;`</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 注册局部组件component_two</span></span></span><br><span class="line"><span class="javascript">            component_two</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、组件间传值（重点）"><a href="#3、组件间传值（重点）" class="headerlink" title="3、组件间传值（重点）"></a>3、组件间传值（重点）</h2><h3 id="3-1、父传子"><a href="#3-1、父传子" class="headerlink" title="3.1、父传子"></a>3.1、父传子</h3><ul><li>父组件以属性的形式绑定值到子组件身上（传）</li><li>子组件通过使用属性props接收（收）<ul><li>props是单向绑定的（只读属性）：当父组件的属性变化时，将传导给子组件，但是反过来不会</li><li>props属性支持两种常见的写法形式<ul><li>数组（推荐）<ul><li>优点：书写简单</li><li>缺点：不能设置默认值、数据类型</li></ul></li><li>对象<ul><li>优点：可以设置数据默认值与数据类型</li><li>缺点：写法复杂</li></ul></li></ul></li></ul></li></ul><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:day</span>=<span class="string">&#x27;day&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> child = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// props形式一：数组形式</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>: [<span class="string">&#x27;day&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">// props形式二：对象形式</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">day</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">default</span>: <span class="string">&#x27;日&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>: <span class="built_in">String</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;p&gt;星期&#123;&#123;day&#125;&#125;&lt;/p&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">day</span>: <span class="string">&#x27;五&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            child</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2、子传父"><a href="#3-2、子传父" class="headerlink" title="3.2、子传父"></a>3.2、子传父</h3><ul><li>子组件模版内容中用<code>$emit()</code>触发<code>自定义事件</code>，<code>$emit()</code>方法<strong>至少</strong>有2个参数<ul><li>第一个参数为自定义的事件名称（不要和内置的事件重名，例如click、change等）</li><li>第二个参数为需要传递的数据（可选，可以是任何格式的数据）</li></ul></li><li>父组件模板内容中的子组件占位标签上用v-on（或@）绑定子组件定义的自定义事件名，监听子组件的事件，实现通信</li></ul><p><strong>示例代码：每点击子组件按钮给父组件字体加9（由子决定，当然也可以写成其它的值）像素</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> @<span class="attr">anlarge-text</span>=<span class="string">&#x27;bigger&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: fontSize + &#x27;px&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> child = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">`&lt;button @click=&quot;$emit(&#x27;anlarge-text&#x27;,9)&quot;&gt;点我给父组件字体加9px&lt;/button&gt;`</span>,</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 根组件（父）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">&#x27;hello vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fontSize</span>: <span class="number">12</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            child</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">bigger</span>: <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fontSize += n</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/03/74cca37e9f1958684fb725b118bdc6289d6b7a84.png?sign=f5d83cb284d62ddb900505cdcd7bfe6f&t=6061846a"></p><h3 id="3-3、组件间传值"><a href="#3-3、组件间传值" class="headerlink" title="3.3、组件间传值"></a>3.3、组件间传值</h3><blockquote><p>EventBus又被称之为<strong>中央事件总线</strong></p></blockquote><p>在Vue中通过单独的<code>事件中心</code>来管理非<code>父子关系</code>组件（兄弟）间的通信：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/297ffa8474e3e1ba1b392c422284a9889d9181f8.png?sign=b6a91e2548fd10fabc71f4adf538d61d&t=5f3a3491" alt="事件中心"></p><p><strong>核心步骤</strong></p><ul><li><p>建立事件中心</p><ul><li>~~~javascript<br>const eventBus = new Vue()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 传递数据</span><br><span class="line"></span><br><span class="line">  - ~~~javascript</span><br><span class="line">    eventBus.$emit(&#x27;自定义事件名&#x27;,传递的数据)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>接收数据</p><ul><li>~~~javascript<br>eventBus.$on(‘自定义事件名’[,callback])<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 销毁事件中心</span><br><span class="line"></span><br><span class="line">  - ~~~javascript</span><br><span class="line">    eventBus.$off(&#x27;自定义事件名&#x27;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>**案例：<code>互相伤害</code>**（实现代码亦可查看<code>code/03组件通信：中央事件总线.html</code>文件）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        中央事件总线 / eventBus</span></span><br><span class="line"><span class="comment">        使用场景：实现非父子/子父关系的数据传递，典型的如：同级组件的数据通信</span></span><br><span class="line"><span class="comment">        使用步骤：</span></span><br><span class="line"><span class="comment">            a. 创建事件中心，其实就是一个vue实例，不需要组件选项，但是需要保存实例；</span></span><br><span class="line"><span class="comment">                    const eventBus = new Vue()</span></span><br><span class="line"><span class="comment">            b. 在发送数据方触发一个自定义事件并且传递数据；</span></span><br><span class="line"><span class="comment">                    eventBus.$emit(&quot;自定义事件名&quot;,数据)</span></span><br><span class="line"><span class="comment">            c. 在接收数据方监听自定义事件，并且接收数据；</span></span><br><span class="line"><span class="comment">                    eventBus.$on(&quot;自定义事件名&quot;,事件回调函数)</span></span><br><span class="line"><span class="comment">            d. 销毁事件中心（不再进行数据通信的情况下）【可选】；</span></span><br><span class="line"><span class="comment">                    eventBus.$off(&quot;自定义事件名&quot;)</span></span><br><span class="line"><span class="comment">        整体实现思路与子传父是一样的：通过触发自定义事件来传递数据</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            案例：互相伤害（回合制的游戏）</span></span><br><span class="line"><span class="comment">            有俩个人物（组件），其满HP是100，人物一可以在点击按钮后对人物二发动攻击，每次攻击扣减人物二4点hp；人物二每次点击按钮触发对人物一的攻击，每次攻击扣减人物一6点hp。直到有一方hp归零或小于，游戏结束。</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">             让俩个人物上场</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">zhangsan</span>&gt;</span><span class="tag">&lt;/<span class="name">zhangsan</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lisi</span>&gt;</span><span class="tag">&lt;/<span class="name">lisi</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 两人开打之前，先得找一个裁判(eventBus)来计分</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> eventBus = <span class="keyword">new</span> Vue()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 全局组件的使用：定义俩个人物（组件）</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 人物：法外狂徒</span></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">&quot;zhangsan&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 初始化人物数据</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 初始的生命值</span></span></span><br><span class="line"><span class="javascript">                    <span class="attr">hp</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">role_name</span>: <span class="string">&quot;法外狂徒&quot;</span>,</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 组件结构</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;角色名称：&#123;&#123;role_name&#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;角色血量：&#123;&#123;hp&#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;&lt;button @click=&quot;attack_lisi&quot;&gt;对“守法公民”发动攻击&lt;/button&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            `</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 方法集合</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">attack_lisi</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 告诉lisi：你需要扣减4点hp</span></span></span><br><span class="line"><span class="javascript">                    eventBus.$emit(<span class="string">&quot;notice_lisi&quot;</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 监听事件</span></span></span><br><span class="line"><span class="javascript">                eventBus.$on(<span class="string">&quot;notice_zhangsan&quot;</span>, <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(payload);</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.hp - payload &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// hp是够扣减的</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.hp -= payload</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (confirm(<span class="string">&quot;胜败乃兵家常事，大侠是否要充值一试？&quot;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.hp = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// hp是不够扣减的</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.hp = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                            alert(<span class="string">&#x27;Game Over!&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 游戏结束，销毁事件中心</span></span></span><br><span class="line"><span class="javascript">                            eventBus.$off(<span class="string">&quot;notice_zhangsan&quot;</span>)</span></span><br><span class="line"><span class="javascript">                            eventBus.$off(<span class="string">&quot;notice_lisi&quot;</span>)</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 人物：守法公民</span></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">&quot;lisi&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 初始化人物数据</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 初始的生命值</span></span></span><br><span class="line"><span class="javascript">                    <span class="attr">hp</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">role_name</span>: <span class="string">&quot;守法公民&quot;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 组件结构</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;角色名称：&#123;&#123;role_name&#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;角色血量：&#123;&#123;hp&#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;&lt;button @click=&quot;attack_zhangsan&quot;&gt;对“法外狂徒”发动攻击&lt;/button&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            `</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">attack_zhangsan</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 告诉lisi：你需要扣减4点hp</span></span></span><br><span class="line"><span class="javascript">                    eventBus.$emit(<span class="string">&quot;notice_zhangsan&quot;</span>, <span class="number">6</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 问：什么时候（生命周期）监听事件？</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 监听事件</span></span></span><br><span class="line"><span class="javascript">                eventBus.$on(<span class="string">&quot;notice_lisi&quot;</span>, <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(payload);</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.hp - payload &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// hp是够扣减的</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.hp -= payload</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (confirm(<span class="string">&quot;胜败乃兵家常事，大侠是否要充值一试？&quot;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.hp = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// hp是不够扣减的</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.hp = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                            alert(<span class="string">&#x27;Game Over!&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 游戏结束，销毁事件中心</span></span></span><br><span class="line"><span class="javascript">                            eventBus.$off(<span class="string">&quot;notice_zhangsan&quot;</span>)</span></span><br><span class="line"><span class="javascript">                            eventBus.$off(<span class="string">&quot;notice_lisi&quot;</span>)</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;&#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4、ref"><a href="#3-4、ref" class="headerlink" title="3.4、ref"></a>3.4、ref</h3><p>父去取子的数据信息。（方向：子-父，但是区别于之前的子传父，之前是主动，现在是被动）</p><p><code>ref</code>属性被用来给元素或子组件注册引用信息，引用信息将会注册在父组件的 <code>$refs</code> 对象上。如果在普通的 DOM 元素上使用<code>ref</code>属性，则引用指向的就是 DOM 元素；如果<code>ref</code>属性用在子组件上，引用就指向子组件<strong>实例</strong>。</p><ul><li><code>ref</code>放在标签上，拿到的是原生节点。<code>ref</code>放在组件上 拿到的是组件实例</li><li>原理：在父组件中通过<code>ref</code>属性（会被注册到父组件的<code>$refs</code>对象上）拿到组件/DOM对象，从而得到组件/DOM中的<strong>所有的信息</strong>，也包括值</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-comp</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-comp</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.p);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.child);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.comp.msg = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 修改值</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p><code>ref</code>属性这种获取子元素/组件的方式虽然写法简单，容易上手，但是其由于权限过于开放，不推荐使用，有安全问题。（不仅可以获取值，还可以获取其他所有的元素/组件的数据，甚至可以修改这些数据。）</p></blockquote><h2 id="4、动态组件"><a href="#4、动态组件" class="headerlink" title="4、动态组件"></a>4、动态组件</h2><p>通过使用保留的 <code>&lt;component&gt; </code>元素，动态地绑定到它的<code> is</code> 特性，==我们让多个组件可以使用同一个挂载点（位置），并动态切换。==</p><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 多个组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> home = &#123;&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> posts = &#123;&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">currentView</span>: <span class="string">&quot;home&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            home,</span></span><br><span class="line"><span class="javascript">            posts,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>keep-alive</strong>的作用：</p><p><code>keep-alive</code>可以将已经切换出去的非活跃组件保留在内存中。如果把切换出去的组件保留在内存中，可以保留它的状态，避免重新渲染。</p></blockquote><p><strong>案例：使用动态组件实现简易的步骤向导效果</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/74c301397cf23d1f0c58ce398c3d7fe73352ff44.gif?sign=82eb695c150acf8e3ce3ac7ec7e54009&t=5f5b549b" alt="简单步骤向导效果"></p><p><strong>案例参考代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;change(&quot;step1&quot;)&#x27;</span>&gt;</span>第一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;change(&quot;step2&quot;)&#x27;</span>&gt;</span>第二步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;change(&quot;step3&quot;)&#x27;</span>&gt;</span>第三步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> step1 = &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;这是第一步的操作&lt;/div&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> step2 = &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;这是第二步的操作&lt;/div&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> step3 = &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;这是第三步的操作&lt;/div&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&quot;step2&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            step1,</span></span><br><span class="line"><span class="javascript">            step2,</span></span><br><span class="line"><span class="javascript">            step3</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">change</span>:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.name = name</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在动态组件中存在2个生命周期函数（需要配合keep-alive标签）：</p><p>​              activated：激活缓存组件的时候被触发</p><p>​              deactivated：离开缓存组件的时候被触发</p><p>​            当使用了keepalive组件后，组件在切换的时候就不会被销毁，而是被缓存起来了。【此处需要注意生命周期相关的执行情况】</p><p>上述2个周期函数与销毁2的2个周期函数如果都存在，则只会激活其中的一对（要么激活系列，要么销毁系列，可以看作激活系列是销毁系列的替代）。</p><p>如果使用了keepalive，则只有第一次渲染的时候会走前4个生命周期函数，后续再激活组件的时候，前四个周期就不会再产生触发效果。</p></blockquote><h2 id="5、插槽"><a href="#5、插槽" class="headerlink" title="5、插槽"></a>5、插槽</h2><p>插槽也是组件传值的一种方式。</p><p>组件的最大特性就是<code>重用</code>，而用好插槽能大大提高组件的可重用能力。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/ccc81e4e187bb6ac614d3d69724cb4c5342fed73.jpeg?sign=b0c53aaaa69c1bdfe25e76e303c54362&t=5f5b5665" alt="小霸王"></p><p><strong>插槽的作用：</strong>父组件（卡）向子组件（游戏机）传递内容。【插槽应该在子组件上】</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/c5ddf742613c5886ff140e5d381f9ff76a803d8b.jpeg?sign=59bc2dccbbaf747f12c649b7c17d9415&t=5f3a3981" alt="父组件向子组件传递内容"></p><p>通俗的来讲，<strong>插槽无非就是在<code>子组件</code>中挖个坑，坑里面放什么东西由<code>父组件</code>决定。</strong>（父-子）</p><p>插槽类型有：</p><ul><li>单个（匿名）插槽</li><li>具名插槽</li><li>作用域插槽</li></ul><h3 id="5-1、匿名插槽"><a href="#5-1、匿名插槽" class="headerlink" title="5.1、匿名插槽"></a>5.1、匿名插槽</h3><blockquote><p>匿名插槽一般就是使用单个插槽</p></blockquote><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插槽内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>Something bad happened.<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&quot;alert-box&quot;, &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;demo-alert-box&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：子组件的<code>slot</code>标签中允许书写内容，当父组件不往子组件传递内容时，<code>slot</code>中的内容才会被展示出来。</p></blockquote><h3 id="5-2、具名插槽"><a href="#5-2、具名插槽" class="headerlink" title="5.2、具名插槽"></a>5.2、具名插槽</h3><p><code>slot</code> 元素可以用一个特殊的特性 <code>name</code> 来进一步配置如何分发内容。多个插槽可以有不同的名字，具名插槽将匹配内容片段中有对应 <code>slot</code> 特性的元素。</p><p><strong><code>上中下</code>形式网页布局示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">app-layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">app-layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&quot;app-layout&quot;, &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>具名插槽存在的意义就是为了解决在单个页面中同时使用多个插槽。</p></blockquote><h3 id="5-3、作用域插槽"><a href="#5-3、作用域插槽" class="headerlink" title="5.3、作用域插槽"></a>5.3、作用域插槽</h3><p><strong>应用场景：</strong>父组件对子组件的内容进行加工处理</p><p>作用域插槽是一种<strong>特殊类型</strong>的插槽，<strong>作用域插槽会绑定了一套数据，父组件可以拿这些数据来用</strong>，于是，情况就变成了这样：样式父组件说了算，但父组件中内容可以显示子组件插槽绑定的数据。</p><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot-scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; props.text &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;slot text=&quot;我是子组件中的内容&quot;&gt;&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">`</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/06/360a1ba700307653250bf4d41a6ccda81e119f6f.png?sign=bee6f0444752dacfeecebb024b5997cd&t=60daa5b0"></p><h1 id="七、工程化"><a href="#七、工程化" class="headerlink" title="七、工程化"></a>七、工程化</h1><p>vue command line tool，简单的来讲，就是一个基于命令行的vue开发工具。</p><p><strong>Vue-CLI ≠ Vue</strong>，Vue-CLI就是一个Vue工具。</p><p>vue脚手架工具</p><h2 id="1、单文件组件"><a href="#1、单文件组件" class="headerlink" title="1、单文件组件"></a>1、单文件组件</h2><p>在很多 Vue 项目中，我们使用 Vue.component 来定义全局组件，紧接着用 new Vue({ el: ‘#container ‘}) 在每个页面内指定一个容器元素。这种方式在很多中小规模的项目中运作的很好，在这些项目里 JS 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由JS驱动的时候，下面这些缺点将变得非常明显：</p><ul><li>所有的组件都放同一个html文件中</li><li>没有构建步骤(build操作)，不能使用npm来管理项目</li><li>缺乏语法高亮和提示</li><li>没有针对单个组件的css样式支持</li></ul><p>针对于上述的问题，vue框架发布了<code>vue-cli</code>项目<code>生成</code>工具，Vue-cli是一个基于 Vue.js 进行快速开发的完整系统， 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/06/49ef84aa819fb546d90fbc68bdf652d5ef883ab3.png?sign=700ff63c1d28e5bf1b0fdd612a30ac6d&t=60daccd0" alt="单文件组件"></p><p>单文件组件的要求：</p><ul><li>后缀必须是“.vue”</li><li>需要使用三个标签将整个文件分成3部分<ul><li>template标签：包裹的是html部分（视图部分）【必须要有的】</li><li>script标签：包裹的是JavaScript部分（逻辑部分）【必须要有的】<ul><li>css-in-js：在JavaScript中写样式</li></ul></li><li>style标签：包裹的css/scss/less等样式部分（样式部分）【可以没有】<ul><li>样式存在范围的问题的<ul><li>有“scoped”属性则表示该组件的样式代码只在当前组件生效</li><li>如果没有“scoped”属性则表示该组件的样式会影响自己及后代，一般在工程化开发的模式中，只有根组件“App.vue”不写“scoped”属性（全局样式）</li></ul></li></ul></li></ul></li><li>其他的语法与之前的一致</li><li>单文件组件只是工程化中的一个文件，无法单独运行，必须在项目中运行</li></ul><h2 id="2、工具安装"><a href="#2、工具安装" class="headerlink" title="2、工具安装"></a>2、工具安装</h2><p>网址：<a href="http://npmjs.com/">http://npmjs.com</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -g：全局安装</span></span><br><span class="line">npm i -g @vue/cli</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装成功后，检查</span></span></span><br><span class="line">vue --version</span><br><span class="line">vue -V</span><br><span class="line"><span class="meta">#</span><span class="bash">  Vue和VueCLI是两回事</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 卸载（了解）</span></span></span><br><span class="line">npm uninstall -g @vue/cli</span><br></pre></td></tr></table></figure><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/0a637b8f10a340665538af6f079480dabf686f21.png?sign=d4b0bcdfcda0c91a18b1212f24892c5d&t=5f63af2f" alt="版本检查"></p><blockquote><p>如果需要安装其他版本，可以使用<code>npm install -g @vue/cli@版本号</code>的方式进行指定版本。</p></blockquote><p>如果最新版安装不成功，可以尝试以下几种方式去解决：</p><ul><li>断网，使用热点共享流量去执行安装命令</li><li>安装其他版本</li><li>切换一下npm镜像源，切换成taobao</li><li>卸载nodejs重安装</li><li>重装系统/换电脑</li></ul><h2 id="3、创建项目"><a href="#3、创建项目" class="headerlink" title="3、创建项目"></a>3、创建项目</h2><p>脚手架创建初始项目的方式有2种：</p><ul><li><p>通过UI界面方式去创建（了解）</p><ul><li><p>在命令行中输入以下命令启动UI界面：</p></li><li><p>~~~shell<br>vue ui</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 通过命令行的方式切创建（推荐）</span><br><span class="line"></span><br><span class="line">  - 执行命令：</span><br><span class="line"></span><br><span class="line">  - ~~~shell</span><br><span class="line">    vue create 项目名</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先需要进入到对应的目录中(英文目录不要有空格及中文),执行如下命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果当前你的终端工作路径带有中文或者空格，你可以使用`<span class="built_in">cd</span> 路径`形式进行路径切换，切换到符合要求的路径中</span></span><br><span class="line">vue create 项目名称(创建时会自己以对应的项目名称生成目录)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 例</span></span></span><br><span class="line">vue create myproject</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上述命令中，可以允许变的就是`myproject`部分</span></span><br></pre></td></tr></table></figure><p><strong>以下步骤以<code>Vue CLI v4.5.6</code>为例，仅供参考，在实际使用时，请以自身需求为准进行配置</strong></p><ul><li>预设选择</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/3306e33dc3e5d81070a8dc78b02d897565e97ad7.png?sign=c5f7873bfe1db941667c2c8f4c1660bf&t=5f6725b8" alt="预设选择"></p><ul><li>选择预设功能（<strong>根据自身项目需要选择</strong>）</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/983429d74ae8a2b0bcbe6989c9ba9222a7ef6c2a.png?sign=cc4159e20f273686b40ac1c0caac9d05&t=5f672644" alt="预设功能选择"></p><ul><li>选择Vue版本</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/675e2b02b44d13452ad50edff22290e7940cd982.png?sign=59a0c6ddfea13fde357d1f384296978e&t=5f67266e" alt="vue版本选择"></p><ul><li>选择<code>ESlint</code>配置（如果启用）</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/82a888c3ce2ab58c6f0af95423d671b7def7c823.png?sign=1f6540c77f791528813ac36e2de731c3&t=5f6726bb" alt="eslint"></p><ul><li>选择额外的<code>eslint</code>功能</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/43ca4b950cee6c4b437521ce5eda7d7435c2488a.png?sign=fe94111f1dd389c051af27ede9dd231f&t=5f67278e" alt="额外lint选配"></p><ul><li>是否独立配置</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/c73968823c3540002ba7365381f9a2d075c15ac4.png?sign=2baba46888f7a176c6d27f3441522b1a&t=5f6727b1" alt="是否独立配置"></p><ul><li>是否保存本次操作预设</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/4f8734a2d5581a1616b4ebfe1117b6b2fa322618.png?sign=beda5914c014f84d5a02b61f89c49ca8&t=5f6727eb" alt="保存预设"></p><ul><li>项目创建成功</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/74b3f1f5a30596606c16b93fc24ab018e6e98487.png?sign=531f60f30c89e95c6718fad45ee248d0&t=5f6728ae" alt="创建成功"></p><h2 id="4、目录结构介绍"><a href="#4、目录结构介绍" class="headerlink" title="4、目录结构介绍"></a>4、目录结构介绍</h2><ul><li><p>public：不需要去改动现有的文件，里面存放的是浏览器访问的入口文件（index.html）</p></li><li><p>src（<strong>后期很多操作都在这个目录中完成</strong>）</p><ul><li>main.js：项目/程序入口文件 （该文件中JavaScript代码都会被执行）</li><li>App.vue：根组件（万物之根）</li><li>components：存放自定义的<code>功能</code>组件（涉及到业务逻辑）</li><li>assets：静态资源目录（图片、视频、音频等就是静态资源），这里面的静态资源浏览器是无法直接访问的，而是给组件通过模块化的方式导入进组件使用的。<ul><li>项目中的静态资源有2个地方可以放<ul><li>public：供在public/index.html中直接引入（link标签、script标签）的</li><li>src/assets：供单文件组件导入时需要的静态资源文件（import …）</li></ul></li></ul></li><li><strong>views：（当前是没有的，但是后期要用）存放<code>视图</code>组件的</strong>（只是涉及到页面的布局排版）</li></ul></li></ul><p>如何很好的划分功能组件与视图组件呢？</p><p>小技巧：可以被复用的就算它功能组件，不能被复用的就算它是视图组件。</p><p>补充：（readme.md文件中的内容）后续入职的时候项目给到的代码可能不不包含node_modules目录，需要自己执行<code>npm i</code>，随后项目才完整。</p><h2 id="5、项目的运行及注意事项"><a href="#5、项目的运行及注意事项" class="headerlink" title="5、项目的运行及注意事项"></a>5、项目的运行及注意事项</h2><h3 id="5-1、项目的启停"><a href="#5-1、项目的启停" class="headerlink" title="5.1、项目的启停"></a>5.1、项目的启停</h3><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/74b3f1f5a30596606c16b93fc24ab018e6e98487.png?sign=531f60f30c89e95c6718fad45ee248d0&t=5f6728ae" alt="创建成功"></p><p>如上图所示，在创建项目完成后有提示我们后续的操作：</p><ul><li>在命令行中进入项目目录</li><li>运行<code>npm run serve</code>命令来启动项目</li></ul><p>按照上述命令执行后，我们会见到如下的效果，即表示项目运行成功：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/1335f9133e19d0a1d6b2f629bc8b7bde9a0868d8.png?sign=5b56d2e029b8969783fd1c82dc299261&t=5f683757" alt="项目启动成功"></p><blockquote><p> 注意：默认端口号会从8080开始，如果再次启动其他项目后续会以8081、8082……进行监听。</p></blockquote><p>如果需要停止正在运行的项目，可以选择以下两种方式任一：</p><ul><li>关闭终端</li><li>在终端中按下组合键<code>Ctrl + C</code>（Cancel），随后选择<code>Y</code>并键入<code>回车</code>（如下图）</li><li>也可以按下两次<code>Ctrl + C</code></li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/987aba14adc55be552add382c8c565d82dbf5b90.png?sign=ffaad83e946c9b1205a489388dc64adc&t=5f68396c" alt="关闭项目运行"></p><blockquote><p>部分同学的机器在启动vue项目的时候可能会出现卡在“40%”的进度并且长时间不动，如果这样，则直接<code>Ctrl + C</code>停止本次启动，重新再去尝试启动。</p></blockquote><p>==关于项目运行时，如果修改了项目代码是否需要重启的说明：==</p><p>是否需要重启取决于我们修改了什么内容，如果只是修改了代码部分（js、css、vue文件等）是不需要开发者手动重启项目的，系统会自动重新编译（有点nodemon感觉）；但是如果修改的是配置文件，则必须需要自己先去停止项目，然后再去启动项目（手动实现重启）。</p><h3 id="5-2、关于ESlint"><a href="#5-2、关于ESlint" class="headerlink" title="5.2、关于ESlint"></a>5.2、关于ESlint</h3><p>ESlint用于规范项目的编码，大型项目一般多人开发，为了避免一些个人编程恶习<code>坑自己坑别人</code>，项目中使用了ESlint会起到<code>紧箍咒</code>的作用，强制开发人员注意代码规范。例如，在不使用ESlint的情况下，JS允许我们声明一个不变量但不使用。如果使用了ESlint，在上述情况下会报错如下：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/b83ccf704842a3a495c99aba44baa772ede48a7b.png?sign=787cecc32474ee8d85b6b6a6ffd1116c&t=5f6838c1" alt="eslint报错演示"></p><p>关于ESlint的报错，有一份错误参照，可以访问以下地址查看：<a href="https://cn.eslint.org/docs/rules/">https://cn.eslint.org/docs/rules/</a></p><p>在前期学习阶段不建议去使用ESlint，所以待会会重新创建一个不带有<code>eslint</code>的项目来学习路由的使用。但是，以后企业中开发项目的时候都会启用eslint。</p><h1 id="八、路由"><a href="#八、路由" class="headerlink" title="八、路由"></a>八、路由</h1><h2 id="1、路由的概念（了解）"><a href="#1、路由的概念（了解）" class="headerlink" title="1、路由的概念（了解）"></a>1、路由的概念（了解）</h2><p>路由的本质就是一种<code>对应关系</code>（此处的路由含义同之前nodejs的路由），根据不同的URL请求，返回对应不同的资源。那么url地址和真实的资源之间就有一种对应的关系，就是路由。</p><p>路由分为：<code>后端路由</code>和<code>前端路由</code></p><ul><li>后端路由：由服务器端进行实现并实现资源映射分发（nodejs、jsp、php等）<ul><li>概念：根据不同的用户URL请求，返回不同的内容（<strong>地址与资源</strong>产生对应关系）</li><li>本质：URL请求地址与服务器资源之间的对应关系（映射）</li></ul></li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/a832ee01e808edae5e035257d6d9b65411ca0142.jpeg?sign=2a588882a568365ae19f525571bce452&t=5f3e3ebf" alt="后端路由"></p><ul><li>前端路由：根据不同的<strong>事件</strong>来显示不同的页面内容，是事件与事件处理函数之间的对应关系<ul><li>概念：根据不同的用户事件，显示不同的页面内容（<strong>地址与事件</strong>产生对应关系）</li><li>本质：用户事件与事件处理函数之间的对应关系</li></ul></li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/2bddc42178c6449942b3dfe53187a890a20f4c9f.png?sign=c895f41a55db1f871fee8c98db306c8e&t=5f3e41f2" alt="前端路由"></p><p>记住一句话：有请求就应该有响应，只不过区别在于，之前node是响应资源，现在在前端中通过事件来进行响应。</p><h2 id="2、前端路由实现（了解）"><a href="#2、前端路由实现（了解）" class="headerlink" title="2、前端路由实现（了解）"></a>2、前端路由实现（了解）</h2><blockquote><p>面试题：请你说出前端路由是怎么实现的？或者有哪几种实现方式？</p><p>答：前端路由模式有两种实现方式：hash方式、history方式。</p></blockquote><p>核心思想：通过<strong>监听</strong>地址栏的变化<strong>事件</strong>来实现资源的动态显示</p><p>前端路由有2种模式：</p><ul><li>hash模式</li></ul><blockquote><p> hash路由模式是这样的：<a href="http://xxx.abc.com/#/xx%E3%80%82">http://xxx.abc.com/#/xx。</a> 有带#号，后面就是hash值的变化。改变后面的hash值，它不会向服务器发出请求，因此也就不会刷新页面。并且每次hash值发生改变的时候，会触发hashchange事件。因此我们可以通过监听该事件，来知道hash值发生了哪些变化。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 通过 location.hash 获取到最新的 hash 值</span></span><br><span class="line">  <span class="built_in">console</span>.log(location.hash);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>history模式</li></ul><blockquote><p>形如：<a href="http://xxx.abc.com/xx/yy/zz%E3%80%82HTML5%E7%9A%84History">http://xxx.abc.com/xx/yy/zz。HTML5的History</a> API为浏览器的全局history对象增加了该扩展方法。它是一个浏览器（bom）的一个接口，在window对象中提供了onpopstate事件来监听历史栈的改变，只要历史栈有信息发生改变的话，就会触发该事件。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.pushState(&#123;&#125;,title,url); <span class="comment">// 向历史记录中追加一条记录</span></span><br><span class="line">history.replaceState(&#123;&#125;,title,url); <span class="comment">// 替换当前页在历史记录中的信息。</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;popstate&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(event)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注：浏览器地址没有#， 比如(<a href="http://localhost:3001/a">http://localhost:3001/a</a>); 它也一样不会刷新页面的。但是url地址会改变。<strong>但它在服务器没有配置的情况下，不能手动刷新，否则返回404页面</strong></p></blockquote><p><strong>hash</strong>路由体验</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/a&quot;</span>&gt;</span>去a页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/b&quot;</span>&gt;</span>去b页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/c&quot;</span>&gt;</span>去c页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/d&quot;</span>&gt;</span>去d页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;route-view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取元内容素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ctn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;route-view&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 默认渲染</span></span></span><br><span class="line"><span class="javascript">    render(<span class="string">&#x27;/a&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听hashchange事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        render(location.hash.slice(<span class="number">1</span>))</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 分支</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">router</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span> (router) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;/a&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                ctn.innerHTML = <span class="string">&#x27;这是a页面&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;/b&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                ctn.innerHTML = <span class="string">&#x27;这是b页面&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;/c&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                ctn.innerHTML = <span class="string">&#x27;这是c页面&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;/d&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                ctn.innerHTML = <span class="string">&#x27;这是d页面&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">                ctn.innerHTML = <span class="string">&#x27;404页面&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、Vue-Router（重点）"><a href="#3、Vue-Router（重点）" class="headerlink" title="3、Vue Router（重点）"></a>3、Vue Router（重点）</h2><p>网址：<a href="https://router.vuejs.org/zh/%EF%BC%8Cvuerouter%E6%98%AFvue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8B%E4%B8%80%E3%80%82">https://router.vuejs.org/zh/，vuerouter是vue全家桶之一。</a></p><p><strong>此处建议创建一个不带<code>ESlint</code>、Router的vue项目。</strong></p><h3 id="3-1、介绍"><a href="#3-1、介绍" class="headerlink" title="3.1、介绍"></a>3.1、介绍</h3><p><strong>Vue Router 是 Vue.js 官方的路由管理器</strong>。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p><ul><li><p>嵌套的路由（套娃，父子路由）</p></li><li><p><strong>模块化</strong>的、基于组件的路由配置</p></li><li><p>路由参数、查询、通配符</p></li><li><p>带有自动激活（默认选中效果）的 CSS class 的链接</p></li><li><p>HTML5 历史模式或 hash 模式</p></li></ul><h3 id="3-2、安装"><a href="#3-2、安装" class="headerlink" title="3.2、安装"></a>3.2、安装</h3><p>如果在vue-cli创建项目时没有勾选上<code>vue-router</code>选项，此时就需要手动的来安装它（<strong>切记，要进入项目中再去运行这个指令</strong>）：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -S vue-router</span><br></pre></td></tr></table></figure><p>查看是否安装成功，查看此文件<code>/package.json</code></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/da67726d850713a81b814a877c862431a1740a5c.png?sign=f20b3897f66ca81281c00986e18faee3&t=5f67297b" alt="vue-router安装成功检查"></p><h3 id="3-3、Vue-Router基本使用"><a href="#3-3、Vue-Router基本使用" class="headerlink" title="3.3、Vue Router基本使用"></a>3.3、Vue Router基本使用</h3><p>Vue Router的基本使用步骤：</p><ul><li>在src/创建路由文件的归档目录“router”</li><li>引入相关库文件</li><li>VueRouter引入到Vue类中</li><li><strong>定义路由组件规则</strong></li><li>创建路由实例</li><li>把路由挂载到Vue根实例中</li><li><strong>添加路由组件渲染容器（router-view，组件）到对应组件中（占坑）</strong><ul><li>情况1：放在根组件中</li><li>情况2：放在嵌套路由中的父组件中</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入相关库文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// VueRouter引入到Vue类中</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件的引入</span></span><br><span class="line"><span class="keyword">import</span> Foo <span class="keyword">from</span> <span class="string">&#x27;./views/Foo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Bar <span class="keyword">from</span> <span class="string">&#x27;./views/Bar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由规则</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/bar&#x27;</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">  <span class="comment">// routes: anyname</span></span><br><span class="line">  <span class="comment">// 传递规则的时候，传递的规则的属性名必须是`routes`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露router让外界使用（默认导出，一个模块只能默认导出1次）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"><span class="comment">// =====================================</span></span><br><span class="line"><span class="comment">// 挂载根实例（main.js）</span></span><br><span class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></span><br><span class="line"><span class="comment">// 从而让整个应用都有路由功能</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;!-- html，添加路由组件渲染容器 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li>后期在项目中以<code>index</code>命名的文件在引入时，可以省去文件名不写。</li><li>在<code>import</code>的时候如果涉及到了路径，建议写<code>@</code>符号开头的路径（<code>@表示src目录</code>，这个操作是打包工具已经帮我们定义好了，vue-cli的功劳，后续webpack再去说明）</li><li>名称的规范：<ul><li>在<code>创建路由实例</code>的时候要去其属性名必须是<code>routes</code></li><li>在<code>挂载路由实例到根实例</code>的时候要求属性名必须是<code>router</code></li><li>请注意大小写</li></ul></li></ul></blockquote><p><strong>示例代码：</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/00810b3416ddd643264759afc7ad02b9d6833a82.png?sign=60800f7e2d3ebbcba55de10b29593aea&t=5f6871ac" alt="routes/index.js"></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/d98d49a6c9f0358740b11c9b542b37ab51b44897.png?sign=2cf1003937bef9dc2ed1f55e790d3a28&t=5f6871e0" alt="main.js"></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/1d97fb78f01c15d2cdaca96b6d110431802e46e8.png?sign=eb5a33ccb1361cb1f2cfcdd8d38b4a83&t=5f68720e" alt="app.vue"></p><p><strong>src/views/Hello.vue代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;这是hello页面&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>src/views/News.vue代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;这是新闻页面&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>实现效果：</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/2fd0e496a9ce93a7398722534ca24f93abf8cdd0.gif" alt="实现效果"></p><h3 id="3-4、路由模式切换"><a href="#3-4、路由模式切换" class="headerlink" title="3.4、路由模式切换"></a>3.4、路由模式切换</h3><p>vue-router中默认使用的是hash模式的路由，也就是前面介绍的地址栏中URL带有“#”的形式，如果需要切换成history模式，则可以在创建路由实例时进行指定，指定的配置项为<code>mode</code>，可选值：</p><ul><li>hash：<strong>默认</strong>，设置路由模式为hash路由</li><li>history：设置路由模式为history路由</li></ul><p>例如，如果我们想设置路由模式从<code>hash</code>改变为<code>history</code>则可以配置路由入口文件为：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/12/c735b5283efb3e76d43cf89b4b89c65dcba785c4.png?sign=6830b10dd2e39b531168ecd273d135cb&t=5fd8d66d"></p><h3 id="3-5、导航方式"><a href="#3-5、导航方式" class="headerlink" title="3.5、导航方式"></a>3.5、导航方式</h3><p>含义：从一个组件/地址去往另一个组件/地址的方式。</p><p>在页面中，导航实现有2种方式：</p><ul><li>声明式导航：通过点击链接实现的导航方式，例如HTML中的“<a>”标签，Vue中的“<router-link>”所实现的。（其性质与a标签的性质类似）</li><li>编程式导航：通过调用JavaScript形式API实现的导航方式，例如location.href实现的跳转效果</li></ul><h4 id="3-5-1、声明式导航"><a href="#3-5-1、声明式导航" class="headerlink" title="3.5.1、声明式导航"></a>3.5.1、声明式导航</h4><p>它就是先在页面中定义好跳转的路由规则，vueRouter中通过router-link组件来完成</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;path&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;path&#x27;&#125;&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;path&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;p&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">to 要跳转到的路由规则  string|object</span></span><br><span class="line"><span class="comment">to=&quot;users&quot;</span></span><br><span class="line"><span class="comment">:to=&quot;&#123;path:&#x27;path&#x27;&#125;&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">tag=&quot;tagName&quot;去指定声明式导航产生的链接所使用的标签，默认是a标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-2、编程式导航"><a href="#3-5-2、编程式导航" class="headerlink" title="3.5.2、编程式导航"></a>3.5.2、编程式导航</h4><p>简单来说，编程式导航就是通过<code>JavaScript</code>来实现路由跳转</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span> &#125;);</span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">username</span>:<span class="string">&quot;jack&quot;</span>&#125; &#125;);</span><br><span class="line"><span class="comment">// 不要将path属性与params属性一起使用，这样会导致params路由参数获取不到</span></span><br><span class="line"><span class="comment">// name属性可以与params属性传参一起使用</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123; <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span> , <span class="attr">params</span>: &#123;<span class="attr">id</span>:<span class="number">123</span>&#125; &#125;);</span><br><span class="line"><span class="built_in">this</span>.$router.go( n );<span class="comment">//n为数字  负数为回退</span></span><br><span class="line"><span class="built_in">this</span>.$router.back(); <span class="comment">// 返回上一页</span></span><br></pre></td></tr></table></figure><p><strong>注意点：</strong>编程式导航在跳转到与当前地址一致的URL时会报错，但这个报错不影响功能：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/ffae8bf7ff5e46907768198ed81ce996be3ee11f.png?sign=fdd95d31c85eedc806e8e5b0817fc555&t=5f68a439" alt="重复导航错误"></p><p>如果患有强迫症，可以在路由入口文件<code>index.js</code>中添加如下代码解决该问题：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该段代码不需要记，理解即可</span></span><br><span class="line"><span class="keyword">const</span> originalPush = VueRouter.prototype.push;</span><br><span class="line">VueRouter.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> originalPush.call(<span class="built_in">this</span>, location).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> err);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>面试题问题：<code>this.$router</code>与<code>this.$route</code>有什么区别？</strong></p><p>答：<code>$router</code>是用于做编程式导航的（改变路由的）；<code>$route</code>是用户获取路由信息的。</p><h3 id="3-6、路由重定向"><a href="#3-6、路由重定向" class="headerlink" title="3.6、路由重定向"></a>3.6、路由重定向</h3><ul><li>概念：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面</li><li>实现： 通过路由规则的<code>redirect</code>属性，指定一个新的路由地址，可以很方便地设置路由的重定向</li></ul><p><strong>代码示例</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// routes是路由规则数组</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 每个路由规则都是个配置对象，至少有path和component两个属性（重定向除外）</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// path表示当前路由规则匹配的hash地址</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// component表示当前路由规则对应要展示的组件</span></span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: User &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">component</span>: Register &#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>component属性是可选属性，因此在写的时候需要注意，写错了也不会报错的。</p></blockquote><h3 id="3-7、嵌套路由（重点）"><a href="#3-7、嵌套路由（重点）" class="headerlink" title="3.7、嵌套路由（重点）"></a>3.7、嵌套路由（重点）</h3><p>路由前缀： <strong>/admin/user</strong>/add    <strong>/admin/user</strong>/del   <strong>/admin/user</strong>/mod</p><p>相同部分可以<strong>提取</strong>出来，减少重复劳动。</p><p>————————————以上为nodejs中的概念————————————————</p><p>上述概念在vue中被称之为叫做嵌套路由。</p><p>套娃，可以按照之前的nodejs处的路由前缀去理解。（当有些路由有公共部分的前缀时，在vue中就可以使用嵌套路由）</p><p>嵌套路由最关键在于理解子级路由的概念：</p><p>比如我们有一个<code>/users</code>的路由，那么<code>/users</code>下面还可以添加子级路由，如:<code>/users/index</code>、<code>/users/add</code>等等，这样的路由情形称之为嵌套路由。</p><blockquote><p> 核心思想：在<strong>父路由组件</strong>的模板内容中添加子路由链接和子路由<strong>填充位（占坑）</strong>，同时在路由规则处为父路由配置<strong>children属性</strong>指定子路由规则：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: User, <span class="comment">//这个不能丢</span></span><br><span class="line">      <span class="comment">// 通过children属性为/user添加子路由规则</span></span><br><span class="line">      <span class="attr">children</span>:[</span><br><span class="line">          <span class="comment">// 子路由地址前不能写“/”，如果写了则表示从根开始</span></span><br><span class="line">          &#123; <span class="attr">path</span>: <span class="string">&quot;index&quot;</span>, <span class="attr">component</span>: Index &#125;,</span><br><span class="line">          &#123; <span class="attr">path</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">component</span>: Add &#125;,</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要在 User组件中定义一个router-view 用于嵌套路由的渲染显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-8、404路由"><a href="#3-8、404路由" class="headerlink" title="3.8、404路由"></a>3.8、404路由</h3><p>作用：用于处理当路由匹配不上的时候页面的展示（不做404路由，则页面限时白板页面）</p><p>由于Vue路由是<strong>从上到下执行</strong>的，<strong>只要在路由配置规则中最后面放个*号（通配符）路由就可以了</strong>，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/hello&quot;</span>, <span class="attr">redirect</span>: Hello &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">component</span>: About &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/news&quot;</span>, <span class="attr">component</span>: News &#125;,</span><br><span class="line">    <span class="comment">// 404路由</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>, <span class="attr">component</span>: NotFound &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>问题：正常情况下404找不到会有状态码，是404，请问，为什么我们现在看到的状态码是200？</p><p>答：目前是在做前端开发，不是后端开发，无法指定返回的状态码，等到vue项目上线后可以与后端服务器结合实现状态码的指定。</p><h3 id="3-9、动态路由匹配（重点）"><a href="#3-9、动态路由匹配（重点）" class="headerlink" title="3.9、动态路由匹配（重点）"></a>3.9、动态路由匹配（重点）</h3><blockquote><p>本节知识点就是为了restful服务的，看如果在vue中使用restful形式进行<strong>参数传递</strong>。</p></blockquote><p>所谓动态路由就是路由规则中有部分规则是动态变化的，不是固定的值，需要去匹配取出数据（即<code>路由参数</code>）。</p><ul><li>如何传递<ul><li>在声明路由的时候，将可变部分通过“<code>:变量名</code>”的形式进行替代</li></ul></li><li>如何获取<ul><li>获取this.$route来获取</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传递参数id</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// routes是路由规则数组</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: User &#125;,</span><br><span class="line">        <span class="comment">// 此处的“:”只是在声明的时候写，在使用的时候不需要写“:”</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件视图中获取id值（html-vue形式组件）</span></span><br><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User ID is &#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 单文件形式的组件, 可以在视图中直接接收路由参数，但是一般不这么用 --&gt;</span><br><span class="line">        这是news组件&#123;&#123;$route.params.id&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>路由规则中的“:”只是在声明的时候写，在使用的时候不需要写“:”，例如如下代码：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/25307732297b5b553fed47d882adcf6f1c48dd0f.png?sign=044378c5358328bb077579da2ac5276e&t=5f69759e" alt="编程式导航"></p><p>问题：如上代码，如果路由规则里声明需要传递参数，但是实际使用的时候没传递参数会怎么样？</p><p>答：如果声明需要传递参数，但是实际不传的话则会影响落地页的显示，显示成白板（但是不报错）。但是如果有404路由在规则的最后，则匹配404路由。</p><p><strong>注意：在实际开发的时候会有可能需要传参也可能不需要传参的情况，这个时候需要用到<code>可选路由参数</code>点。</strong></p><p>定义可选路由参数的方式很简单，只需要在原有的路由参数声明位置后面加上个<code>?</code>即可。例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&quot;showdetail/:id?&quot;</span>, <span class="attr">component</span>: ShowDetail &#125;,</span><br></pre></td></tr></table></figure><h3 id="3-10、命名路由（可选）"><a href="#3-10、命名路由（可选）" class="headerlink" title="3.10、命名路由（可选）"></a>3.10、命名路由（可选）</h3><p>命名路由：路由别名，顾名思义就是给路由起名字（外号）。</p><p>例如：阿列克赛·马克西莫维奇·彼什科夫                    （高尔基）</p><p>通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: User</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明路由 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123; id: 123 &#125;&#125;&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问：一般什么使用用命名路由？</p><p>答：当路由本身的path写法比较长的时候，建议写命名的方式。而且需要注意，如果使用的是path写法，则当path发生变化后，其对应的导航地址也需要跟着变化。但是如果使用了别名则不用理会path内容的变化（只要名子不变就没事）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/07/26/Vue%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/26/Vue%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Vue基础"><a href="#一、Vue基础" class="headerlink" title="一、Vue基础"></a>一、Vue基础</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>作者：尤雨溪</p><p>官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org</a></p><p>Vue.js是一套构建用户界面的<strong>渐进式</strong>框架。<strong>声明式渲染和组件系统是Vue的核心库所包含内容。</strong></p><ul><li>渐进式：循序渐进，不需要掌握全部的点，学多少用多少</li><li>框架：半成品的应用（之前学习的jQuery也是一个框架）</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/4f9e45db623e2c0f0dd1a45e985c36b83825ce6c.png?sign=cead88c04c73c6d314f093b1ef504d42&t=5f50707e" alt="Vue特点"></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/229fe902962263af21443024e14a78b54ea5c3d1.png?sign=976600758fc879cea5db0a54774e1bda&t=5f5070ea" alt="Vue与react在github上"></p><ul><li><strong>声明</strong>式渲染：（如同js基础一样，要使用变量则必须先声明变量，这种称之为声明式）</li></ul><p>Vue.js的核心是一个允许采用简洁的模板语法来声明式的将数据渲染进DOM的系统。</p><ul><li><strong>组件化</strong>应用构建</li></ul><p>组件系统是Vue的另一个重要概念，因为它是一种抽象的允许我们使用<strong>小型、独立</strong>和通常<strong>可复用</strong>的“小积木”构建大型应用。几乎任意类型的应用界面都可以抽象为一个组件树。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/279e26e948d53d33a2a05e10e7c29aa736fe80a1.png?sign=9f63925b42a763bb945ad25cda41928f&t=5f5073bf" alt="组件"></p><h2 id="2、Vue的开发模式"><a href="#2、Vue的开发模式" class="headerlink" title="2、Vue的开发模式"></a>2、Vue的开发模式</h2><ul><li>M-V-VM<ul><li>M：（model）普通的javascript数据对象（其实就是一个对象，对象里放了数据）</li><li>V：（view）前端展示页面（可以理解成html内容）</li><li>VM：（ViewModel）用于<strong>双向绑定数据</strong>与页面，对于我们的课程来说，就是vue的实例</li></ul></li></ul><p>MVVM 模式将 Presenter 改名为 ViewModel，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。<strong>这种模式下，页面输入改变数据，数据改变影响页面数据展示与渲染</strong></p><blockquote><p>vue使用MVVM响应式编程模型，避免直接操作（真实）DOM , 降低DOM操作的复杂性。（虚拟DOM）</p></blockquote><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/daf286bb718f7afb09ddea7205c58a18d56797f5.png?sign=9597d9d44c7ac8ace46d8ab7c0500407&t=5f560d40" alt="MVVM"></p><h1 id="二、Vue入门"><a href="#二、Vue入门" class="headerlink" title="二、Vue入门"></a>二、Vue入门</h1><h2 id="1、初识Vue"><a href="#1、初识Vue" class="headerlink" title="1、初识Vue"></a>1、初识Vue</h2><blockquote><p>vuejs文件分为“.min.js”与“.js”文件，区别在于其中带“.min”这个是生产版本（压缩版），不带“.min”的是测试版本（测试时用的，不压缩的）：</p><ul><li>生产版本<ul><li>代码压缩（代码不具备可读性）</li><li>不支持vue调试工具</li></ul></li><li>开发版本（vue.js）<ul><li>代码不压缩（代码具备可读性）</li><li><strong>支持vue的调试工具</strong></li></ul></li></ul></blockquote><p>以输出“Hello World”为例，使用Vue.js实现输出“Hello World”案例：</p><blockquote><p><strong>步骤</strong>（仅限在vue的非工程化的环境下）</p><ul><li><p>在视图部分定义渲染的容器，正常情况下内容相对固定，一般是：</p><ul><li>~~~html<div id="app"></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 通过`script`标签引入下载好的`vue.js`文件</span><br><span class="line"></span><br><span class="line">- 产生vue实例（js部分，需要去new）</span><br><span class="line"></span><br><span class="line">  - 需要给实例传递配置选项（格式是一个对象）</span><br><span class="line">  - 如果可能，会用到一些数据，数据需要在对象中声明（声明式渲染）</span><br><span class="line"></span><br><span class="line">- 如果需要展示数据的话，则需要使用特定的表达式（插值表达式，形式`&#123;&#123;表达式&#125;&#125;`，在视图部分写，哪里需要值就在哪里写）</span><br><span class="line"></span><br><span class="line">代码片段如下：</span><br><span class="line"></span><br><span class="line">~~~html</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;!-- 1. 定义渲染的容器 --&gt;</span><br><span class="line">   &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       &#123;&#123;msg&#125;&#125;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           &lt;!-- 只要不出id=app这个容器的界限，不管多少深度，都没问题 --&gt;</span><br><span class="line">           &#123;&#123;msg&#125;&#125;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;!-- 2. 引入vue.js文件 --&gt;</span><br><span class="line">   &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       // 3. 产生vue实例（V是大写的），传递配置选项</span><br><span class="line">       new Vue(&#123;</span><br><span class="line">           // el =&gt; element，指定vue负责渲染的容器的选择器</span><br><span class="line">           el: &quot;#app&quot;,</span><br><span class="line">           // data指定vue实例需要的数据（数据的初始化）</span><br><span class="line">           data: &#123;</span><br><span class="line">               msg: &quot;hello world&quot;,</span><br><span class="line">           &#125;,</span><br><span class="line">       &#125;);</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><p>Vue实例细节分析：</p><ul><li><p>Vue参数对象属性</p><ul><li>el：元素挂载的位置，值可以是CSS选择器或DOM元素</li><li>data：模型数据，值是一个对象（仅限于当前）</li></ul></li><li><p>插值表达式<code>&#123;&#123;msg&#125;&#125;</code></p><ul><li>将数据填充到HTML标签中</li></ul></li></ul><p>上述提及的都是前端vue框架的模板语法，当然vue的模板不仅仅是上述这个2个，还有更多的，比如后面要学习的：</p><ul><li>指令</li><li>事件</li><li>流程控制</li><li>….</li></ul><h2 id="2、vue-devtools工具安装"><a href="#2、vue-devtools工具安装" class="headerlink" title="2、vue devtools工具安装"></a>2、vue devtools工具安装</h2><p>通过chrome中的谷歌插件商店安装    Vue Devtools工具，此工具帮助我们进行vue数据调试所用，一定要安装。Vue工具在谷歌商店的地址是：<a href="https://chrome.google.com/webstore?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore?utm_source=chrome-ntp-icon</a></p><blockquote><p>请注意：打开chrome应用商店，<strong>需要科学上网</strong>才能访问到，至于怎么科学上网请各位自行解决。</p></blockquote><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/dc840deb63c247fb5b7fac6f162f3fece10832ae.png?sign=180564fbbac92d11b6e89e4e9d8df208&t=5f561a39" alt="Vue工具谷歌商店"></p><p>安装好后打开Chrome的<code>开发者工具（F12或Ctrl+Shift+I）</code>即可使用：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/7ea8955be2b91f4c8530fdf7696fa2f5508b3a35.png?sign=2773c0e615128ca86b96c79bca31eaf4&t=5f561a6a" alt="谷歌浏览器使用Vue工具"></p><p><strong>补充：如果自己解决不了科学上网问题，但是又需要用Vue开发工具那该怎么办？</strong></p><blockquote><p>如果实在解决不了科学上网难题，Vue官方也提供了插件源码允许我们自己编译/构建Google Chrom插件，步骤如下（构建插件流程稍微麻烦一些&lt;**不要求掌握如何构建**&gt;，此处已为同学们构建好，可以直接使用）。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/6f094719844e04c1aa853b36c18b1e18c1ee6c2d.png?sign=55a5622a22b937b7b1b419ca67dafd6b&t=5f38fa24" alt="Vue调试工具"></p></blockquote><h2 id="3、Vue模板语法"><a href="#3、Vue模板语法" class="headerlink" title="3、Vue模板语法"></a>3、Vue模板语法</h2><h3 id="3-1、插值表达式"><a href="#3-1、插值表达式" class="headerlink" title="3.1、插值表达式"></a>3.1、插值表达式</h3><p><strong>插值表达式：</strong>是vue框架提供的一种在HTML模板中绑定数据的方式，使用<code>&#123;&#123;变量名&#125;&#125;</code>方式绑定Vue实例中data中的数据变量，会将绑定的数据实时的在视图中显示出来。</p><p>插值表达式的写法支持使用：</p><ul><li>变量名</li><li><strong>部分</strong>JavaScript表达式<ul><li>注：<code>&#123;&#123;  &#125;&#125;</code>括起来的区域，就是一个就是js语法区域，在里面可以写部份的js语法。不能写 var a = 10;分支语句;循环语句</li></ul></li><li>三元运算符</li><li>方法调用（方法必须需要先声明）</li><li>…</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 直接使用变量名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 运算 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123;name + &#x27;--好的&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123; 1 + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用函数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123;title.substr(0,6)&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 三目运算 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123; age &gt; 18 ? &#x27;成年&#x27; : &#x27;未成年&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">title</span>: <span class="string">&quot;我是一个标题，你们看到没有&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2、指令"><a href="#3-2、指令" class="headerlink" title="3.2、指令"></a>3.2、指令</h3><p><strong>问1：什么是指令？</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 指令的本质就是标签中的vue<strong>自定义属性</strong></li><li><input checked="" disabled="" type="checkbox"> 指令格式以“v-”开始，例如：v-cloak，v-text、v-html等</li></ul><p><strong>指令的含义：在vue的html中，以<code>v-</code>开头的自定义属性就是指令。</strong></p><p>详见官网对指令的说明：<a href="https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4">https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4</a></p><p><strong>问2：指令有什么作用？</strong></p><p>正如插值表达式的效果，插值表达式只能用于标签之间的数据输出；在标签属性上，插值表达式无用武之地，但是有需要在属性中使用可变数据的情况，此时指令就能帮助我们解决这个问题。</p><p>语法糖：复杂操作的简化形式</p><p>当表达式的值改变时，将其产生的连带影响，响应式地作用于页面（DOM）。（简化操作）</p><p><strong>小试牛刀</strong>：v-text指令与v-html指令【相当于innertHTML和innerText】</p><blockquote><p><strong>官网</strong></p><p>v-text：<a href="https://cn.vuejs.org/v2/api/#v-text">https://cn.vuejs.org/v2/api/#v-text</a></p><p>v-html：<a href="https://cn.vuejs.org/v2/api/#v-html">https://cn.vuejs.org/v2/api/#v-html</a></p></blockquote><p>友情提醒：v-html尽量少用甚至不用，因为可能引发XSS（跨站脚本攻击，XSS）攻击。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插值表达式形式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;str1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插值表达式此时与v-text是等效的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&#x27;str2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&#x27;str1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">str1</span>: <span class="string">&#x27;迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">str2</span>: <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="三、常用指令"><a href="#三、常用指令" class="headerlink" title="三、常用指令"></a>三、常用指令</h1><h2 id="1、v-cloak"><a href="#1、v-cloak" class="headerlink" title="1、v-cloak"></a>1、v-cloak</h2><p><strong>作用：</strong>解决浏览器在加载页面时因存在时间差而产生的<code>闪动</code>问题</p><p><strong>原理：</strong>先隐藏元素挂载位置，处理好渲染后再显示最终的结果</p><p><strong>注意：</strong>需要与CSS规则一起使用</p><p><strong>文档地址：</strong><a href="https://cn.vuejs.org/v2/api/#v-cloak">https://cn.vuejs.org/v2/api/#v-cloak</a></p><p><strong>示例：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div</span><br></pre></td></tr></table></figure><blockquote><p>如果后期有多个元素需要解决闪动问题，可以将<code>v-cloak</code>写在根元素上（id=”app”顶级的div上）。</p></blockquote><h2 id="2、数据绑定指令"><a href="#2、数据绑定指令" class="headerlink" title="2、数据绑定指令"></a>2、数据绑定指令</h2><ul><li>v-text    填充纯文本<ul><li>相比插值表达式更加简洁</li><li>不存在插值表达式的闪动问题</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 和下面的一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>:<span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com/&quot;&gt;百度一下&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-html     填充HTML片段<ul><li>存在安全问题</li><li>本网站内部数据可以使用，来自第三方的数据不可使用<ul><li>只有一个场景会使用：后台会用，比如有一个企业站，会发不企业的动态的新闻，这个时候会使用富文本编辑器，由于内容是自己人加的，所以可以放心使用。  自己攻击自己（自攻）</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">html</span>:<span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com/&quot;&gt;百度一下&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-pre    填充原始信息（对应的是以前html中的标签“<pre>”）【凑数】<ul><li>跳过表达式的编译过程（先编译，后渲染），显示原始信息 </li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>有些时候我们不想指令中的表达式进行运行，只需要给表达式加个引号</strong>。例如：</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&#x27;&quot;msg&quot;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;&#x27;msg&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>针对后续想让指令属性值不解析的操作都可以这么去做。</p><h2 id="3、v-once"><a href="#3、v-once" class="headerlink" title="3、v-once"></a>3、v-once</h2><p><strong>作用：</strong>只渲染<strong>元素或组件</strong>一次<strong>，之后元素或组件将失去</strong>响应式（数据层面）功能（对于数据的一锤子买卖）</p><blockquote><p><strong>Q &amp; A：</strong>如何理解响应式？</p><ul><li>布局响应式：布局会随着设备尺寸的大小变化而变化的布局方式</li><li><strong>数据响应式：双向数据绑定</strong></li></ul></blockquote><p><strong>示例：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态修改message值，此绑定将不会发生改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">message</span>: <span class="string">&#x27;你好世界&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、v-bind（重点）"><a href="#4、v-bind（重点）" class="headerlink" title="4、v-bind（重点）"></a>4、v-bind（重点）</h2><p><strong>作用：</strong>动态地绑定一个或多个<code>attribute</code>【实现可以允许我们在html内置的属性值中使用变量，主要是给非指令的属性去使用绑定动态可变的数据的】</p><p>场景：复用某个数据的时候会使用。例如：飞猪官网</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-bind：给非指令的属性使用变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">v-bind:target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>&#123;&#123;alt&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-bind的简写形式，实际使用这样的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">:target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>&#123;&#123;alt&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">:target</span>=<span class="string">&quot;type&quot;</span> <span class="attr">:alt</span>=<span class="string">&quot;alt&quot;</span>&gt;</span>&#123;&#123;alt&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>&#123;&#123;alt&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">&#x27;https://www.fliggy.com/&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>: <span class="string">&#x27;_blank&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">alt</span>: <span class="string">&#x27;飞猪官网&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、v-on（重点）"><a href="#5、v-on（重点）" class="headerlink" title="5、v-on（重点）"></a>5、v-on（重点）</h2><h3 id="5-1、基本使用"><a href="#5-1、基本使用" class="headerlink" title="5.1、基本使用"></a>5.1、基本使用</h3><p><strong>作用：</strong>绑定事件监听器（事件绑定）</p><p><strong>示例：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接执行操作 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 常规写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件处理函数调用：直接写函数名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事件处理函数调用：常规调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;sth&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果事件处理函数为自定义函数，则需要先进行定义，定义的方式如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">functionName</span>: <span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2,arg3,...</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// something to do</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：事件绑定<code>v-on</code>属性表达式中切记不能直接写业务逻辑，例如<code>@click=&quot;alert(&#39;123&#39;)&quot;</code>。换言之，就咋行内上是不允许使用内置函数的，必须要调用自己定义的函数，然后你可以在自定义的函数内使用内置函数。</p></blockquote><p><strong>事件处理函数传参</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件处理函数调用：直接写函数名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件处理函数调用：常规调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;hi&#x27;,$event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不传递自定义参数的时候，上述两种用法均可以使用；但是如果需要传递自定义参数的话，则需要使用第2种方式。</p><blockquote><p>事件对象的传递与接收注意点</p><ul><li>如果事件直接使用函数名并且不写小括号，那么<strong>默认</strong>会将事件对象作为唯一参数进行传递，可以在定义函数的位置直接定义一个形参，并且在函数内可以使用该形参</li><li>如果使用常规的自定义函数调用（只要写了小括号），那么如果需要使用<strong>事件对象则必须作为最后一个参数进行传递</strong>，且事件对象的名称必须是“$event”</li></ul></blockquote><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#big</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#mid</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#sma</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;big&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;大娃&#x27;,$event)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mid&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;二娃&#x27;,$event)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sma&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;三娃&#x27;,$event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">say</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name,event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;你点了&#x27;</span> + name);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2、事件修饰符"><a href="#5-2、事件修饰符" class="headerlink" title="5.2、事件修饰符"></a>5.2、事件修饰符</h3><p>含义：用来处理事件的特定行为（也是vue提供一些语法糖）</p><p>使用示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 停止冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  串联修饰符（连贯操作） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多事件修饰符请参考官方文档：<a href="https://cn.vuejs.org/v2/api/#v-on">https://cn.vuejs.org/v2/api/#v-on</a></p><p><strong>实例代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .dawa &#123;</span><br><span class="line">            background: red;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 400px;</span><br><span class="line">        &#125;</span><br><span class="line">        .erwa &#123;</span><br><span class="line">            background: orange;</span><br><span class="line">            height: 300px;</span><br><span class="line">            width: 300px;</span><br><span class="line">        &#125;</span><br><span class="line">        .sanwa &#123;</span><br><span class="line">            background: yellow;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- 套娃行为 --&gt;</span><br><span class="line">        &lt;div class=&quot;dawa&quot; @click=&quot;call_dawa&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;erwa&quot; @click.stop=&quot;call_erwa&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;sanwa&quot; @click.stop=&quot;call_sanwa&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                call_dawa()&#123;</span><br><span class="line">                    console.log(&#x27;大娃：收到&#x27;);</span><br><span class="line">                &#125;,</span><br><span class="line">                call_erwa()&#123;</span><br><span class="line">                    console.log(&#x27;二娃：收到&#x27;);</span><br><span class="line">                &#125;,</span><br><span class="line">                call_sanwa()&#123;</span><br><span class="line">                    console.log(&#x27;三娃：你说啥&#x27;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-3、按键修饰符"><a href="#5-3、按键修饰符" class="headerlink" title="5.3、按键修饰符"></a>5.3、按键修饰符</h3><p>按键修饰符：按键事件</p><blockquote><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符。</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 回车键的时候调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Delete` 回车键的时候调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.delete</span>=<span class="string">&quot;handle&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多按键修饰符请参考官方文档：<a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6</a></p><h2 id="6、循环分支指令"><a href="#6、循环分支指令" class="headerlink" title="6、循环分支指令"></a>6、循环分支指令</h2><h3 id="6-1、循环指令"><a href="#6-1、循环指令" class="headerlink" title="6.1、循环指令"></a>6.1、循环指令</h3><p><strong>作用：</strong>根据一组<strong>数组</strong>或对象的选项列表进行渲染。</p><p><strong>指令：</strong>v-for</p><ul><li>数组遍历使用示例：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直接取值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in fruits&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 带索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in fruits&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">......</span><br><span class="line">data: &#123;</span><br><span class="line">fruits: [&#x27;apple&#x27;,&#x27;pear&#x27;,&#x27;banana&#x27;,&#x27;orange&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><blockquote><p>细节：key的作用，提高性能，不影响显示效果（<code>如果没有id，可以考虑使用索引替代</code>），切记<code>key</code>的值不能重复，只要遵循不重复的原则即可，值是什么无所谓。</p><p>key的作用就是更新组件时判断两个节点是否相同。相同就复用，不相同就删除旧的创建新的。</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in fruits&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>对象遍历使用示例（了解）：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(value,name,index) in obj&#x27;</span>&gt;</span>&#123;&#123;value + &#x27;-&#x27; + name + &#x27;-&#x27; + index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">......</span><br><span class="line">data: &#123;</span><br><span class="line">obj: &#123;</span><br><span class="line">username: &#x27;zhangsan&#x27;,</span><br><span class="line">age: 28,</span><br><span class="line">gender: &#x27;male&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><strong>示例代码：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in cars&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,key,index) in user&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;：&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">cars</span>: [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;aodi&#x27;</span>,<span class="string">&#x27;benci&#x27;</span>,<span class="string">&#x27;haima&#x27;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">user</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">gender</span>: <span class="string">&#x27;mele&#x27;</span>,<span class="comment">//性别，sex</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">age</span>: <span class="number">22</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2、分支指令"><a href="#6-2、分支指令" class="headerlink" title="6.2、分支指令"></a>6.2、分支指令</h3><p><strong>作用：</strong>根据表达式的布尔值(true/false)进行判断是否<strong>渲染</strong>/显示该元素</p><ul><li>v-if</li><li>v-else</li><li>v-else-if</li></ul><blockquote><p>上述三个指令是分支中最常见的。根据需求，v-if可以单独使用，也可以配合v-else一起使用，也可以配合v-else-if和v-else一起使用。</p></blockquote><ul><li>v-show</li></ul><blockquote><p>v-show是根据表达式之真假值，切换元素的 <code>display</code> CSS属性（是根据表达式的布尔值来判断是否<strong>显示</strong>该元素）。</p></blockquote><p>使用示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;score &gt;= 90&quot;</span>&gt;</span></span><br><span class="line">  优秀</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 80 &amp;&amp; score &lt; 90&quot;</span>&gt;</span></span><br><span class="line">  良好</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 70 &amp;&amp; score &lt; 80&quot;</span>&gt;</span></span><br><span class="line">  一般</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  不及格</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-show --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&#x27;flag&#x27;</span>&gt;</span>测试v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">......</span><br><span class="line">data: &#123;</span><br><span class="line">score: 88,</span><br><span class="line">flag:false</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><blockquote><p>思考：v-if系列与v-show的区别是什么？</p><p>v-if：控制元素是否渲染</p><p>v-show：控制元素是否显示（<strong>已经渲染</strong>，display:none;）</p></blockquote><blockquote><p>v-if系列指令、v-show指令可以与v-for指令结合起来使用（循环+分支）。例如：</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(v,k,i) in obj&#x27;</span> <span class="attr">v-show</span>=<span class="string">&#x27;v==25&#x27;</span>&gt;</span>&#123;&#123;v&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>面试题：v-for与v-if谁的优先级高，能否一起使用？</strong></p><p>答：v-for优先级高于v-if，虽然可以一起使用但是不建议一起使用。因为v-for的优先级大于v-if，在循环元素时，每个元素都要进行v-if判断，但是最终显示的元素太少造成资源浪费，所以不建议一起使用。在需要v-for与v-if一起使用时可以用v-show代替v-if。</p><h2 id="7、综合案例：简易购物车"><a href="#7、综合案例：简易购物车" class="headerlink" title="7、综合案例：简易购物车"></a>7、综合案例：简易购物车</h2><p><strong>案例效果</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/306aab7bc3f508529eacd7e352283a5670a36873.gif?sign=c1f7cd1b184d05b5a750c70759eb9a0a&t=5f5748db" alt="简易购物车案例效果"></p><blockquote><p>细节：</p><ul><li>展示基本的商品信息</li><li>计算每个商品的小计</li><li>商品数量的加、减操作<ul><li>+：增加商品数量，同时更新小计</li><li>-：减少商品熟练，同时更新小计，如果本身为“1”，再点-号则需要移除商品</li></ul></li></ul></blockquote><blockquote><p>如果需要在Vue实例中访问自身data属性中的数据，可以使用以下方式：</p><ul><li><strong>this.xxxxx</strong></li><li>this.$data.xxxxx</li><li>this._data.xxxxx</li></ul></blockquote><p><strong>参考数据源</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cartData = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;华为&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;联想&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>参考核心代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>综合案例：简易购物车<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        &gt; 细节：</span></span><br><span class="line"><span class="comment">            &gt;</span></span><br><span class="line"><span class="comment">            &gt; - 展示基本的商品信息</span></span><br><span class="line"><span class="comment">            &gt; - 计算每个商品的小计</span></span><br><span class="line"><span class="comment">            &gt; - 商品数量的加、减操作</span></span><br><span class="line"><span class="comment">            &gt;   - +：增加商品数量，同时更新小计</span></span><br><span class="line"><span class="comment">            &gt;   - -：减少商品熟练，同时更新小计，如果本身为“1”，再点-号则需要移除商品</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &gt; 如果需要在Vue实例中访问自身data属性中的数据，可以使用以下方式：</span></span><br><span class="line"><span class="comment">            &gt;</span></span><br><span class="line"><span class="comment">            &gt; - this.xxxxx</span></span><br><span class="line"><span class="comment">            &gt; - this.$data.xxxxx</span></span><br><span class="line"><span class="comment">            &gt; - this._data.xxxxx</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in cartData&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span> 商品id：&#123;&#123;item.id&#125;&#125;<span class="symbol">&amp;emsp;</span> 商品名称：&#123;&#123;item.name&#125;&#125;<span class="symbol">&amp;emsp;</span></span><br><span class="line">                商品单价：&#123;&#123;item.price&#125;&#125;<span class="symbol">&amp;emsp;</span> 购买数量： <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reduce(item,index)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> &#123;&#123;item.num&#125;&#125; <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">                    @<span class="attr">click</span>=<span class="string">&quot;add(item,index)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="symbol">&amp;emsp;</span> 商品小计：&#123;&#123;item.price * item.num&#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 购物车的数据源</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> cartData = [</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">price</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">num</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;华为&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">price</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">num</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;联想&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">price</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">num</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        ]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 声明vue的数据</span></span></span><br><span class="line"><span class="javascript">                cartData</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// -1的操作方法</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">reduce</span>(<span class="params">item, index</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (item.num === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 如果再-就变0，移除该商品</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// if(confirm(&quot;这么好的商品，确定不要来一个吗？&quot;))&#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     this.cartData.splice(index, 1)</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// a &amp;&amp; b，只有当a为真的时候才会走b，如果a为假，则b不走</span></span></span><br><span class="line"><span class="javascript">                        confirm(<span class="string">&quot;这么好的商品，确定不要来一个吗？&quot;</span>) &amp;&amp; <span class="built_in">this</span>.cartData.splice(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 数量大于1，够减，继续-1</span></span></span><br><span class="line"><span class="javascript">                        item.num--</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// +1的操作方法</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">add</span>(<span class="params">item, index</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(item, index);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// this.cartData[index].num++</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 定论：在js中数组/对象其值的传递方式是引用传递</span></span></span><br><span class="line"><span class="javascript">                    item.num++</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(this);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&amp;emsp;</code>表示<code>tab</code>，一个顶四个<code>&amp;nbsp;</code></p></blockquote><h2 id="8、样式绑定"><a href="#8、样式绑定" class="headerlink" title="8、样式绑定"></a>8、样式绑定</h2><h3 id="8-1、class样式绑定"><a href="#8-1、class样式绑定" class="headerlink" title="8.1、class样式绑定"></a>8.1、class样式绑定</h3><ul><li>对象语法（<code>用于控制开关切换</code>）【高频】</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* CSS片段 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active: isActive&#125;&quot;</span>&gt;</span>class样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// JavaScript片段</span></span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">isActive</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数组写法【低频】</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* CSS片段 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[activeClass]&quot;</span>&gt;</span>数组写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// JavaScript片段</span></span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">activeClass</span>: <span class="string">&#x27;active&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2、style样式处理"><a href="#8-2、style样式处理" class="headerlink" title="8.2、style样式处理"></a>8.2、style样式处理</h3><ul><li>对象语法【高频用法】</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML片段 --&gt;</span></span><br><span class="line">&lt;div:style=&quot;&#123;color: redColor, fontSize: &#x27;20px&#x27;&#125;&quot;&gt;对象写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// JavaScript片段</span></span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">redColor</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数组语法【基本不用】</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[color, fontSize]&quot;</span>&gt;</span>数组写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// JavaScript片段</span></span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">color</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">fontSize</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="string">&#x27;font-size&#x27;</span>: <span class="string">&#x27;20px&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9、v-model"><a href="#9、v-model" class="headerlink" title="9、v-model"></a>9、v-model</h2><p><strong>作用:：</strong>表单元素的绑定，实现了<strong>双向数据绑定</strong>，通过表单项可以更改数据。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/9c5b0121053708abca7fb4fb7aad1ebbbccda672.png?sign=c753d4526e96e7bbb0e226e6b3036883&t=5f2d216b" alt="单向与双向数据绑定"></p><p>v-model会忽略所有表单元素的value、checked、selected特性的初始值,而总是将Vue实例的数据作为数据来源，应该在data选项中声明初始值。</p><ul><li>普通文本框上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    v-model其实是`语法糖`,它是下面这种写法的简写</span></span><br><span class="line"><span class="comment">    语法糖：这种语法对语言的功能并没有影响，但是更方便程序员使用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">:value</span>=<span class="string">&#x27;msg&#x27;</span> @<span class="attr">input</span>=<span class="string">&#x27;msg=$event.target.value&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">msg</span>: <span class="string">&#x27;message默认值&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>多行文本框上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>: <span class="string">&#x27;我是多行文本内容&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：在多行文本框中使用插值表达式无效（此时，其只能接受数据，不能改变数据）</strong></p><ul><li>单个复选框上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">checked</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>多个复选框上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;html&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;css&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;js&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果数组中有对应的value值，则此checkbox会被选中</span></span></span><br><span class="line"><span class="javascript"><span class="attr">checkedNames</span>:[]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：此种用法需要<code>input</code>标签提供<code>value</code>属性，并且需要注意属性的大小写要与数组元素的大小写一致</strong></p><ul><li>单选按钮上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>下拉框上的使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">selected</span>: <span class="string">&#x27;JS&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修饰符</li></ul><blockquote><p>.lazy：默认情况下Vue的数据同步采用<code>input</code>事件，使用<code>.lazy</code>将其修改为失去焦点时触发</p><p>.number：自动将用户的输入值转为数值类型（如果能转的话）</p><p>.trim：自动过滤用户输入的首尾空白字符</p></blockquote><h2 id="10、综合案例：全选-全不选"><a href="#10、综合案例：全选-全不选" class="headerlink" title="10、综合案例：全选/全不选"></a>10、综合案例：全选/全不选</h2><p>详细代码见代码文件</p><h1 id="四、Vue常用属性"><a href="#四、Vue常用属性" class="headerlink" title="四、Vue常用属性"></a>四、Vue常用属性</h1><h2 id="1、自定义指令-directive"><a href="#1、自定义指令-directive" class="headerlink" title="1、自定义指令 - directive"></a>1、自定义指令 - directive</h2><p>除了核心功能默认内置的指令，Vue也允许开发者注册自定义指令。有的情况下，对普通DOM元素进行底层操作，这时候就会用到自定义指令绑定到元素上执行相关操作。</p><p><strong>自定义指令分为：全局指令和局部指令</strong>，当全局指令和局部指令同名时<strong>以局部指令为准</strong>（局部指令的优先级高于全局的）。</p><p><strong>问题：全局与局部有什么区别？</strong></p><ul><li><strong>在当前（非工程化，每一个文件都是一个html文件）的时候是没区别的</strong></li><li>vue工程化的时候是有区别的<ul><li>全局的适用于整个项目的（常用）</li><li>局部的适用于当前组件的</li></ul></li></ul><p>自定义指令<strong>常用</strong>钩子函数（名字固定的函数）有：</p><ul><li>bind：在<strong>指令</strong>第一次绑定到元素时调用（在<strong>该环节中是获取不到父节点的</strong>，父节点是null），序号：1</li><li>inserted：被绑定<strong>元素</strong>插入父节点时调用（在<strong>该环节中是可以获取到父节点的</strong>），序号：2</li><li>update：数据更新时调用，序号：3（该环节会重复触发）</li><li>componentUpdated：指定元素及子节点更新完成后会触发</li><li>unbind：取消绑定后触发</li></ul><blockquote><p>请注意：不管在定义全局还是局部自定义指令时，<strong>所提及的指令名均是不带<code>v-</code>前缀的名称</strong>。</p></blockquote><p><strong>全局指令语法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;指令名&#x27;</span>,&#123;</span><br><span class="line">钩子函数名: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    <span class="comment">// el参数是挂载到的元素的DOM对象</span></span><br><span class="line">    <span class="comment">// &lt;div v-abc&gt;123&lt;/div&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传参</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;指令名&#x27;</span>,&#123;</span><br><span class="line">钩子函数名: <span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> param = binding.value</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>请务必注意，作为全局配置，不能将其写在指定的Vue实例里，后续其它全局配置亦是如此</strong></p></blockquote><p><strong>局部自定义指令定义</strong></p><p>可以在<code>new Vue</code>的时候添加<code>directives</code>以注册局部自定义指令，局部自定义指令只能在当前组件实例中使用：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">  指令名: &#123;</span><br><span class="line">    <span class="comment">// 指令的定义</span></span><br><span class="line">    钩子函数名: <span class="function"><span class="keyword">function</span> (<span class="params">el,binding</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数简写（了解，使用机会很少）</strong></p><blockquote><p>部分时候，我们可能想在 <code>bind</code> <strong>和 <strong><code>update</code> 时触发</strong>相同</strong>行为（如果只是其一，则还是单独分开声明），而不关心其它的钩子。那么这样写：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;指令名&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el,binding</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部</span></span><br><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line">  指令名: <span class="function"><span class="keyword">function</span> (<span class="params">el,binding</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 业务逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在自定义指令的方法中，不能像以前的<code>methods</code>中的方法一样使用关键词<code>this</code>，此时<code>this</code>关键词指向的是<code>Window</code>对象。</p></blockquote><p>案例：使用自定义指令实现以下效果</p><ul><li>使用全局指令定义自定义的<code>v-red（不传参）</code>和<code>v-color（传参）</code>，在元素被插入时设置内容颜色</li><li>使用局部自定义指令实现<code>v-mobile（不传参）</code>验证用户输入的是否是合法的手机号，不合法手机号为红色，合法为黑色</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指令v-red，实现将文字的颜色设置成红色 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-red</span>&gt;</span>武汉上演建党百年长江灯光秀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指令v-color：实现将文字的颜色设置成指定的颜色 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-color</span>=<span class="string">&quot;&#x27;blue&#x27;&quot;</span>&gt;</span>将延长边境防疫管控1年?中方回应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指令v-mobile：需要验证用户输入的手机号是否合法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">v-mobile</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局自定义指令</span></span></span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">&quot;red&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// bind: function(el)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     // el是指令绑定的dom对象</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     console.log(el);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     // 获取父节点，当然当前bind的时候是获取不到的，因此为null</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     console.log(el.parentNode);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// el表示dom对象</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(el);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// el.parentNode表示其父节点</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(el.parentNode);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 通过dom对象，设置颜色</span></span></span><br><span class="line"><span class="javascript">            el.style.color = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">&quot;color&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(el, binding);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// binding.value表示属性的值（该值不是看到的表达式，而是解析完后的值）</span></span></span><br><span class="line"><span class="javascript">            el.style.color = binding.value</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">mobile</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 自定义指令：</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">mobile</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 定义需要使用的函数</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(el);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 获取手机号</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> mobile = el.value</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 正则表达式验证手机号是否合法</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>.test(mobile)) &#123;</span></span><br><span class="line"><span class="javascript">                        el.style.color = <span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        el.style.color = <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、计算属性-computed"><a href="#2、计算属性-computed" class="headerlink" title="2、计算属性 - computed"></a>2、计算属性 - computed</h2><p>模板中放入太多的逻辑（方法）会让模板过重且难以维护，使用计算属性可以让模板变得简洁易于维护。计算属性是基于它们的响应式依赖进行<strong>缓存</strong>的，计算属性比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化。</p><p>计算属性定义在Vue对象中，通过关键词<code>computed</code>属性对象中定义一个个函数，并返回一个值，使用计算属性时和<code>data</code>中的数据使用方式一致。</p><p>核心点：</p><ul><li>计算属性其在代码的表现也是方法，但是与methods不同<ul><li>计算属性必须有return</li></ul></li><li>在某些场景下，计算属性的效率要比methods效率高<ul><li>计算属性支持数据的缓存操作（在依赖数据不变的情况下），而methods不行</li></ul></li></ul><p><strong>示例</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当多次调用 cfn计算属性时只要里面的 num值不改变,它会把第一次计算的结果直接返回直到data中的num值改变 计算属性才会重新发生计算 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; cfn &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; cfn &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 调用methods中的方法的时候  他每次会重新调用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; fn() &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; fn() &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">num</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 方法</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fn</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;methods&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.num;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 计算属性</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">cfn</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;computed&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.num;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>只要依赖的数据源不发生改变，计算属性里的对应方法就只被调用1次，其它时候被调用时则使用缓存。提高效率。</p><h2 id="3、监听器-watch"><a href="#3、监听器-watch" class="headerlink" title="3、监听器 - watch"></a>3、监听器 - watch</h2><p>使用watch来侦听<strong>data</strong>中数据的变化，<strong>watch中的属性（watch是对象格式）一定是data 中已经存在的数据</strong>。（特殊情况除外）</p><p><strong>使用场景：</strong>数据变化时执行<strong>异步或开销比较大的操作</strong>。</p><p><strong>典型应用：</strong><a href="http://www.pinyinzi.cn/">http://www.pinyinzi.cn/</a></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/6ae51459d0c21c076baf58e26829a6265e3ee938.png?sign=87b53c566e524496faa45fc17ee38816&t=5f3648ac" alt="监听器"></p><p><strong>案例：</strong>给定三个输入框，第一个为姓输入框，第二个为名输入框，第三个为姓名组合结果框；要求当用户更新姓或名后，第三个输入框自动生成完整的姓名结果。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">.....</span><br><span class="line">watch: &#123;</span><br><span class="line">data中数据的名称: fn方法,</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>参考代码：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;firstName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;lastName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;名&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;fullName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;全名&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fullName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fullName = val + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + val</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意点：</p><ul><li>声明监听器，使用的关键词是<code>watch</code></li><li>每个监听器的方法，可以接受2个参数，第一个参数是新的值，第二个参数是之前的值</li></ul></blockquote><p><strong>注意：</strong>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，此时就需要deep属性对对象进行<strong>深度监听</strong>。</p><p><strong>使用对象的数据形式改写上述案例参考代码：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userinfo.firstName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userinfo.lastName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;名&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userinfo.fullName&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;全名&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">userinfo</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">lastName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">fullName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">userinfo</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// handler是固定的写法</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params">val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.userinfo.fullName = val.firstName + <span class="string">&#x27; &#x27;</span> + val.lastName</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 对象支持引用传值</span></span></span><br><span class="line"><span class="javascript">                    val.fullName = val.firstName + <span class="string">&#x27; &#x27;</span> + val.lastName</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">deep</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>面试题：vue中计算属性与监听器有什么区别？？</strong></p><ul><li>设计方式上的区别<ul><li>计算属性：依赖数据的，只要数据不变，它会套用固定的流程去执行。我们写好之后一劳永逸的。（我们只要告诉其数据的处理规则）</li><li>监听器：需要我们自己去写比较复杂的数据处理过程，比如说一些异步的操作、开销大的操作（我们自己写数据处理逻辑）</li></ul></li><li>响应方式上的区别<ul><li>计算属性：支持深度深度数据是否变化的监听的（默认的）</li><li>监听器：默认不支持深度响应，仅支持字面量处理，但是其支持通过代码的改动来支持深度监听</li></ul></li></ul><h2 id="4、综合案例：完善购物车"><a href="#4、综合案例：完善购物车" class="headerlink" title="4、综合案例：完善购物车"></a>4、综合案例：完善购物车</h2><p><strong>进一步需求：</strong></p><ul><li>增加自动计算总价功能，只计算被选中的商品【计算属性】</li><li>增加反选功能【事件绑定】</li><li>当手动选中全部商品，<code>全选</code>复选框自动选中，但凡有一个商品的复选框没有被选中，则<code>全选</code>复选框不选中【监听器】</li></ul><p>实现代码参考代码文件。</p><h2 id="5、过滤器"><a href="#5、过滤器" class="headerlink" title="5、过滤器"></a>5、过滤器</h2><p><strong>作用：</strong>格式化数据，比如将字符串格式化为首字母大写、将日期格式化为指定的格式等。</p><ul><li>过滤器可以定义成全局过滤器和局部过滤器。</li><li><strong>过滤器的本质就是一个方法</strong>，使用过滤器实际上就相当于方法调用，仅是书写形式上的差异（使用的时候需要用“|”（shift + \），其也可以被称之为<code>管道</code>或<code>变量/数据修饰符</code>）</li><li>这玩意在vue3中已经废弃了<ul><li>vue3中解决办法是通过methods来替代</li></ul></li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/82ec23d614d0bf55ff0e2ecc1ac9414db2607490.png?sign=019afa9de124d3e56fb0fb0584616f73&t=5f364f40" alt="过滤器"></p><p><strong>声明语法：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局过滤器</span></span><br><span class="line">Vue.filter(<span class="string">&#x27;过滤器名称&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value[,arg1,arg2...]</span>)</span>&#123;</span><br><span class="line"><span class="comment">//过滤器业务逻辑</span></span><br><span class="line"><span class="keyword">return</span> ....</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部过滤器</span></span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">filters</span>: &#123;</span><br><span class="line">    过滤器名称: <span class="function"><span class="keyword">function</span>(<span class="params">value[,arg1,arg2...]</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> something</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>过滤器的处理函数中的第一个参数<strong>固定</strong>是<code>绑定的待处理数据</code>，后续可以根据需要添加自定义参数</p></blockquote><p><strong>使用语法：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 过滤器使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | upper&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 过滤器允许连续使用，“前 → 后”按顺序执行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | upper | lower&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 过滤器支持在v-bind中使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&#x27;id | formatId&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 过滤器支持传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | mysub(1,2)&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>案例：声明转字母为大写的全局过滤器和转字母为小写的局部过滤器并使用</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;msg | toUpper&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;msg | toLower&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局过滤器：转字母为大写</span></span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">&#x27;toUpper&#x27;</span>,<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> val.toUpperCase()</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">&#x27;HeLLo WoRld&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 局部过滤器：转字母为小写</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">toLower</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> val.toLowerCase()</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、混入-mixin"><a href="#6、混入-mixin" class="headerlink" title="6、混入 - mixin"></a>6、混入 - mixin</h2><p>混入（mixins）是一种分发Vue组件中<strong>可复用</strong>功能的非常灵活的方式。<strong>混入对象可以包含任意组件选项</strong>。当组件使用混入对象时，==所有混入对象（加的水）的选项将被混入该组件本身的选项（锅底）。==</p><p>通俗来讲，就是把一部分可复用的代码片段，加入到另一个代码中。</p><p>混入分为全局混入和局部混入。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/e090362ac96d806e9cec71c693b62f2640ea9967.jpeg?sign=553e389ab69879e18d97d6c7520f7daa&t=5f58b1a8" alt="混入"></p><p><strong>示例：</strong></p><ul><li>局部混入（按需混入）【推荐】</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义一个混入对象（局部混入）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myMixin = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.hello();</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">hello</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;hello from mixin!&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            ....</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">mixins</span>: [myMixin],</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>全局混入（强制混入）</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局混入</span></span></span><br><span class="line"><span class="javascript">    Vue.mixin(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> myOption = <span class="built_in">this</span>.myOption;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (myOption) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(myOption);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">myOption</span>: <span class="string">&quot;hello!&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意事项</strong></p></blockquote><ul><li>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”，合并策略：<ul><li><code>data</code>数据对象发生冲突时以组件（被混入对象）数据优先</li><li>同名钩子函数（生命周期函数）将合并为一个数组，都将被调用，并且混入对象的钩子将在组件自身钩子<strong>之前</strong>调用</li><li>值为对象的选项，例如 <code>methods</code>、<code>components</code> 和 <code>directives</code>，将被合并为同一个对象。两个对象键名冲突时，取组件对象（自身）的键值对</li></ul></li><li>全局注册使用时需要格外小心！一旦使用全局混入，它将影响<strong>每一个</strong>之后创建的 Vue 实例</li></ul><h2 id="7、生命周期"><a href="#7、生命周期" class="headerlink" title="7、生命周期"></a>7、生命周期</h2><p>生命周期：从vue实例产生开始到vue实例被销毁这段时间所经历的过程。</p><p>vue更像工具人，在整个过程中只会按照作者预设的程序去做事，不能由开发者去控制或者diy。如果这样开发时限制是比较多的，因此作者开放了生命周期，允许我们定义vue在特定的时候去做我们让其做的事情（钩子函数）。</p><p>每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM，在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，目的是给予用户在一些特定的场景下添加他们自己代码的机会。</p><p>vue2中一共有11个生命周期。</p><p>Vue生命周期的<strong>主要阶段</strong>：</p><ul><li>挂载（初始化相关属性）<ul><li>beforeCreate<ul><li><strong>注意点</strong>：在此时不能获取data中的数据，也就是说<code>this.msg</code>得到的是<code>undefined</code></li></ul></li><li>created</li><li>beforeMount</li><li>mounted【页面加载完毕的时候就是此时】<ul><li><strong>注意点</strong>：默认情况下，在组件的生命周期中只会触发一次</li></ul></li></ul></li><li>更新（元素或组件的变更操作）<ul><li>beforeUpdate</li><li>updated<ul><li><strong>注意点</strong>：可以重复触发的</li></ul></li></ul></li><li>销毁（销毁相关属性）<ul><li>beforeDestroy<ul><li><strong>注意点</strong>：</li></ul></li><li>destroyed</li></ul></li></ul><blockquote><p>销毁（手动）使用<code>this.$destroy()</code></p></blockquote><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/5d6a79ad2a3b74d4ad9d70f868de0545f9939b8f.png?sign=b2936e9953891efac26abe8060495936&t=5f365858" alt="生命周期"></p><p>关于8个生命周期涉及到的方法，可以参考Vue官网API：<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90</a></p><p><strong>面试题：</strong></p><ul><li>常用的vue的生命周期是哪些？<ul><li>要点：4阶段，8个周期函数</li></ul></li><li>如果组件存在父子关系的时候，父组件（A）与子组件（B）生命周期执行的顺序是怎样的？<ul><li>思路：<ul><li>A组件有8个常用周期：创建2个、挂载2个、更新2个、销毁2个</li><li>B组件有8个常用周期：创建2个、挂载2个、更新2个、销毁2个</li></ul></li><li>答案：将8个周期划分为三阶段（1-4，5-6，7-8）<ul><li>渲染阶段：父1 → 父2 → 父3 → 子1 → 子2 → 子3 → 子4 → 父4</li><li>更新阶段：父5 → 子5 → 子6 → 父6</li><li>销毁阶段：父7 → 子7 → 子8 → 父8 </li></ul></li></ul></li></ul><h2 id="8、虚拟DOM与diff算法"><a href="#8、虚拟DOM与diff算法" class="headerlink" title="8、虚拟DOM与diff算法"></a>8、虚拟DOM与diff算法</h2><p><strong>什么是虚拟DOM？</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/7782f6424492630815195ed5722bdae78448601c.png?sign=e33c1bcebed7f86de415715793bb5444&t=5f60a247" alt="虚拟DOM"></p><p>定义：指将真实的dom按照特定的语法转化（抽象）成一个js对象，这个<strong>js对象称之为虚拟dom</strong>。</p><p><strong>什么是diff（different）算法？</strong></p><p>差异比较算法的一种，把树形结构按照层级分解，只<strong>比较同级</strong>元素。不同层级的节点只有创建和删除操作</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/925fb1057a940bea0ea1863cb6df88c72496d65f.png?sign=a480a62fcd8497af8a60acd193b4facd&t=5f60a529" alt="diff算法"></p><p><strong><code>虚拟DOM+diff算法</code>的方式与<code>传统DOM操作</code>相比，有什么好处？</strong></p><p><strong>传统DOM操作</strong>：在一次操作中，往往会伴随多次个DOM节点更新，浏览器收到第一个DOM请求后并不知道还有若干次更新操作，因此会马上执行流程，最终执行若干次次。在后续找DOM坐标的时候，可能因为前期更新DOM导致了后续需要寻找的DOM坐标发生了变化。而操作DOM频繁还会出现页面卡顿，影响用户体验。</p><p><strong>虚拟DOM+diff算法</strong>：若一次操作中有若干次更新DOM的动作，虚拟DOM不会立即操作DOM，而是将这若干次更新的diff内容保存到本地一个JS对象中，最终将这个JS对象<strong>一次性</strong>放到DOM树上，再进行后续操作，避免大量无谓的计算量。</p><p>建议：面试之前一定要去找下比较正规的理论性的东西。</p><h2 id="9、双向数据绑定原理"><a href="#9、双向数据绑定原理" class="headerlink" title="9、双向数据绑定原理"></a>9、双向数据绑定原理</h2><p>==面试可能会被大概率问到，需要领悟其中的关键词“代理”、“Object.defineProperty（vue2）”、“Proxy（vue3）”==</p><p>==核心：数据订阅、数据劫持（代理）==</p><p><strong>当把一个普通的JavaScript对象传给Vue实例的data选项，Vue将遍历此对象所有的属性，使用Object.defineProperty把这些属性全部转为getter（获取）/setter（设置）。</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5中提供的方法</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</span><br><span class="line"><span class="comment">// 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span></span><br><span class="line"><span class="comment">// 应当直接在Object构造器对象上调用此方法，而不是在任意一个Object类型的实例上调用。</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>obj</strong></em></p><p>要定义属性的对象。</p><p><em><strong>prop</strong></em></p><p>要定义或修改的属性的名称 。</p><p><em><strong>descriptor</strong></em></p><p>要定义选项，“{    }”。在这里面设置getter和setter。</p></blockquote><p><strong>示例代码：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inpt&quot;</span> <span class="attr">oninput</span>=<span class="string">&quot;changeVal(this.value)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 定义数据源</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">&quot;hello world.&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 等同于之前的data属性</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 通过dom操作将数据写在页面上（一锤子买卖）</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;inpt&quot;</span>).value = data.msg;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;content&quot;</span>).innerText = data.msg;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3. 通过Object.defineProperty()去实现数据的劫持(代理)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> obj = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;proxy&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 设置getter和setter</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 代理获取数据</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> data.msg;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 代理设置数据</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                data.msg = val;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;content&quot;</span>).innerText = val;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 4. input事件的处理程序</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">changeVal</span>(<span class="params">val</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(val);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 更新数据源</span></span></span><br><span class="line"><span class="javascript">            obj.proxy = val;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vue2与vue3双向数据绑定的实现比较参考：</p><p><a href="https://www.jianshu.com/p/255d4dec710a">https://www.jianshu.com/p/255d4dec710a</a></p><h1 id="五、网络请求"><a href="#五、网络请求" class="headerlink" title="五、网络请求"></a>五、网络请求</h1><h2 id="1、fetch（认识）"><a href="#1、fetch（认识）" class="headerlink" title="1、fetch（认识）"></a>1、fetch（认识）</h2><ul><li><p><strong>由HTML5提供的内置API</strong></p></li><li><p>更加简单的数据获取方式，功能更强大、灵活，可以看作是xhr的升级版</p></li><li><p>基于Promise实现</p></li><li><p>fetch支持很多请求方式，但默认为<code>GET</code>请求，如果需要使用其他方式可以通过第二个自选参数的<code>method</code>选项去指定</p></li></ul><p><strong>语法结构</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fetch(url[,some settings]).then(fn2)<span class="comment">// 首个then：处理数据的格式</span></span><br><span class="line">  .then(fn3)<span class="comment">// 第二个then是处理业务逻辑的</span></span><br><span class="line">  ...</span><br><span class="line">          .catch(fn)</span><br><span class="line"><span class="comment">// catch，（try catch）</span></span><br></pre></td></tr></table></figure><p><strong>用法示例</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过url表达式来传递数据（GET）</span></span><br><span class="line">fetch(<span class="string">&quot;http://xxx/?id=123&quot;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())<span class="comment">// 将收到的数据进行转化，转化成json格式</span></span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));<span class="comment">// 最终可以获得数据并写业务逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// post标准提交(表单数据)</span></span><br><span class="line">fetch(<span class="string">&quot;http://xxxx/post&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,<span class="comment">// 请求类型限制</span></span><br><span class="line">        <span class="attr">body</span>: <span class="string">&quot;uname=lisi&amp;pwd=123&quot;</span>,<span class="comment">// 提交的数据</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// post提交json数据（接口开发）</span></span><br><span class="line">fetch(<span class="string">&quot;http://localhost:3000/books&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            <span class="attr">uname</span>: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">            <span class="attr">pwd</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><p>在上述代码示例中我们会看到有个<code>json()</code>方法，它是fetch的响应结果处理方法，fetch的常用响应结果处理方法有：</p><ul><li>text()：将返回体处理成字符串类型</li><li>json()：返回结果和JSON.parse(responseText)一样</li></ul><p><strong>将获取到的<code>list</code>数据展示出来</strong></p><p>使用fetch请求接口地址：<a href="https://api.i-lynn.cn/college">https://api.i-lynn.cn/college</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网络请求：fetch<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        fetch</span></span><br><span class="line"><span class="comment">        特点：</span></span><br><span class="line"><span class="comment">            a. h5内置的api，不需要引用相关的js即可使用；</span></span><br><span class="line"><span class="comment">            b. 与xhr的使用相比，其更加简洁、高效；</span></span><br><span class="line"><span class="comment">            c. 基于promoise；</span></span><br><span class="line"><span class="comment">            d. 支持请求类型比较全面；</span></span><br><span class="line"><span class="comment">        语法：</span></span><br><span class="line"><span class="comment">            fetch(请求地址,[可选配置对象]).then(ret =&gt; callback)[.then(ret =&gt; callback)....].catch(callback)</span></span><br><span class="line"><span class="comment">        then中形参的注意点：</span></span><br><span class="line"><span class="comment">            其有俩个方法可以实现数据类型的转化，如果需要的话也可以使用：</span></span><br><span class="line"><span class="comment">                a.   .text()    ret.text()将内容转换成文本内容</span></span><br><span class="line"><span class="comment">                b.   .json()    ret.json()将内容转换成json内容（常见形式）</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            将获取到的`list`数据展示出来</span></span><br><span class="line"><span class="comment">            使用fetch请求接口地址：https://api.i-lynn.cn/college </span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item.area&#125;&#125;：&#123;&#123;item.counts&#125;&#125;所<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 初始化值用于后续接收list数据</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">list</span>: []</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 暂时不考虑封装请求到methods中（项目案例中再说）</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                fetch(<span class="string">&quot;https://api.i-lynn.cn/college&quot;</span>).then(<span class="function"><span class="params">ret</span> =&gt;</span> ret.json()).then(<span class="function"><span class="params">ret</span> =&gt;</span> <span class="built_in">this</span>.list = ret.data.list)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、axios"><a href="#2、axios" class="headerlink" title="2、axios"></a>2、axios</h2><p>文档：<a href="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye/axios/234845</a></p><p>axios 是一个基于 promise 的 <strong>HTTP ==库==<strong>，可以用在浏览器和node.js中。</strong>axios是vue作者推荐使用的网络请求库</strong>，它具有以下特性：</p><ul><li>支持浏览器和node.js（降低学习成本） </li><li>支持promise</li><li>能够拦截<code>请求和响应</code>（拦截器）</li><li>自动转换json数据</li></ul><p><strong>在使用axios之前需要在对应的模板文件中引入axios的js库文件</strong>，随后按照以下用法使用axios：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET请求方式</span></span><br><span class="line">axios.get(<span class="string">&#x27;/get_data?id=10010&#x27;</span>).then(<span class="function"><span class="params">ret</span> =&gt;</span> <span class="built_in">console</span>.log(ret.data))</span><br><span class="line">axios.get(<span class="string">&#x27;/get_data&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">10010</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">ret</span> =&gt;</span> <span class="built_in">console</span>.log(ret.data))</span><br><span class="line"></span><br><span class="line"><span class="comment">//POST请求方式</span></span><br><span class="line"><span class="comment">// 参数是对象形式的，axios发送的请求头是application/json</span></span><br><span class="line">axios.post(<span class="string">&#x27;/set_data&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;zhang&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;san&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123; &#125;)</span><br><span class="line"><span class="comment">// 参数是字符串形式的，axios发送的请求头是application/x-www-form-urlencoded</span></span><br><span class="line">axios.post(<span class="string">&#x27;/set_data&#x27;</span>,<span class="string">&quot;firstName=zhang&amp;lastName=san&quot;</span>).then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先不指定请求类型，在配置中去指定请求类型（类似$.ajax）</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;set_data&#x27;</span>,</span><br><span class="line">    <span class="comment">// 超时时间：如果请求花的时候超过了预设时间，则请求取消</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;头信息名&#x27;</span>: <span class="string">&#x27;头信息值&#x27;</span>&#125;,</span><br><span class="line">  <span class="attr">data</span>: <span class="string">&quot;username=zhangsan&amp;type=2&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure><p>当然axios<strong>除了</strong>支持传统的<code>GET</code>和<code>POST</code>方式<strong>以外</strong>，常见的请求方式还支持：</p><ul><li>put：修改数据</li><li>delete：删除数据</li></ul><blockquote><p>需要注意，<strong>针对POST/PUT请求</strong>，此处的参数提交格式以参数形式为准，如果是字符串（a=b&amp;c=d形式），则发送表单格式（”Content-Type”: “application/x-www-form-urlencoded”）；如果是对象，则发送json格式（”Content-Type”: “application/json”）。</p></blockquote><p>以上方的axios请求示例为例，axios响应结果（<code>ret</code>）的主要属性有：</p><ul><li><strong>data：实际响应回来的数据（最常用）</strong></li><li>headers：响应头信息</li><li>status：响应状态码</li><li>statusText：响应状态信息</li><li>config</li><li>request</li></ul><p>另外需要注意的是，在使用axios发送请求之前它允许我们通过<strong>全局配置</strong>做一些设置，这样可以方便后续的请求操作，例如：</p><ul><li>axios.defaults.timeout = 3000【设置超时时间】</li><li>axios.defaults.baseURL = ‘<a href="http://localhost/app&#39;%E3%80%90%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%9C%B0%E5%9D%80%E3%80%91">http://localhost/app&#39;【设置默认地址】</a></li><li>axios.defaults.headers[‘_token’] = ‘123123123’【设置请求头信息，通用头信息】<ul><li>axios.defaults.headers.get[‘_token’] = ‘123123’</li><li>axios.defaults.headers.post[‘_token’] = ‘123123’</li><li>axios.defaults.headers.common[‘_token’] = ‘123123’【通用头信息，common可以不写】</li></ul></li><li>…</li></ul><p><strong>使用axios方式改写<code>XHR</code>部分案例</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网络请求：axios<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        axios</span></span><br><span class="line"><span class="comment">        特点：</span></span><br><span class="line"><span class="comment">            a. 可以在浏览器和nodejs环境中运行；</span></span><br><span class="line"><span class="comment">            b. 基于promise；</span></span><br><span class="line"><span class="comment">            c. 实现请求的拦截和响应的拦截（项目案例中再说）；</span></span><br><span class="line"><span class="comment">            d. 其能够实现自动默认转化数据为json；</span></span><br><span class="line"><span class="comment">        缺点：</span></span><br><span class="line"><span class="comment">            a. 与fetch相比，需要引入外部的axios文件才可使用；</span></span><br><span class="line"><span class="comment">        安装：</span></span><br><span class="line"><span class="comment">            工程化：npm i axios</span></span><br><span class="line"><span class="comment">            非工程化：通过script标签引入以下地址https://unpkg.com/axios/dist/axios.min.js</span></span><br><span class="line"><span class="comment">                    或者将该地址对应的js文件另存到本地再引入本地地址</span></span><br><span class="line"><span class="comment">        语法：</span></span><br><span class="line"><span class="comment">            a. axios.请求类型(地址,[可选对象/字符串]).then(res =&gt; 处理程序)</span></span><br><span class="line"><span class="comment">                请求类型支持：get/post/put/delete.....</span></span><br><span class="line"><span class="comment">            b. axios(配置对象).then(res =&gt; 处理程序)</span></span><br><span class="line"><span class="comment">        注意点：</span></span><br><span class="line"><span class="comment">            针对post和put请求类型，axios会根据传递的参数格式自动设置请求头，规则如下：</span></span><br><span class="line"><span class="comment">                如果请求参数是对象格式，则请求头会被设置成：application/json</span></span><br><span class="line"><span class="comment">                如果请求参数是查询字符串，则请求头会被设置成：application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">            axios会自动将数据转化成json格式</span></span><br><span class="line"><span class="comment">            网络请求返回的数据在axios返回结果的data属性中</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            将获取到的`list`数据展示出来</span></span><br><span class="line"><span class="comment">            使用fetch请求接口地址：https://api.i-lynn.cn/college </span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span> &#123;&#123;item.area&#125;&#125;：&#123;&#123;item.counts&#125;&#125;所 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入本地的axios --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">list</span>: []</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 1. 使用axios发送常规get请求</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// axios.get(&quot;https://api.i-lynn.cn/college?id=1044&quot;).then(res =&gt; this.list = res.data.data.list)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 2. 使用axios发送get请求，但是通过对象形式传参</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// axios.get(&quot;https://api.i-lynn.cn/college&quot;,&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     params: &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         id: 1045</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;).then(res =&gt; this.list = res.data.data.list)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 3. 使用axios发送post请求，传递表单提交数据</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// axios.post(&quot;https://api.i-lynn.cn/college&quot;,&quot;id=1046&amp;pid=1047&quot;).then(res =&gt; this.list = res.data.data.list)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 4. 使用axios发送post请求，传递的是json数据</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// axios.post(&quot;https://api.i-lynn.cn/college&quot;,&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     id: 1048,</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     pid: 1049</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;).then(res =&gt; this.list = res.data.data.list)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 5. 使用对象配置</span></span></span><br><span class="line"><span class="javascript">                axios(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>: <span class="string">&quot;https://api.i-lynn.cn/college&quot;</span>,</span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">this</span>.list = res.data.data.list)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="六、组件（重点）"><a href="#六、组件（重点）" class="headerlink" title="六、组件（重点）"></a>六、组件（重点）</h1><h2 id="1、什么是组件"><a href="#1、什么是组件" class="headerlink" title="1、什么是组件"></a>1、什么是组件</h2><p>组件 （Component）是 Vue.js 最强大的功能之一，<strong>组件是一个自定义HTML元素（标签）</strong>或称为一个模块，包括所需的模板（HTML）、逻辑（JavaScript）和样式（CSS）。</p><p><strong>组件化开发的特点：</strong></p><ul><li>标准</li><li>分治（解耦）</li><li>重用</li><li>组合</li></ul><p>组件也是有<code>全局（component）</code>与<code>局部（components）</code>之分。</p><h2 id="2、组件的注册及使用"><a href="#2、组件的注册及使用" class="headerlink" title="2、组件的注册及使用"></a>2、组件的注册及使用</h2><p>在使用组件时需要注意以下几点：</p><ul><li>构造 Vue 实例时传入的各种选项<strong>大多数</strong>都可以基于原格式在组件里使用，只有一个例外：<strong>data必须是函数，同时这个函数要求必须返回一个对象</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;你好世界&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>组件模板<code>template</code></p><ul><li><p>必须是单个根元素</p></li><li><p>~~~html</p><!-- 单个根元素 --><div>    <ul>        <li></li>    </ul>    <ul>        <li></li>    </ul></div><!-- 不符合单个根元素的情况 --><p></p><p></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 支持模板字符串形式</span><br><span class="line"></span><br><span class="line">- 组件名称命名方式</span><br><span class="line"></span><br><span class="line">  - 短横线方式（推荐）</span><br><span class="line">    - my-component</span><br><span class="line">  - 大驼峰方式（只能在其他组件模板字符串中使用，不能在HTML模板中**直接**使用）</span><br><span class="line">    - MyComponent</span><br><span class="line"></span><br><span class="line">&gt; 大驼峰式组件名不能在HTML模板中直接使用，如果需要在HTML模板中使用，需要将其进行特定规则转化：</span><br><span class="line">&gt;</span><br><span class="line">&gt; - 首字母从大写转为小写</span><br><span class="line">&gt; - 后续每遇到大写字母都要转化成小写并且在转化后的小写字母前加`-`</span><br><span class="line">&gt;</span><br><span class="line">&gt; 例如，`WoDeZuJian`这个大驼峰组件名在HTML中使用的时候需要写成`wo-de-zu-jian`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2.1、全局组件</span><br><span class="line"></span><br><span class="line">全局组件注册形式如下：</span><br><span class="line"></span><br><span class="line">~~~javascript</span><br><span class="line">// 声明全局组件</span><br><span class="line">Vue.component(componentName,&#123;</span><br><span class="line">    // 存放该组件需要使用的数据</span><br><span class="line">    data: function()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 用于定义组件的视图内容</span><br><span class="line">    template: &#x27;组件模版内容&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>上述示例中，<code>component()</code>的第一个参数是<code>组件名</code>（<strong>实则可以看作是HTML标签名称</strong>），第二个参数是一个对象形式的选项，里面存放组件的声明信息。全局组件注册后，任何Vue实例都可以使用。</p><p>例如，有以下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个全局的HelloWorld组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;HelloWorld&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;HelloWorld&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2、局部组件"><a href="#2-2、局部组件" class="headerlink" title="2.2、局部组件"></a>2.2、局部组件</h3><p>局部组件定义后只能在当前注册它的Vue实例中使用，其是通过某个 Vue 实例/组件的实例选项 components 注册。</p><p>例如，有以下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;A custom component!&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// &lt;my-component/&gt; 将只在父组件模板中可用</span></span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>: Child,</span><br><span class="line">        <span class="comment">// &lt;child/&gt;</span></span><br><span class="line">        Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-3、组件的使用"><a href="#2-3、组件的使用" class="headerlink" title="2.3、组件的使用"></a>2.3、组件的使用</h3><p>在HTML模板中，组件以<strong>一个自定义标签的形式存在</strong>，起到占位符的功能。通过Vue.js的声明式渲染后，占位符将会被替换为实际的内容，下面是一个最简单的模块示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以在一个组件的组件模板中去使用<strong>其他==已经注册==（一般是指全局组件）</strong>的组件，例如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用局部组件component_two --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component_two</span>&gt;</span><span class="tag">&lt;/<span class="name">component_two</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注册全局组件component_one</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;component_one&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;我是组件component_one&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> component_two = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: </span></span><br><span class="line"><span class="javascript">            <span class="string">`&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;div&gt;我是组件component_two&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;component_one&gt;&lt;/component_one&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;/div&gt;`</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 注册局部组件component_two</span></span></span><br><span class="line"><span class="javascript">            component_two</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、组件间传值（重点）"><a href="#3、组件间传值（重点）" class="headerlink" title="3、组件间传值（重点）"></a>3、组件间传值（重点）</h2><h3 id="3-1、父传子"><a href="#3-1、父传子" class="headerlink" title="3.1、父传子"></a>3.1、父传子</h3><ul><li>父组件以属性的形式绑定值到子组件身上（传）</li><li>子组件通过使用属性props接收（收）<ul><li>props是单向绑定的（只读属性）：当父组件的属性变化时，将传导给子组件，但是反过来不会</li><li>props属性支持两种常见的写法形式<ul><li>数组（推荐）<ul><li>优点：书写简单</li><li>缺点：不能设置默认值、数据类型</li></ul></li><li>对象<ul><li>优点：可以设置数据默认值与数据类型</li><li>缺点：写法复杂</li></ul></li></ul></li></ul></li></ul><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:day</span>=<span class="string">&#x27;day&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> child = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// props形式一：数组形式</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>: [<span class="string">&#x27;day&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">// props形式二：对象形式</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">day</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">default</span>: <span class="string">&#x27;日&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>: <span class="built_in">String</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;p&gt;星期&#123;&#123;day&#125;&#125;&lt;/p&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">day</span>: <span class="string">&#x27;五&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            child</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2、子传父"><a href="#3-2、子传父" class="headerlink" title="3.2、子传父"></a>3.2、子传父</h3><ul><li>子组件模版内容中用<code>$emit()</code>触发<code>自定义事件</code>，<code>$emit()</code>方法<strong>至少</strong>有2个参数<ul><li>第一个参数为自定义的事件名称（不要和内置的事件重名，例如click、change等）</li><li>第二个参数为需要传递的数据（可选，可以是任何格式的数据）</li></ul></li><li>父组件模板内容中的子组件占位标签上用v-on（或@）绑定子组件定义的自定义事件名，监听子组件的事件，实现通信 </li></ul><p><strong>示例代码：每点击子组件按钮给父组件字体加9（由子决定，当然也可以写成其它的值）像素</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> @<span class="attr">anlarge-text</span>=<span class="string">&#x27;bigger&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: fontSize + &#x27;px&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> child = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">`&lt;button @click=&quot;$emit(&#x27;anlarge-text&#x27;,9)&quot;&gt;点我给父组件字体加9px&lt;/button&gt;`</span>,</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 根组件（父）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">&#x27;hello vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fontSize</span>: <span class="number">12</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            child</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">bigger</span>: <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fontSize += n</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/03/74cca37e9f1958684fb725b118bdc6289d6b7a84.png?sign=f5d83cb284d62ddb900505cdcd7bfe6f&t=6061846a"></p><h3 id="3-3、组件间传值"><a href="#3-3、组件间传值" class="headerlink" title="3.3、组件间传值"></a>3.3、组件间传值</h3><blockquote><p>EventBus又被称之为<strong>中央事件总线</strong></p></blockquote><p>在Vue中通过单独的<code>事件中心</code>来管理非<code>父子关系</code>组件（兄弟）间的通信：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/297ffa8474e3e1ba1b392c422284a9889d9181f8.png?sign=b6a91e2548fd10fabc71f4adf538d61d&t=5f3a3491" alt="事件中心"></p><p><strong>核心步骤</strong></p><ul><li><p>建立事件中心</p><ul><li>~~~javascript<br>const eventBus = new Vue()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 传递数据</span><br><span class="line"></span><br><span class="line">  - ~~~javascript</span><br><span class="line">    eventBus.$emit(&#x27;自定义事件名&#x27;,传递的数据)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>接收数据</p><ul><li>~~~javascript<br>eventBus.$on(‘自定义事件名’[,callback])<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 销毁事件中心</span><br><span class="line"></span><br><span class="line">  - ~~~javascript</span><br><span class="line">    eventBus.$off(&#x27;自定义事件名&#x27;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>**案例：<code>互相伤害</code>**（实现代码亦可查看<code>code/03组件通信：中央事件总线.html</code>文件）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        中央事件总线 / eventBus</span></span><br><span class="line"><span class="comment">        使用场景：实现非父子/子父关系的数据传递，典型的如：同级组件的数据通信</span></span><br><span class="line"><span class="comment">        使用步骤：</span></span><br><span class="line"><span class="comment">            a. 创建事件中心，其实就是一个vue实例，不需要组件选项，但是需要保存实例；</span></span><br><span class="line"><span class="comment">                    const eventBus = new Vue()</span></span><br><span class="line"><span class="comment">            b. 在发送数据方触发一个自定义事件并且传递数据；</span></span><br><span class="line"><span class="comment">                    eventBus.$emit(&quot;自定义事件名&quot;,数据)</span></span><br><span class="line"><span class="comment">            c. 在接收数据方监听自定义事件，并且接收数据；</span></span><br><span class="line"><span class="comment">                    eventBus.$on(&quot;自定义事件名&quot;,事件回调函数)</span></span><br><span class="line"><span class="comment">            d. 销毁事件中心（不再进行数据通信的情况下）【可选】；</span></span><br><span class="line"><span class="comment">                    eventBus.$off(&quot;自定义事件名&quot;)</span></span><br><span class="line"><span class="comment">        整体实现思路与子传父是一样的：通过触发自定义事件来传递数据</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            案例：互相伤害（回合制的游戏）</span></span><br><span class="line"><span class="comment">            有俩个人物（组件），其满HP是100，人物一可以在点击按钮后对人物二发动攻击，每次攻击扣减人物二4点hp；人物二每次点击按钮触发对人物一的攻击，每次攻击扣减人物一6点hp。直到有一方hp归零或小于，游戏结束。</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">             让俩个人物上场</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">zhangsan</span>&gt;</span><span class="tag">&lt;/<span class="name">zhangsan</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lisi</span>&gt;</span><span class="tag">&lt;/<span class="name">lisi</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 两人开打之前，先得找一个裁判(eventBus)来计分</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> eventBus = <span class="keyword">new</span> Vue()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 全局组件的使用：定义俩个人物（组件）</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 人物：法外狂徒</span></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">&quot;zhangsan&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 初始化人物数据</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 初始的生命值</span></span></span><br><span class="line"><span class="javascript">                    <span class="attr">hp</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">role_name</span>: <span class="string">&quot;法外狂徒&quot;</span>,</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 组件结构</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;角色名称：&#123;&#123;role_name&#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;角色血量：&#123;&#123;hp&#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;&lt;button @click=&quot;attack_lisi&quot;&gt;对“守法公民”发动攻击&lt;/button&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            `</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 方法集合</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">attack_lisi</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 告诉lisi：你需要扣减4点hp</span></span></span><br><span class="line"><span class="javascript">                    eventBus.$emit(<span class="string">&quot;notice_lisi&quot;</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 监听事件</span></span></span><br><span class="line"><span class="javascript">                eventBus.$on(<span class="string">&quot;notice_zhangsan&quot;</span>, <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(payload);</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.hp - payload &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// hp是够扣减的</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.hp -= payload</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (confirm(<span class="string">&quot;胜败乃兵家常事，大侠是否要充值一试？&quot;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.hp = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// hp是不够扣减的</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.hp = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                            alert(<span class="string">&#x27;Game Over!&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 游戏结束，销毁事件中心</span></span></span><br><span class="line"><span class="javascript">                            eventBus.$off(<span class="string">&quot;notice_zhangsan&quot;</span>)</span></span><br><span class="line"><span class="javascript">                            eventBus.$off(<span class="string">&quot;notice_lisi&quot;</span>)</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 人物：守法公民</span></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">&quot;lisi&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 初始化人物数据</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 初始的生命值</span></span></span><br><span class="line"><span class="javascript">                    <span class="attr">hp</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">role_name</span>: <span class="string">&quot;守法公民&quot;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 组件结构</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;角色名称：&#123;&#123;role_name&#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;角色血量：&#123;&#123;hp&#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;&lt;button @click=&quot;attack_zhangsan&quot;&gt;对“法外狂徒”发动攻击&lt;/button&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            `</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">attack_zhangsan</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 告诉lisi：你需要扣减4点hp</span></span></span><br><span class="line"><span class="javascript">                    eventBus.$emit(<span class="string">&quot;notice_zhangsan&quot;</span>, <span class="number">6</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 问：什么时候（生命周期）监听事件？</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 监听事件</span></span></span><br><span class="line"><span class="javascript">                eventBus.$on(<span class="string">&quot;notice_lisi&quot;</span>, <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(payload);</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.hp - payload &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// hp是够扣减的</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.hp -= payload</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (confirm(<span class="string">&quot;胜败乃兵家常事，大侠是否要充值一试？&quot;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.hp = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// hp是不够扣减的</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.hp = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                            alert(<span class="string">&#x27;Game Over!&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 游戏结束，销毁事件中心</span></span></span><br><span class="line"><span class="javascript">                            eventBus.$off(<span class="string">&quot;notice_zhangsan&quot;</span>)</span></span><br><span class="line"><span class="javascript">                            eventBus.$off(<span class="string">&quot;notice_lisi&quot;</span>)</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;&#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4、ref"><a href="#3-4、ref" class="headerlink" title="3.4、ref"></a>3.4、ref</h3><p>父去取子的数据信息。（方向：子-父，但是区别于之前的子传父，之前是主动，现在是被动）</p><p><code>ref</code>属性被用来给元素或子组件注册引用信息，引用信息将会注册在父组件的 <code>$refs</code> 对象上。如果在普通的 DOM 元素上使用<code>ref</code>属性，则引用指向的就是 DOM 元素；如果<code>ref</code>属性用在子组件上，引用就指向子组件<strong>实例</strong>。</p><ul><li><code>ref</code>放在标签上，拿到的是原生节点。<code>ref</code>放在组件上 拿到的是组件实例</li><li>原理：在父组件中通过<code>ref</code>属性（会被注册到父组件的<code>$refs</code>对象上）拿到组件/DOM对象，从而得到组件/DOM中的<strong>所有的信息</strong>，也包括值</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-comp</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-comp</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.p);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.child);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.comp.msg = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 修改值</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p><code>ref</code>属性这种获取子元素/组件的方式虽然写法简单，容易上手，但是其由于权限过于开放，不推荐使用，有安全问题。（不仅可以获取值，还可以获取其他所有的元素/组件的数据，甚至可以修改这些数据。）</p></blockquote><h2 id="4、动态组件"><a href="#4、动态组件" class="headerlink" title="4、动态组件"></a>4、动态组件</h2><p>通过使用保留的 <code>&lt;component&gt; </code>元素，动态地绑定到它的<code> is</code> 特性，==我们让多个组件可以使用同一个挂载点（位置），并动态切换。==</p><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 多个组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> home = &#123;&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> posts = &#123;&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">currentView</span>: <span class="string">&quot;home&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            home,</span></span><br><span class="line"><span class="javascript">            posts,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>keep-alive</strong>的作用：</p><p><code>keep-alive</code>可以将已经切换出去的非活跃组件保留在内存中。如果把切换出去的组件保留在内存中，可以保留它的状态，避免重新渲染。</p></blockquote><p><strong>案例：使用动态组件实现简易的步骤向导效果</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/74c301397cf23d1f0c58ce398c3d7fe73352ff44.gif?sign=82eb695c150acf8e3ce3ac7ec7e54009&t=5f5b549b" alt="简单步骤向导效果"></p><p><strong>案例参考代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;change(&quot;step1&quot;)&#x27;</span>&gt;</span>第一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;change(&quot;step2&quot;)&#x27;</span>&gt;</span>第二步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;change(&quot;step3&quot;)&#x27;</span>&gt;</span>第三步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> step1 = &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;这是第一步的操作&lt;/div&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> step2 = &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;这是第二步的操作&lt;/div&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> step3 = &#123;<span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;这是第三步的操作&lt;/div&gt;&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&quot;step2&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            step1,</span></span><br><span class="line"><span class="javascript">            step2,</span></span><br><span class="line"><span class="javascript">            step3</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">change</span>:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.name = name</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在动态组件中存在2个生命周期函数（需要配合keep-alive标签）：</p><p>​              activated：激活缓存组件的时候被触发</p><p>​              deactivated：离开缓存组件的时候被触发</p><p>​            当使用了keepalive组件后，组件在切换的时候就不会被销毁，而是被缓存起来了。【此处需要注意生命周期相关的执行情况】</p><p>上述2个周期函数与销毁2的2个周期函数如果都存在，则只会激活其中的一对（要么激活系列，要么销毁系列，可以看作激活系列是销毁系列的替代）。</p><p>如果使用了keepalive，则只有第一次渲染的时候会走前4个生命周期函数，后续再激活组件的时候，前四个周期就不会再产生触发效果。</p></blockquote><h2 id="5、插槽"><a href="#5、插槽" class="headerlink" title="5、插槽"></a>5、插槽</h2><p>插槽也是组件传值的一种方式。</p><p>组件的最大特性就是<code>重用</code>，而用好插槽能大大提高组件的可重用能力。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/ccc81e4e187bb6ac614d3d69724cb4c5342fed73.jpeg?sign=b0c53aaaa69c1bdfe25e76e303c54362&t=5f5b5665" alt="小霸王"></p><p><strong>插槽的作用：</strong>父组件（卡）向子组件（游戏机）传递内容。【插槽应该在子组件上】</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/c5ddf742613c5886ff140e5d381f9ff76a803d8b.jpeg?sign=59bc2dccbbaf747f12c649b7c17d9415&t=5f3a3981" alt="父组件向子组件传递内容"></p><p>通俗的来讲，<strong>插槽无非就是在<code>子组件</code>中挖个坑，坑里面放什么东西由<code>父组件</code>决定。</strong>（父-子）</p><p>插槽类型有：</p><ul><li>单个（匿名）插槽</li><li>具名插槽</li><li>作用域插槽</li></ul><h3 id="5-1、匿名插槽"><a href="#5-1、匿名插槽" class="headerlink" title="5.1、匿名插槽"></a>5.1、匿名插槽</h3><blockquote><p>匿名插槽一般就是使用单个插槽</p></blockquote><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插槽内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>Something bad happened.<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&quot;alert-box&quot;, &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;demo-alert-box&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：子组件的<code>slot</code>标签中允许书写内容，当父组件不往子组件传递内容时，<code>slot</code>中的内容才会被展示出来。</p></blockquote><h3 id="5-2、具名插槽"><a href="#5-2、具名插槽" class="headerlink" title="5.2、具名插槽"></a>5.2、具名插槽</h3><p><code>slot</code> 元素可以用一个特殊的特性 <code>name</code> 来进一步配置如何分发内容。多个插槽可以有不同的名字，具名插槽将匹配内容片段中有对应 <code>slot</code> 特性的元素。</p><p><strong><code>上中下</code>形式网页布局示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">app-layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">app-layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&quot;app-layout&quot;, &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>具名插槽存在的意义就是为了解决在单个页面中同时使用多个插槽。</p></blockquote><h3 id="5-3、作用域插槽"><a href="#5-3、作用域插槽" class="headerlink" title="5.3、作用域插槽"></a>5.3、作用域插槽</h3><p><strong>应用场景：</strong>父组件对子组件的内容进行加工处理</p><p>作用域插槽是一种<strong>特殊类型</strong>的插槽，<strong>作用域插槽会绑定了一套数据，父组件可以拿这些数据来用</strong>，于是，情况就变成了这样：样式父组件说了算，但父组件中内容可以显示子组件插槽绑定的数据。</p><p><strong>示例代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot-scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; props.text &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;slot text=&quot;我是子组件中的内容&quot;&gt;&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">`</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/06/360a1ba700307653250bf4d41a6ccda81e119f6f.png?sign=bee6f0444752dacfeecebb024b5997cd&t=60daa5b0"></p><h1 id="七、工程化"><a href="#七、工程化" class="headerlink" title="七、工程化"></a>七、工程化</h1><p>vue command line tool，简单的来讲，就是一个基于命令行的vue开发工具。</p><p><strong>Vue-CLI ≠ Vue</strong>，Vue-CLI就是一个Vue工具。</p><p>vue脚手架工具</p><h2 id="1、单文件组件"><a href="#1、单文件组件" class="headerlink" title="1、单文件组件"></a>1、单文件组件</h2><p>在很多 Vue 项目中，我们使用 Vue.component 来定义全局组件，紧接着用 new Vue({ el: ‘#container ‘}) 在每个页面内指定一个容器元素。这种方式在很多中小规模的项目中运作的很好，在这些项目里 JS 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由JS驱动的时候，下面这些缺点将变得非常明显：</p><ul><li>所有的组件都放同一个html文件中</li><li>没有构建步骤(build操作)，不能使用npm来管理项目</li><li>缺乏语法高亮和提示</li><li>没有针对单个组件的css样式支持</li></ul><p>针对于上述的问题，vue框架发布了<code>vue-cli</code>项目<code>生成</code>工具，Vue-cli是一个基于 Vue.js 进行快速开发的完整系统， 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/06/49ef84aa819fb546d90fbc68bdf652d5ef883ab3.png?sign=700ff63c1d28e5bf1b0fdd612a30ac6d&t=60daccd0" alt="单文件组件"></p><p>单文件组件的要求：</p><ul><li>后缀必须是“.vue”</li><li>需要使用三个标签将整个文件分成3部分<ul><li>template标签：包裹的是html部分（视图部分）【必须要有的】</li><li>script标签：包裹的是JavaScript部分（逻辑部分）【必须要有的】<ul><li>css-in-js：在JavaScript中写样式</li></ul></li><li>style标签：包裹的css/scss/less等样式部分（样式部分）【可以没有】<ul><li>样式存在范围的问题的<ul><li>有“scoped”属性则表示该组件的样式代码只在当前组件生效</li><li>如果没有“scoped”属性则表示该组件的样式会影响自己及后代，一般在工程化开发的模式中，只有根组件“App.vue”不写“scoped”属性（全局样式）</li></ul></li></ul></li></ul></li><li>其他的语法与之前的一致</li><li>单文件组件只是工程化中的一个文件，无法单独运行，必须在项目中运行</li></ul><h2 id="2、工具安装"><a href="#2、工具安装" class="headerlink" title="2、工具安装"></a>2、工具安装</h2><p>网址：<a href="http://npmjs.com/">http://npmjs.com</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -g：全局安装</span></span><br><span class="line">npm i -g @vue/cli</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装成功后，检查</span></span></span><br><span class="line">vue --version</span><br><span class="line">vue -V</span><br><span class="line"><span class="meta">#</span><span class="bash">  Vue和VueCLI是两回事</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 卸载（了解）</span></span></span><br><span class="line">npm uninstall -g @vue/cli</span><br></pre></td></tr></table></figure><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/0a637b8f10a340665538af6f079480dabf686f21.png?sign=d4b0bcdfcda0c91a18b1212f24892c5d&t=5f63af2f" alt="版本检查"></p><blockquote><p>如果需要安装其他版本，可以使用<code>npm install -g @vue/cli@版本号</code>的方式进行指定版本。</p></blockquote><p>如果最新版安装不成功，可以尝试以下几种方式去解决：</p><ul><li>断网，使用热点共享流量去执行安装命令</li><li>安装其他版本</li><li>切换一下npm镜像源，切换成taobao</li><li>卸载nodejs重安装</li><li>重装系统/换电脑</li></ul><h2 id="3、创建项目"><a href="#3、创建项目" class="headerlink" title="3、创建项目"></a>3、创建项目</h2><p>脚手架创建初始项目的方式有2种：</p><ul><li><p>通过UI界面方式去创建（了解）</p><ul><li><p>在命令行中输入以下命令启动UI界面：</p></li><li><p>~~~shell<br>vue ui</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 通过命令行的方式切创建（推荐）</span><br><span class="line"></span><br><span class="line">  - 执行命令：</span><br><span class="line"></span><br><span class="line">  - ~~~shell</span><br><span class="line">    vue create 项目名</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先需要进入到对应的目录中(英文目录不要有空格及中文),执行如下命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果当前你的终端工作路径带有中文或者空格，你可以使用`<span class="built_in">cd</span> 路径`形式进行路径切换，切换到符合要求的路径中</span></span><br><span class="line">vue create 项目名称(创建时会自己以对应的项目名称生成目录)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 例</span></span></span><br><span class="line">vue create myproject</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上述命令中，可以允许变的就是`myproject`部分</span></span><br></pre></td></tr></table></figure><p><strong>以下步骤以<code>Vue CLI v4.5.6</code>为例，仅供参考，在实际使用时，请以自身需求为准进行配置</strong></p><ul><li>预设选择</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/3306e33dc3e5d81070a8dc78b02d897565e97ad7.png?sign=c5f7873bfe1db941667c2c8f4c1660bf&t=5f6725b8" alt="预设选择"></p><ul><li>选择预设功能（<strong>根据自身项目需要选择</strong>）</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/983429d74ae8a2b0bcbe6989c9ba9222a7ef6c2a.png?sign=cc4159e20f273686b40ac1c0caac9d05&t=5f672644" alt="预设功能选择"></p><ul><li>选择Vue版本</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/675e2b02b44d13452ad50edff22290e7940cd982.png?sign=59a0c6ddfea13fde357d1f384296978e&t=5f67266e" alt="vue版本选择"></p><ul><li>选择<code>ESlint</code>配置（如果启用）</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/82a888c3ce2ab58c6f0af95423d671b7def7c823.png?sign=1f6540c77f791528813ac36e2de731c3&t=5f6726bb" alt="eslint"></p><ul><li>选择额外的<code>eslint</code>功能</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/43ca4b950cee6c4b437521ce5eda7d7435c2488a.png?sign=fe94111f1dd389c051af27ede9dd231f&t=5f67278e" alt="额外lint选配"></p><ul><li>是否独立配置</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/c73968823c3540002ba7365381f9a2d075c15ac4.png?sign=2baba46888f7a176c6d27f3441522b1a&t=5f6727b1" alt="是否独立配置"></p><ul><li>是否保存本次操作预设</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/4f8734a2d5581a1616b4ebfe1117b6b2fa322618.png?sign=beda5914c014f84d5a02b61f89c49ca8&t=5f6727eb" alt="保存预设"></p><ul><li>项目创建成功</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/74b3f1f5a30596606c16b93fc24ab018e6e98487.png?sign=531f60f30c89e95c6718fad45ee248d0&t=5f6728ae" alt="创建成功"></p><h2 id="4、目录结构介绍"><a href="#4、目录结构介绍" class="headerlink" title="4、目录结构介绍"></a>4、目录结构介绍</h2><ul><li><p>public：不需要去改动现有的文件，里面存放的是浏览器访问的入口文件（index.html）</p></li><li><p>src（<strong>后期很多操作都在这个目录中完成</strong>）</p><ul><li>main.js：项目/程序入口文件 （该文件中JavaScript代码都会被执行）</li><li>App.vue：根组件（万物之根）</li><li>components：存放自定义的<code>功能</code>组件（涉及到业务逻辑）</li><li>assets：静态资源目录（图片、视频、音频等就是静态资源），这里面的静态资源浏览器是无法直接访问的，而是给组件通过模块化的方式导入进组件使用的。<ul><li>项目中的静态资源有2个地方可以放<ul><li>public：供在public/index.html中直接引入（link标签、script标签）的</li><li>src/assets：供单文件组件导入时需要的静态资源文件（import …）</li></ul></li></ul></li><li><strong>views：（当前是没有的，但是后期要用）存放<code>视图</code>组件的</strong>（只是涉及到页面的布局排版）</li></ul></li></ul><p>如何很好的划分功能组件与视图组件呢？</p><p>小技巧：可以被复用的就算它功能组件，不能被复用的就算它是视图组件。</p><p>补充：（readme.md文件中的内容）后续入职的时候项目给到的代码可能不不包含node_modules目录，需要自己执行<code>npm i</code>，随后项目才完整。</p><h2 id="5、项目的运行及注意事项"><a href="#5、项目的运行及注意事项" class="headerlink" title="5、项目的运行及注意事项"></a>5、项目的运行及注意事项</h2><h3 id="5-1、项目的启停"><a href="#5-1、项目的启停" class="headerlink" title="5.1、项目的启停"></a>5.1、项目的启停</h3><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/74b3f1f5a30596606c16b93fc24ab018e6e98487.png?sign=531f60f30c89e95c6718fad45ee248d0&t=5f6728ae" alt="创建成功"></p><p>如上图所示，在创建项目完成后有提示我们后续的操作：</p><ul><li>在命令行中进入项目目录</li><li>运行<code>npm run serve</code>命令来启动项目</li></ul><p>按照上述命令执行后，我们会见到如下的效果，即表示项目运行成功：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/1335f9133e19d0a1d6b2f629bc8b7bde9a0868d8.png?sign=5b56d2e029b8969783fd1c82dc299261&t=5f683757" alt="项目启动成功"></p><blockquote><p> 注意：默认端口号会从8080开始，如果再次启动其他项目后续会以8081、8082……进行监听。</p></blockquote><p>如果需要停止正在运行的项目，可以选择以下两种方式任一：</p><ul><li>关闭终端</li><li>在终端中按下组合键<code>Ctrl + C</code>（Cancel），随后选择<code>Y</code>并键入<code>回车</code>（如下图）</li><li>也可以按下两次<code>Ctrl + C</code></li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/987aba14adc55be552add382c8c565d82dbf5b90.png?sign=ffaad83e946c9b1205a489388dc64adc&t=5f68396c" alt="关闭项目运行"></p><blockquote><p>部分同学的机器在启动vue项目的时候可能会出现卡在“40%”的进度并且长时间不动，如果这样，则直接<code>Ctrl + C</code>停止本次启动，重新再去尝试启动。</p></blockquote><p>==关于项目运行时，如果修改了项目代码是否需要重启的说明：==</p><p>是否需要重启取决于我们修改了什么内容，如果只是修改了代码部分（js、css、vue文件等）是不需要开发者手动重启项目的，系统会自动重新编译（有点nodemon感觉）；但是如果修改的是配置文件，则必须需要自己先去停止项目，然后再去启动项目（手动实现重启）。</p><h3 id="5-2、关于ESlint"><a href="#5-2、关于ESlint" class="headerlink" title="5.2、关于ESlint"></a>5.2、关于ESlint</h3><p>ESlint用于规范项目的编码，大型项目一般多人开发，为了避免一些个人编程恶习<code>坑自己坑别人</code>，项目中使用了ESlint会起到<code>紧箍咒</code>的作用，强制开发人员注意代码规范。例如，在不使用ESlint的情况下，JS允许我们声明一个不变量但不使用。如果使用了ESlint，在上述情况下会报错如下：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/b83ccf704842a3a495c99aba44baa772ede48a7b.png?sign=787cecc32474ee8d85b6b6a6ffd1116c&t=5f6838c1" alt="eslint报错演示"></p><p>关于ESlint的报错，有一份错误参照，可以访问以下地址查看：<a href="https://cn.eslint.org/docs/rules/">https://cn.eslint.org/docs/rules/</a></p><p>在前期学习阶段不建议去使用ESlint，所以待会会重新创建一个不带有<code>eslint</code>的项目来学习路由的使用。但是，以后企业中开发项目的时候都会启用eslint。</p><h1 id="八、路由"><a href="#八、路由" class="headerlink" title="八、路由"></a>八、路由</h1><h2 id="1、路由的概念（了解）"><a href="#1、路由的概念（了解）" class="headerlink" title="1、路由的概念（了解）"></a>1、路由的概念（了解）</h2><p>路由的本质就是一种<code>对应关系</code>（此处的路由含义同之前nodejs的路由），根据不同的URL请求，返回对应不同的资源。那么url地址和真实的资源之间就有一种对应的关系，就是路由。</p><p>路由分为：<code>后端路由</code>和<code>前端路由</code></p><ul><li>后端路由：由服务器端进行实现并实现资源映射分发（nodejs、jsp、php等）<ul><li>概念：根据不同的用户URL请求，返回不同的内容（<strong>地址与资源</strong>产生对应关系）</li><li>本质：URL请求地址与服务器资源之间的对应关系（映射）</li></ul></li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/a832ee01e808edae5e035257d6d9b65411ca0142.jpeg?sign=2a588882a568365ae19f525571bce452&t=5f3e3ebf" alt="后端路由"></p><ul><li>前端路由：根据不同的<strong>事件</strong>来显示不同的页面内容，是事件与事件处理函数之间的对应关系<ul><li>概念：根据不同的用户事件，显示不同的页面内容（<strong>地址与事件</strong>产生对应关系）</li><li>本质：用户事件与事件处理函数之间的对应关系</li></ul></li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/2bddc42178c6449942b3dfe53187a890a20f4c9f.png?sign=c895f41a55db1f871fee8c98db306c8e&t=5f3e41f2" alt="前端路由"></p><p>记住一句话：有请求就应该有响应，只不过区别在于，之前node是响应资源，现在在前端中通过事件来进行响应。</p><h2 id="2、前端路由实现（了解）"><a href="#2、前端路由实现（了解）" class="headerlink" title="2、前端路由实现（了解）"></a>2、前端路由实现（了解）</h2><blockquote><p>面试题：请你说出前端路由是怎么实现的？或者有哪几种实现方式？</p><p>答：前端路由模式有两种实现方式：hash方式、history方式。</p></blockquote><p>核心思想：通过<strong>监听</strong>地址栏的变化<strong>事件</strong>来实现资源的动态显示</p><p>前端路由有2种模式：</p><ul><li>hash模式</li></ul><blockquote><p> hash路由模式是这样的：<a href="http://xxx.abc.com/#/xx%E3%80%82">http://xxx.abc.com/#/xx。</a> 有带#号，后面就是hash值的变化。改变后面的hash值，它不会向服务器发出请求，因此也就不会刷新页面。并且每次hash值发生改变的时候，会触发hashchange事件。因此我们可以通过监听该事件，来知道hash值发生了哪些变化。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 通过 location.hash 获取到最新的 hash 值</span></span><br><span class="line">  <span class="built_in">console</span>.log(location.hash);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>history模式</li></ul><blockquote><p>形如：<a href="http://xxx.abc.com/xx/yy/zz%E3%80%82HTML5%E7%9A%84History">http://xxx.abc.com/xx/yy/zz。HTML5的History</a> API为浏览器的全局history对象增加了该扩展方法。它是一个浏览器（bom）的一个接口，在window对象中提供了onpopstate事件来监听历史栈的改变，只要历史栈有信息发生改变的话，就会触发该事件。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.pushState(&#123;&#125;,title,url); <span class="comment">// 向历史记录中追加一条记录</span></span><br><span class="line">history.replaceState(&#123;&#125;,title,url); <span class="comment">// 替换当前页在历史记录中的信息。</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;popstate&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(event)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注：浏览器地址没有#， 比如(<a href="http://localhost:3001/a">http://localhost:3001/a</a>); 它也一样不会刷新页面的。但是url地址会改变。<strong>但它在服务器没有配置的情况下，不能手动刷新，否则返回404页面</strong></p></blockquote><p><strong>hash</strong>路由体验</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/a&quot;</span>&gt;</span>去a页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/b&quot;</span>&gt;</span>去b页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/c&quot;</span>&gt;</span>去c页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/d&quot;</span>&gt;</span>去d页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;route-view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取元内容素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ctn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;route-view&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 默认渲染</span></span></span><br><span class="line"><span class="javascript">    render(<span class="string">&#x27;/a&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听hashchange事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        render(location.hash.slice(<span class="number">1</span>))</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 分支</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">router</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span> (router) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;/a&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                ctn.innerHTML = <span class="string">&#x27;这是a页面&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;/b&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                ctn.innerHTML = <span class="string">&#x27;这是b页面&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;/c&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                ctn.innerHTML = <span class="string">&#x27;这是c页面&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;/d&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                ctn.innerHTML = <span class="string">&#x27;这是d页面&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">                ctn.innerHTML = <span class="string">&#x27;404页面&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、Vue-Router（重点）"><a href="#3、Vue-Router（重点）" class="headerlink" title="3、Vue Router（重点）"></a>3、Vue Router（重点）</h2><p>网址：<a href="https://router.vuejs.org/zh/%EF%BC%8Cvuerouter%E6%98%AFvue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8B%E4%B8%80%E3%80%82">https://router.vuejs.org/zh/，vuerouter是vue全家桶之一。</a></p><p><strong>此处建议创建一个不带<code>ESlint</code>、Router的vue项目。</strong></p><h3 id="3-1、介绍"><a href="#3-1、介绍" class="headerlink" title="3.1、介绍"></a>3.1、介绍</h3><p><strong>Vue Router 是 Vue.js 官方的路由管理器</strong>。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p><ul><li><p>嵌套的路由（套娃，父子路由）</p></li><li><p><strong>模块化</strong>的、基于组件的路由配置</p></li><li><p>路由参数、查询、通配符</p></li><li><p>带有自动激活（默认选中效果）的 CSS class 的链接</p></li><li><p>HTML5 历史模式或 hash 模式</p></li></ul><h3 id="3-2、安装"><a href="#3-2、安装" class="headerlink" title="3.2、安装"></a>3.2、安装</h3><p>如果在vue-cli创建项目时没有勾选上<code>vue-router</code>选项，此时就需要手动的来安装它（<strong>切记，要进入项目中再去运行这个指令</strong>）：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -S vue-router</span><br></pre></td></tr></table></figure><p>查看是否安装成功，查看此文件<code>/package.json</code></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/da67726d850713a81b814a877c862431a1740a5c.png?sign=f20b3897f66ca81281c00986e18faee3&t=5f67297b" alt="vue-router安装成功检查"></p><h3 id="3-3、Vue-Router基本使用"><a href="#3-3、Vue-Router基本使用" class="headerlink" title="3.3、Vue Router基本使用"></a>3.3、Vue Router基本使用</h3><p>Vue Router的基本使用步骤：</p><ul><li>在src/创建路由文件的归档目录“router”</li><li>引入相关库文件</li><li>VueRouter引入到Vue类中</li><li><strong>定义路由组件规则</strong></li><li>创建路由实例</li><li>把路由挂载到Vue根实例中</li><li><strong>添加路由组件渲染容器（router-view，组件）到对应组件中（占坑）</strong><ul><li>情况1：放在根组件中</li><li>情况2：放在嵌套路由中的父组件中</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入相关库文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// VueRouter引入到Vue类中</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件的引入</span></span><br><span class="line"><span class="keyword">import</span> Foo <span class="keyword">from</span> <span class="string">&#x27;./views/Foo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Bar <span class="keyword">from</span> <span class="string">&#x27;./views/Bar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由规则</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/bar&#x27;</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">  <span class="comment">// routes: anyname</span></span><br><span class="line">  <span class="comment">// 传递规则的时候，传递的规则的属性名必须是`routes`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露router让外界使用（默认导出，一个模块只能默认导出1次）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"><span class="comment">// =====================================</span></span><br><span class="line"><span class="comment">// 挂载根实例（main.js）</span></span><br><span class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></span><br><span class="line"><span class="comment">// 从而让整个应用都有路由功能</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;!-- html，添加路由组件渲染容器 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li>后期在项目中以<code>index</code>命名的文件在引入时，可以省去文件名不写。</li><li>在<code>import</code>的时候如果涉及到了路径，建议写<code>@</code>符号开头的路径（<code>@表示src目录</code>，这个操作是打包工具已经帮我们定义好了，vue-cli的功劳，后续webpack再去说明）</li><li>名称的规范：<ul><li>在<code>创建路由实例</code>的时候要去其属性名必须是<code>routes</code></li><li>在<code>挂载路由实例到根实例</code>的时候要求属性名必须是<code>router</code></li><li>请注意大小写</li></ul></li></ul></blockquote><p><strong>示例代码：</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/00810b3416ddd643264759afc7ad02b9d6833a82.png?sign=60800f7e2d3ebbcba55de10b29593aea&t=5f6871ac" alt="routes/index.js"></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/d98d49a6c9f0358740b11c9b542b37ab51b44897.png?sign=2cf1003937bef9dc2ed1f55e790d3a28&t=5f6871e0" alt="main.js"></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/1d97fb78f01c15d2cdaca96b6d110431802e46e8.png?sign=eb5a33ccb1361cb1f2cfcdd8d38b4a83&t=5f68720e" alt="app.vue"></p><p><strong>src/views/Hello.vue代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;这是hello页面&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>src/views/News.vue代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;这是新闻页面&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>实现效果：</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/2fd0e496a9ce93a7398722534ca24f93abf8cdd0.gif" alt="实现效果"></p><h3 id="3-4、路由模式切换"><a href="#3-4、路由模式切换" class="headerlink" title="3.4、路由模式切换"></a>3.4、路由模式切换</h3><p>vue-router中默认使用的是hash模式的路由，也就是前面介绍的地址栏中URL带有“#”的形式，如果需要切换成history模式，则可以在创建路由实例时进行指定，指定的配置项为<code>mode</code>，可选值：</p><ul><li>hash：<strong>默认</strong>，设置路由模式为hash路由</li><li>history：设置路由模式为history路由</li></ul><p>例如，如果我们想设置路由模式从<code>hash</code>改变为<code>history</code>则可以配置路由入口文件为：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/12/c735b5283efb3e76d43cf89b4b89c65dcba785c4.png?sign=6830b10dd2e39b531168ecd273d135cb&t=5fd8d66d"></p><h3 id="3-5、导航方式"><a href="#3-5、导航方式" class="headerlink" title="3.5、导航方式"></a>3.5、导航方式</h3><p>含义：从一个组件/地址去往另一个组件/地址的方式。</p><p>在页面中，导航实现有2种方式：</p><ul><li>声明式导航：通过点击链接实现的导航方式，例如HTML中的“<a>”标签，Vue中的“<router-link>”所实现的。（其性质与a标签的性质类似）</li><li>编程式导航：通过调用JavaScript形式API实现的导航方式，例如location.href实现的跳转效果</li></ul><h4 id="3-5-1、声明式导航"><a href="#3-5-1、声明式导航" class="headerlink" title="3.5.1、声明式导航"></a>3.5.1、声明式导航</h4><p>它就是先在页面中定义好跳转的路由规则，vueRouter中通过router-link组件来完成</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;path&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;path&#x27;&#125;&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;path&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;p&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">to 要跳转到的路由规则  string|object</span></span><br><span class="line"><span class="comment">to=&quot;users&quot;</span></span><br><span class="line"><span class="comment">:to=&quot;&#123;path:&#x27;path&#x27;&#125;&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">tag=&quot;tagName&quot;去指定声明式导航产生的链接所使用的标签，默认是a标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-2、编程式导航"><a href="#3-5-2、编程式导航" class="headerlink" title="3.5.2、编程式导航"></a>3.5.2、编程式导航</h4><p>简单来说，编程式导航就是通过<code>JavaScript</code>来实现路由跳转</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span> &#125;);</span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">username</span>:<span class="string">&quot;jack&quot;</span>&#125; &#125;);</span><br><span class="line"><span class="comment">// 不要将path属性与params属性一起使用，这样会导致params路由参数获取不到</span></span><br><span class="line"><span class="comment">// name属性可以与params属性传参一起使用</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123; <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span> , <span class="attr">params</span>: &#123;<span class="attr">id</span>:<span class="number">123</span>&#125; &#125;);</span><br><span class="line"><span class="built_in">this</span>.$router.go( n );<span class="comment">//n为数字  负数为回退</span></span><br><span class="line"><span class="built_in">this</span>.$router.back(); <span class="comment">// 返回上一页</span></span><br></pre></td></tr></table></figure><p><strong>注意点：</strong>编程式导航在跳转到与当前地址一致的URL时会报错，但这个报错不影响功能：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/ffae8bf7ff5e46907768198ed81ce996be3ee11f.png?sign=fdd95d31c85eedc806e8e5b0817fc555&t=5f68a439" alt="重复导航错误"></p><p>如果患有强迫症，可以在路由入口文件<code>index.js</code>中添加如下代码解决该问题：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该段代码不需要记，理解即可</span></span><br><span class="line"><span class="keyword">const</span> originalPush = VueRouter.prototype.push;</span><br><span class="line">VueRouter.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> originalPush.call(<span class="built_in">this</span>, location).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> err);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>面试题问题：<code>this.$router</code>与<code>this.$route</code>有什么区别？</strong></p><p>答：<code>$router</code>是用于做编程式导航的（改变路由的）；<code>$route</code>是用户获取路由信息的。</p><h3 id="3-6、路由重定向"><a href="#3-6、路由重定向" class="headerlink" title="3.6、路由重定向"></a>3.6、路由重定向</h3><ul><li>概念：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面</li><li>实现： 通过路由规则的<code>redirect</code>属性，指定一个新的路由地址，可以很方便地设置路由的重定向</li></ul><p><strong>代码示例</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// routes是路由规则数组 </span></span></span><br><span class="line"><span class="javascript">    <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 每个路由规则都是个配置对象，至少有path和component两个属性（重定向除外）</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// path表示当前路由规则匹配的hash地址 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// component表示当前路由规则对应要展示的组件</span></span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: User &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">component</span>: Register &#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>component属性是可选属性，因此在写的时候需要注意，写错了也不会报错的。</p></blockquote><h3 id="3-7、嵌套路由（重点）"><a href="#3-7、嵌套路由（重点）" class="headerlink" title="3.7、嵌套路由（重点）"></a>3.7、嵌套路由（重点）</h3><p>路由前缀： <strong>/admin/user</strong>/add    <strong>/admin/user</strong>/del   <strong>/admin/user</strong>/mod</p><p>相同部分可以<strong>提取</strong>出来，减少重复劳动。</p><p>————————————以上为nodejs中的概念————————————————</p><p>上述概念在vue中被称之为叫做嵌套路由。</p><p>套娃，可以按照之前的nodejs处的路由前缀去理解。（当有些路由有公共部分的前缀时，在vue中就可以使用嵌套路由）</p><p>嵌套路由最关键在于理解子级路由的概念：</p><p>比如我们有一个<code>/users</code>的路由，那么<code>/users</code>下面还可以添加子级路由，如:<code>/users/index</code>、<code>/users/add</code>等等，这样的路由情形称之为嵌套路由。</p><blockquote><p> 核心思想：在<strong>父路由组件</strong>的模板内容中添加子路由链接和子路由<strong>填充位（占坑）</strong>，同时在路由规则处为父路由配置<strong>children属性</strong>指定子路由规则：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">  &#123; </span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, </span><br><span class="line">      <span class="attr">component</span>: User, <span class="comment">//这个不能丢</span></span><br><span class="line">      <span class="comment">// 通过children属性为/user添加子路由规则</span></span><br><span class="line">      <span class="attr">children</span>:[</span><br><span class="line">          <span class="comment">// 子路由地址前不能写“/”，如果写了则表示从根开始</span></span><br><span class="line">          &#123; <span class="attr">path</span>: <span class="string">&quot;index&quot;</span>, <span class="attr">component</span>: Index &#125;,</span><br><span class="line">          &#123; <span class="attr">path</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">component</span>: Add &#125;,</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要在 User组件中定义一个router-view 用于嵌套路由的渲染显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-8、404路由"><a href="#3-8、404路由" class="headerlink" title="3.8、404路由"></a>3.8、404路由</h3><p>作用：用于处理当路由匹配不上的时候页面的展示（不做404路由，则页面限时白板页面）</p><p>由于Vue路由是<strong>从上到下执行</strong>的，<strong>只要在路由配置规则中最后面放个*号（通配符）路由就可以了</strong>，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/hello&quot;</span>, <span class="attr">redirect</span>: Hello &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">component</span>: About &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/news&quot;</span>, <span class="attr">component</span>: News &#125;,</span><br><span class="line">    <span class="comment">// 404路由</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>, <span class="attr">component</span>: NotFound &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>问题：正常情况下404找不到会有状态码，是404，请问，为什么我们现在看到的状态码是200？</p><p>答：目前是在做前端开发，不是后端开发，无法指定返回的状态码，等到vue项目上线后可以与后端服务器结合实现状态码的指定。</p><h3 id="3-9、动态路由匹配（重点）"><a href="#3-9、动态路由匹配（重点）" class="headerlink" title="3.9、动态路由匹配（重点）"></a>3.9、动态路由匹配（重点）</h3><blockquote><p>本节知识点就是为了restful服务的，看如果在vue中使用restful形式进行<strong>参数传递</strong>。</p></blockquote><p>所谓动态路由就是路由规则中有部分规则是动态变化的，不是固定的值，需要去匹配取出数据（即<code>路由参数</code>）。</p><ul><li>如何传递<ul><li>在声明路由的时候，将可变部分通过“<code>:变量名</code>”的形式进行替代</li></ul></li><li>如何获取<ul><li>获取this.$route来获取</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传递参数id</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// routes是路由规则数组 </span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: User &#125;,</span><br><span class="line">        <span class="comment">// 此处的“:”只是在声明的时候写，在使用的时候不需要写“:”</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件视图中获取id值（html-vue形式组件）</span></span><br><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User ID is &#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 单文件形式的组件, 可以在视图中直接接收路由参数，但是一般不这么用 --&gt;</span><br><span class="line">        这是news组件&#123;&#123;$route.params.id&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>路由规则中的“:”只是在声明的时候写，在使用的时候不需要写“:”，例如如下代码：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/25307732297b5b553fed47d882adcf6f1c48dd0f.png?sign=044378c5358328bb077579da2ac5276e&t=5f69759e" alt="编程式导航"></p><p>问题：如上代码，如果路由规则里声明需要传递参数，但是实际使用的时候没传递参数会怎么样？</p><p>答：如果声明需要传递参数，但是实际不传的话则会影响落地页的显示，显示成白板（但是不报错）。但是如果有404路由在规则的最后，则匹配404路由。</p><p><strong>注意：在实际开发的时候会有可能需要传参也可能不需要传参的情况，这个时候需要用到<code>可选路由参数</code>点。</strong></p><p>定义可选路由参数的方式很简单，只需要在原有的路由参数声明位置后面加上个<code>?</code>即可。例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&quot;showdetail/:id?&quot;</span>, <span class="attr">component</span>: ShowDetail &#125;,</span><br></pre></td></tr></table></figure><h3 id="3-10、命名路由（可选）"><a href="#3-10、命名路由（可选）" class="headerlink" title="3.10、命名路由（可选）"></a>3.10、命名路由（可选）</h3><p>命名路由：路由别名，顾名思义就是给路由起名字（外号）。</p><p>例如：阿列克赛·马克西莫维奇·彼什科夫                    （高尔基）</p><p>通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: User</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明路由 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123; id: 123 &#125;&#125;&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问：一般什么使用用命名路由？</p><p>答：当路由本身的path写法比较长的时候，建议写命名的方式。而且需要注意，如果使用的是path写法，则当path发生变化后，其对应的导航地址也需要跟着变化。但是如果使用了别名则不用理会path内容的变化（只要名子不变就没事）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nodejs+express框架+mongodb项目实战</title>
      <link href="/2021/07/22/nodejs-ejs-mongodb%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
      <url>/2021/07/22/nodejs-ejs-mongodb%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="项目概括"><a href="#项目概括" class="headerlink" title="项目概括"></a>项目概括</h2><h3 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h3><p>   设计一个博客文章管理系统，使之具有管理员登录验证、密码加密、显示、新增、修改、删除、查询用户和文章、数据分页、退出登录等功能。</p><h3 id="数据库集合信息"><a href="#数据库集合信息" class="headerlink" title="数据库集合信息"></a>数据库集合信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用户信息包括：用户编号，用户名，用户密码，用户性别，用户年龄</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="技术栈选择"><a href="#技术栈选择" class="headerlink" title="技术栈选择"></a>技术栈选择</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">后端技术栈：nodejs+mongodb+express框架+md5加密</span><br><span class="line">前端技术栈：html+css+js+jquery</span><br><span class="line">进程管理器：pm2</span><br></pre></td></tr></table></figure><h3 id="项目文件结构"><a href="#项目文件结构" class="headerlink" title="项目文件结构"></a>项目文件结构</h3><img src="https://img-blog.csdnimg.cn/7d61d901ca50477e8b36ca8897c98276.png"><h2 id="案例初始化"><a href="#案例初始化" class="headerlink" title="案例初始化"></a>案例初始化</h2><h3 id="建立项目所需文件夹"><a href="#建立项目所需文件夹" class="headerlink" title="建立项目所需文件夹"></a>建立项目所需文件夹</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public 静态资源</span><br><span class="line">models 数据库操作</span><br><span class="line">views 模板</span><br><span class="line">route 路由</span><br></pre></td></tr></table></figure><h3 id="初始化项目描述文件"><a href="#初始化项目描述文件" class="headerlink" title="初始化项目描述文件"></a>初始化项目描述文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用npm init -y  package.json 文件</span><br></pre></td></tr></table></figure><h3 id="下载项目所需要的第三方模块"><a href="#下载项目所需要的第三方模块" class="headerlink" title="下载项目所需要的第三方模块"></a>下载项目所需要的第三方模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express mongoose art-template express-art-template</span><br></pre></td></tr></table></figure><h3 id="创建网站服务器"><a href="#创建网站服务器" class="headerlink" title="创建网站服务器"></a>创建网站服务器</h3><p>根目录下的index.js 项目入口文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#引入express框架</span></span><br><span class="line">var express = require(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建网站服务器</span></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">#监听80端口</span></span><br><span class="line">app.listen(<span class="string">&quot;80&quot;</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">&quot;服务器已开启&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>models/db.js,代码如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#连接数据库</span></span><br><span class="line"><span class="comment">#引入系统模块mongoose</span></span><br><span class="line">var mongoose = require(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"><span class="comment">#数据库连接 27017是mongodb数据库的默认端口</span></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost:27017/blog&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connection.on(<span class="string">&quot;connected&quot;</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">#作为模块导出</span></span><br><span class="line">module.exports = mongoose</span><br></pre></td></tr></table></figure><h3 id="创建用户的集合"><a href="#创建用户的集合" class="headerlink" title="创建用户的集合"></a>创建用户的集合</h3><p>models/userModel.js,代码如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#引入数据库</span></span><br><span class="line">var mongoose = require(<span class="string">&quot;./db&quot;</span>)</span><br><span class="line"><span class="comment">#创建一个用户的模型</span></span><br><span class="line">var userSchema = mongoose.Schema(&#123;</span><br><span class="line">    name:String,</span><br><span class="line">    password:String,</span><br><span class="line">    sex:String,</span><br><span class="line">    age:Number</span><br><span class="line">&#125;,&#123;collection:<span class="string">&quot;user&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#通过用户模型创建一个可操控的模板</span></span><br><span class="line">var userModel = mongoose.model(<span class="string">&quot;user&quot;</span>,userSchema)</span><br><span class="line"><span class="comment">#导出模板</span></span><br><span class="line">module.exports = userModel</span><br></pre></td></tr></table></figure><h3 id="创建发布博文的集合"><a href="#创建发布博文的集合" class="headerlink" title="创建发布博文的集合"></a>创建发布博文的集合</h3><p>models/userModel.js,代码如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#引入数据库</span></span><br><span class="line">var mongoose = require(<span class="string">&quot;./db&quot;</span>)</span><br><span class="line"><span class="comment">#创建一个的模型</span></span><br><span class="line">var schema = mongoose.Schema(&#123;</span><br><span class="line">title:String,</span><br><span class="line">content:String,</span><br><span class="line">ctime: String,</span><br><span class="line">views: Number,</span><br><span class="line">user: &#123;<span class="built_in">type</span>:mongoose.Schema.Types.ObjectId, ref: <span class="string">&#x27;users&#x27;</span>&#125;</span><br><span class="line">&#125;,&#123;collection:<span class="string">&#x27;blogs&#x27;</span>&#125;)  </span><br><span class="line"><span class="comment">#通过模型创建一个模板</span></span><br><span class="line">var model = mongoose.model(<span class="string">&#x27;blogs&#x27;</span>,schema);</span><br><span class="line"><span class="comment">#导出模板</span></span><br><span class="line">module.exports = model</span><br></pre></td></tr></table></figure><h3 id="模板操作"><a href="#模板操作" class="headerlink" title="模板操作"></a>模板操作</h3><p>在根目录下的index.js,进行登录注册存储session和发布博文等一系列操作.代码如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var express = require(<span class="string">&quot;express&quot;</span>) //引入基于Node.js Web开发的exoress框架</span><br><span class="line">var path = require(<span class="string">&quot;path&quot;</span>) //引入path模块处理文件路径</span><br><span class="line">var app = express()//创建application对象</span><br><span class="line">var cpo = require(<span class="string">&quot;crypto&quot;</span>); //引入crypto模块来加密解密</span><br><span class="line">var session = require(<span class="string">&#x27;express-session&#x27;</span>); //引入处理session的模块</span><br><span class="line">var blogmodel = require(<span class="string">&#x27;./models/blogModel&#x27;</span>);//导入发布博文的集合</span><br><span class="line">var usermodel = require(<span class="string">&quot;./models/userModel&quot;</span>);//导入用户的集合</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">&quot;views&quot;</span>,path.join(__dirname,<span class="string">&quot;views&quot;</span>))//设置模板路径</span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;ejs&quot;</span>)//设置模板引擎ejs</span><br><span class="line"></span><br><span class="line">app.use(express.urlencoded(&#123;extended:<span class="literal">true</span>&#125;))//解析post请求的数据</span><br><span class="line">app.use(express.static(path.join(__dirname,<span class="string">&quot;public&quot;</span>)))//把这个public目录设置为静态目录</span><br><span class="line">app.use(session(&#123;  //中间件配置session</span><br><span class="line">secret: <span class="string">&#x27;young&#x27;</span>,</span><br><span class="line">cookie:&#123;</span><br><span class="line">maxAge: 10000000000000000  //设置session的保存时间（毫秒）</span><br><span class="line">&#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">//提交登录的post请求</span><br><span class="line">app.post(<span class="string">&quot;/find&quot;</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">    var results = cpo.createHash(<span class="string">&quot;md5&quot;</span>).update(req.body.pw).digest(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line">    usermodel.find(&#123;name:req.body.uname,password:results&#125;,<span class="keyword">function</span>(err,u)&#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">        <span class="keyword">if</span>(u.length&gt;0)&#123;</span><br><span class="line">            req.session.user = u[0]</span><br><span class="line">            res.redirect(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.send(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">//session保存（有个小bug这个中间件写到登录的post前面就没有存到session，一直执行最后一个条件）</span><br><span class="line">app.use(<span class="keyword">function</span>(req,res,next)&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.path.indexOf(<span class="string">&quot;reg&quot;</span>)&gt;0||req.path.indexOf(<span class="string">&quot;login&quot;</span>)&gt;0||req.path.indexOf(<span class="string">&quot;save&quot;</span>)&gt;0)&#123;</span><br><span class="line">        //如果是登录页和注册页 直接进去</span><br><span class="line">        next()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        // 不是登录 和 注册页面 的情况</span><br><span class="line">        <span class="keyword">if</span>(req.session.user)&#123;</span><br><span class="line">            // 如果有登录状态 直接进去</span><br><span class="line">            res.locals.user = req.session.user;</span><br><span class="line">            next()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            //没有就跳转到登录页</span><br><span class="line">            res.redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//发布博文的post请求</span><br><span class="line">app.post(<span class="string">&#x27;/saveblog&#x27;</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">var title = req.body.title;</span><br><span class="line">var content = req.body.content;</span><br><span class="line">var d = new Date();</span><br><span class="line">var ctime = d.getUTCFullYear()+<span class="string">&#x27;-&#x27;</span>+(d.getMonth()+1)+<span class="string">&#x27;-&#x27;</span>+d.getDate();</span><br><span class="line">var uid = req.body.uid;</span><br><span class="line">var blog = new blogmodel(&#123;</span><br><span class="line">title: title,</span><br><span class="line">content:content,</span><br><span class="line">ctime: ctime,</span><br><span class="line">views: 0,</span><br><span class="line">user: uid</span><br><span class="line">&#125;)</span><br><span class="line">blog.save(<span class="keyword">function</span>(err,blo)&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line">res.json(&#123;</span><br><span class="line">status:<span class="string">&#x27;fail&#x27;</span>,</span><br><span class="line">msg:<span class="string">&#x27;发表失败&#x27;</span>,</span><br><span class="line">data:err</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">res.json(&#123;</span><br><span class="line">status:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">msg:<span class="string">&#x27;发表成功&#x27;</span>,</span><br><span class="line">data:blo</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">//注册的post请求</span><br><span class="line">app.post(<span class="string">&quot;/save&quot;</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">    var username = req.body.uname;</span><br><span class="line">    var pw = req.body.pw;</span><br><span class="line">    var pw2 = req.body.pw2;</span><br><span class="line">    var sex = req.body.sex;</span><br><span class="line">    var results = cpo.createHash(<span class="string">&quot;md5&quot;</span>).update(pw).digest(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(username)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pw==pw2 &amp;&amp; pw &amp;&amp; pw2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sex)&#123;</span><br><span class="line">                var user =  new usermodel(&#123;</span><br><span class="line">                    name: username,</span><br><span class="line">                    password:results,</span><br><span class="line">                    sex:sex,</span><br><span class="line">                    age:req.body.age?req.body.age:0</span><br><span class="line">                &#125;)</span><br><span class="line">                user.save(<span class="keyword">function</span>(err,u)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                        res.send(<span class="string">&quot;注册失败&quot;</span>)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        res.redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.send(<span class="string">&quot;性别不能为空&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pw!=pw2)&#123;</span><br><span class="line">            res.send(<span class="string">&quot;两次密码不一致&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.send(<span class="string">&quot;密码不能为空&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.send(<span class="string">&quot;用户名不能为空&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//注册页路由</span><br><span class="line">app.get(<span class="string">&quot;/reg&quot;</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">    res.render(<span class="string">&quot;reg&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">//登录页路由</span><br><span class="line">app.get(<span class="string">&quot;/login&quot;</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">    res.render(<span class="string">&quot;login&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">//首页路由</span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">    res.render(<span class="string">&quot;index&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="string">&quot;80&quot;</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">&quot;服务器已开启&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="前端渲染数据"><a href="#前端渲染数据" class="headerlink" title="前端渲染数据"></a>前端渲染数据</h3><p>登录,views/login.ejs</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;login-box&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;login&quot;</span>&gt;</span><br><span class="line">            &lt;form action=<span class="string">&quot;/find&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;&lt;img src=<span class="string">&quot;/images/logo.jfif&quot;</span> width=<span class="string">&quot;40px&quot;</span> height=<span class="string">&quot;40px&quot;</span> style=<span class="string">&quot;margin-right:10px ;&quot;</span>&gt;猫咪老师博客&lt;/h1&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span> placeholder=<span class="string">&quot;请输入账号&quot;</span> value=<span class="string">&quot;xiazhi&quot;</span>&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pw&quot;</span> placeholder=<span class="string">&quot;请输入密码&quot;</span> value=<span class="string">&quot;1234&quot;</span>&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登&amp;nbsp;录&quot;</span> class=<span class="string">&quot;t1 btn&quot;</span>&gt;</span><br><span class="line">                &lt;a href=<span class="string">&quot;./index.html&quot;</span>&gt;</span><br><span class="line">                    &lt;input <span class="built_in">type</span>=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;返&amp;nbsp;回&quot;</span> class=<span class="string">&quot;t2&quot;</span>&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>注册,views/reg.ejs</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;reg-box&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;reg&quot;</span>&gt;</span><br><span class="line">            &lt;form action=<span class="string">&quot;/save&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;&lt;img src=<span class="string">&quot;images/logo.jfif&quot;</span> width=<span class="string">&quot;40px&quot;</span> height=<span class="string">&quot;40px&quot;</span> style=<span class="string">&quot;margin-right:10px ;&quot;</span>&gt;猫咪老师博客&lt;/h1&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span> placeholder=<span class="string">&quot;请输入账号&quot;</span>&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pw&quot;</span> placeholder=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pw2&quot;</span> placeholder=<span class="string">&quot;请再次输入密码&quot;</span>&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;sbox&quot;</span>&gt;</span><br><span class="line">                    &lt;span&gt;性别：&lt;/span&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;男&quot;</span>name=<span class="string">&quot;sex&quot;</span> class=<span class="string">&quot;sex&quot;</span> checked&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;女&quot;</span>name=<span class="string">&quot;sex&quot;</span> class=<span class="string">&quot;sex&quot;</span>&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;number&quot;</span> name=<span class="string">&quot;age&quot;</span> placeholder=<span class="string">&quot;年龄&quot;</span> max=<span class="string">&quot;100&quot;</span> min=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注&amp;nbsp;册&quot;</span> class=<span class="string">&quot;t1 btn&quot;</span>&gt;</span><br><span class="line">                &lt;a href=<span class="string">&quot;page/index.html&quot;</span>&gt;</span><br><span class="line">                    &lt;input <span class="built_in">type</span>=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;返&amp;nbsp;回&quot;</span> class=<span class="string">&quot;t2&quot;</span>&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>发布博文,views/header.js</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;write-bolg&quot;</span> id=<span class="string">&quot;wbox&quot;</span> style=<span class="string">&quot;display: none&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">            &lt;h2&gt;发博文&lt;/h2&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;topinp&quot;</span>&gt;</span><br><span class="line">                &lt;span&gt;标题：&lt;/span&gt;</span><br><span class="line">                &lt;input id=<span class="string">&quot;title&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;!-- &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;时间：2021-7-21 11:59:00&quot;</span> disabled=<span class="string">&quot;&quot;</span>&gt; --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;textarea id=<span class="string">&quot;content&quot;</span> cols=<span class="string">&quot;30&quot;</span> rows=<span class="string">&quot;10&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line">            &lt;input <span class="built_in">type</span>=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;uid&quot;</span> value=<span class="string">&quot;&lt;%= user._id %&gt;&quot;</span>&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;botinp&quot;</span>&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> onclick=<span class="string">&quot;add()&quot;</span> value=<span class="string">&quot;发博文&quot;</span> class=<span class="string">&quot;release&quot;</span>&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;button id=<span class="string">&quot;xbtn&quot;</span> class=<span class="string">&quot;xbtn&quot;</span>&gt;×&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="string">&quot;.xbtn&quot;</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            $(<span class="string">&quot;.write-bolg&quot;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">send</span></span>()&#123;</span><br><span class="line">            $(<span class="string">&quot;.write-bolg&quot;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;block&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">add</span></span>()&#123;</span><br><span class="line">        var t = document.getElementById(<span class="string">&#x27;title&#x27;</span>).value;</span><br><span class="line">        var uid = document.getElementById(<span class="string">&#x27;uid&#x27;</span>).value;</span><br><span class="line">        var content = document.getElementById(<span class="string">&#x27;content&#x27;</span>).value;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&#x27;/saveblog&#x27;</span>,</span><br><span class="line">            method:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            data:&#123;</span><br><span class="line">                title:t,</span><br><span class="line">                content:content,</span><br><span class="line">                uid: uid</span><br><span class="line">            &#125;,</span><br><span class="line">            success:<span class="keyword">function</span>(data)&#123;</span><br><span class="line">                $(<span class="string">&quot;.list-item&quot;</span>).parent().prepend(`</span><br><span class="line">        &lt;li class=<span class="string">&quot;list-item clearfix&quot;</span>&gt;</span><br><span class="line">                    &lt;div class=<span class="string">&quot;list-item-l&quot;</span>&gt;</span><br><span class="line">                        &lt;a href=<span class="string">&quot;#&quot;</span>&gt;</span><br><span class="line">                            &lt;img src=<span class="string">&quot;../images/xiazhilan.jfif&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">                        &lt;/a&gt;</span><br><span class="line">                        &lt;p&gt;Cat&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=<span class="string">&quot;list-item-r&quot;</span>&gt;</span><br><span class="line">                        &lt;p class=<span class="string">&quot;font-title&quot;</span>&gt;</span><br><span class="line">                            &lt;a href=<span class="string">&quot;../page/contentfont.html&quot;</span>&gt;<span class="variable">$&#123;data.data.title&#125;</span>&lt;/a&gt;</span><br><span class="line">                        &lt;/p&gt;</span><br><span class="line">                        &lt;p class=<span class="string">&quot;font-con&quot;</span>&gt;</span><br><span class="line">                            <span class="variable">$&#123;data.data.content&#125;</span></span><br><span class="line">                        &lt;/p&gt;</span><br><span class="line">                        &lt;p class=<span class="string">&quot;font-bot&quot;</span>&gt;</span><br><span class="line">                            &lt;span&gt; <span class="variable">$&#123;data.data.ctime&#125;</span>&lt;/span&gt;</span><br><span class="line">                            &lt;i class=<span class="string">&quot;iconfont&quot;</span>&gt;&amp;<span class="comment">#xe615;&amp;nbsp;$&#123;data.data.views&#125;&lt;/i&gt;</span></span><br><span class="line">                        &lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">        `)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">&quot;.write-bolg&quot;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这个项目静态页面差不多写了一天多，有点慢还需提速，html结构优化做的不够好，css的用法不够精练，nodejs用的一知半解，唯一收获就是大概明白了整个项目的流程,理解了模块化：将一个复杂的程序根据规范封装成几个快，并且组合在一起，块的内部数据和实现是私有的，只是向外部暴露了一些接口，然后与外部进行通信(连接？)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MangoDB笔记</title>
      <link href="/2021/07/21/MangoDB%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/21/MangoDB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/mongodb/60411?fr=aladdin">MangoDB</a>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展.MongoDB是工作在集合和文档上一种概念.集合是一组MongoDB的文件,它与一个RDBMS表是等效的.文档是一组键值对.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>如果想要快速上手,可以通过<a href="https://www.yiibai.com/mongodb/mongodb_quick_guide.html">易百教程</a>来学习.</p><h3 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h3><p><a href="https://baike.baidu.com/item/NoSQL/8828247?fr=aladdin">NOSQL</a>，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。<br>传统的数据库处理数据是由关系数据库管理系统（RDBMS）来处理的，关系型数据库遵循ACID规则，事务在英文中是transaction，和现实世界的交易很类似，它有四个特性也就是ACID规则的由来。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Atomicity原子性</span><br><span class="line">Consistency一致性</span><br><span class="line">Isolation独立性</span><br><span class="line">Durabiliy持久性</span><br></pre></td></tr></table></figure><h3 id="RDBMS-vs-NoSQL"><a href="#RDBMS-vs-NoSQL" class="headerlink" title="RDBMS vs NoSQL"></a>RDBMS vs NoSQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RDBMS</span><br><span class="line">- 高度组织化结构化数据</span><br><span class="line">- 结构化查询语言（SQL）</span><br><span class="line">- 数据和关系都存储在单独的表中</span><br><span class="line">- 数据操纵语言，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础事务</span><br><span class="line"></span><br><span class="line">NoSQL</span><br><span class="line">- 代表着不仅仅是SQL</span><br><span class="line">- 没有声明性查询语言</span><br><span class="line">- 没有预定义的模式</span><br><span class="line">- 键 - 值对存储，列存储，文档存储，图形数据库</span><br><span class="line">- 最终一致性，而非ACID属性</span><br><span class="line">- 非结构化和不可预知的数据</span><br><span class="line">- CAP定理</span><br><span class="line">- 高性能，高可用性和可伸缩性</span><br></pre></td></tr></table></figure><h3 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h3><p>CAP定理的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个.所以根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大</span><br><span class="line">CP - 满足一致性，分区容忍性的系统，通常性能不是特别高</span><br><span class="line">AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些</span><br></pre></td></tr></table></figure><p>分布式系统由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成.分布式系统是建立在网络之上的软件系统.</p><h3 id="mongodb命令"><a href="#mongodb命令" class="headerlink" title="mongodb命令"></a>mongodb命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看所有数据库 =&gt; show dbs</span><br><span class="line">查看所有集合 =&gt;show collections</span><br><span class="line">数据库切换创建 =&gt; use 数据库名称</span><br><span class="line">创建集合 =&gt; db.createCollection(<span class="string">&#x27;集合名称&#x27;</span>)</span><br><span class="line"></span><br><span class="line">查找数据 =&gt; db.集合名称.find(&#123;查找条件&#125;)</span><br><span class="line">查找数据且自带格式 =&gt; db.集合名称.find().pretty()</span><br><span class="line">插入数据 =&gt; db.集合名称.insert(&#123;name:<span class="string">&quot;zhangsan&quot;</span>,password:<span class="string">&quot;1234&quot;</span>&#125;)</span><br><span class="line">修改数据会被覆盖 =&gt; db.集合名称.update(&#123;查找条件&#125;,&#123;修改的数据&#125;)</span><br><span class="line">修改数据不会被覆盖 =&gt; db.集合名称.update(&#123;查找条件&#125;,&#123;<span class="variable">$set</span>:&#123;修改的数据&#125;&#125;)</span><br><span class="line">删除数据 =&gt; db.集合名称.remove(&#123;查找条件&#125;)</span><br><span class="line">删除集合 =&gt; db.集合名词.drop()</span><br><span class="line">删除数据库 =&gt; db.dropDatabase()</span><br><span class="line"></span><br><span class="line">高级查找数据</span><br><span class="line">=&gt; db.集合名称.find(&#123;查找条件&#125;,&#123;<span class="string">&#x27;需要显示的字段&#x27;</span>:1&#125;) 1显示 0不显示</span><br><span class="line">=&gt; db.集合名称.find(&#123;age:&#123;<span class="variable">$gt</span>:15&#125;&#125;) 大于15</span><br><span class="line">=&gt; db.集合名称.find(&#123;age:&#123;<span class="variable">$lt</span>:15&#125;&#125;) 小于15</span><br><span class="line">=&gt; db.user.find(&#123;</span><br><span class="line">    <span class="variable">$and</span>:[</span><br><span class="line">        &#123;sex:<span class="string">&quot;女&quot;</span>&#125;,&#123;height:&#123;<span class="variable">$gt</span>:160&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;) 身高大于160且为女生</span><br><span class="line"></span><br><span class="line">跳过2条数据 =&gt; db.集合名称.find().skip(2)</span><br><span class="line">限制多少条 =&gt; db.集合名称.find().<span class="built_in">limit</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="node操作数据库"><a href="#node操作数据库" class="headerlink" title="node操作数据库"></a>node操作数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入依赖</span></span><br><span class="line">var mongoose = require(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"><span class="comment">#连接mongodb数据库 student是数据库名</span></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost:27017/student&quot;</span>)</span><br><span class="line"><span class="comment">#实时监控连接状态</span></span><br><span class="line">mongoose.connection.on(<span class="string">&quot;connected&quot;</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  console.log(<span class="string">&quot;连接成功&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个user Schma</span></span><br><span class="line">var userSchema = mongoose.Schema(&#123;</span><br><span class="line">    id:String,</span><br><span class="line">    name:String</span><br><span class="line">&#125;,&#123;collection:<span class="string">&quot;user&quot;</span>&#125;) <span class="comment">#collection:&quot;user&quot; 指定集合</span></span><br><span class="line"><span class="comment">#通过user Schma创建一个Model &quot;user&quot;是表</span></span><br><span class="line">var userModel = mongoose.model(<span class="string">&quot;user&quot;</span>,userSchema)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询</span></span><br><span class="line"><span class="comment">#通过_id来查询数据</span></span><br><span class="line">userModel.findById(<span class="string">&quot;60f8d89ef1390ef4ac2ff4e3&quot;</span>,<span class="keyword">function</span>(err,u)&#123;</span><br><span class="line">    console.log(u)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">#通过Model来查询所有数据  参数1：错误信息 参数2：集合中的所有值</span></span><br><span class="line">userModel.find((err,user)=&gt;&#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">    console.log(user);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加</span></span><br><span class="line"><span class="comment">#使用userModel 创建一个&quot;user&quot;实例</span></span><br><span class="line">var user = new userModel(&#123;</span><br><span class="line">    id:1,</span><br><span class="line">    name:<span class="string">&quot;李四&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">#通过save方法保存到数据库 参数1：错误信息 参数2：保存后的值</span></span><br><span class="line">user.save((err,u)=&gt;&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">    console.log(u)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"><span class="comment">#通过_id来修改数据</span></span><br><span class="line">userModel.findByIdAndUpdate()</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="comment">#通过_id来删除数据</span></span><br><span class="line">userModel.findByIdAndRemove()</span><br></pre></td></tr></table></figure><h3 id="PM2"><a href="#PM2" class="headerlink" title="PM2"></a>PM2</h3><p> PM2简单来说可以理解为一个进程管理器，通过这个管理器你可以更方便的管控你的node进程。详细介绍可以到官方文档查看 <a href="https://pm2.keymetrics.io/docs/usage/quick-start/">pm2官方文档</a>;<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#安装PM2</span></span><br><span class="line">npm i -g pm2</span><br><span class="line"><span class="comment">#启动项目</span></span><br><span class="line">pm2 start index.js</span><br><span class="line"><span class="comment">#停止项目</span></span><br><span class="line">pm2 stop index.js</span><br><span class="line"><span class="comment">#查看启动列表</span></span><br><span class="line">pm2 list</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">pm2 delete 0</span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">pm2 restart 0</span><br><span class="line"><span class="comment">#查看打印日志</span></span><br><span class="line">pm <span class="built_in">log</span></span><br><span class="line"><span class="comment">#监听文件改动，自动重启</span></span><br><span class="line">pm2 start index.js --watch</span><br><span class="line"><span class="comment">#监控状态</span></span><br><span class="line">pm2 monit</span><br><span class="line"><span class="comment">#把项目设置成开机自动启动 (前提是要把项目启动)</span></span><br><span class="line">pm2 startup</span><br><span class="line">pm2 save</span><br><span class="line"><span class="comment">#取消开机启动</span></span><br><span class="line">pm2 unstartup</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mangodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Node.js》笔记</title>
      <link href="/2021/07/15/Node.js%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/15/Node.js%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/node.js/7567977?fr=aladdin">Node.js</a>发布于2009年5月，是一个基于Chrome V8引擎的JavaScript运行环境，使用了一个<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/9597519">事件驱动</a>、非阻塞式<a href="https://baike.baidu.com/item/i%2Fo/84718">I/O</a>模型。轻量而高效，非常适合在分布式设备上运行数据密集型的实时应用.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="http://nodejs.cn/">官网</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">通过node.js官网选择对应的版本进行安装，我这边下载的是v12.22.2版本（建议选择左边的稳定版本，右边的最新版本可能会出现莫名bug）</span><br></pre></td></tr></table></figure><h3 id="npm基本了解及命令"><a href="#npm基本了解及命令" class="headerlink" title="npm基本了解及命令"></a>npm基本了解及命令</h3><p><a href="https://www.npmjs.com/">npm</a>是随同node.js一起安装的包管理工具,能解决node.js代码部署上很多问题.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm init 初始化空项目,且自动生成一个package.json文件（定义包的属性）</span><br><span class="line">$ npm install &lt;模块名&gt; 用来安装模块</span><br><span class="line">$ npm i express 本地安装（安装项目依赖），加-g就是全局安装（安装工具）</span><br><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org 淘宝npm镜像</span><br><span class="line">$ npm ls 查看本目录模块,加-g查看所有全局安装</span><br><span class="line">$ npm i &lt;模块名&gt; --save-dev 安装模块写入package.json</span><br><span class="line">使用 --save-dev 安装的 插件，被写入到 devDependencies（开发环境）对象里面去</span><br><span class="line">使用 --save 安装的插件，则被写入到 dependencies（生产环境）对象里面去</span><br></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E5%8F%B7/7674145?fr=aladdin">版本号</a>: 一个标准的版本号必须是X.Y.Z的形式，X是主版本，Y是副版本，Z是补丁版本.</p><h3 id="node-js模块"><a href="#node-js模块" class="headerlink" title="node.js模块"></a>node.js模块</h3><p>在node环境中，一个.js文件就称之为一个模块（module）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nodejs模块系统共有四种类型的模块:原生模块 &gt; .js文件类型模块 &gt; .json模块 &gt; .node模块</span><br><span class="line">用require(<span class="string">&quot;./demo.js&quot;</span>) 来加载一个模块,require查找的优先级是从大小的</span><br><span class="line">module.exports = &#123;<span class="string">&quot;+&quot;</span>:add&#125; 导出模块 <span class="string">&quot;+&quot;</span>是对象 add是一个函数</span><br><span class="line">__dirname:当前目录信息</span><br><span class="line">__filename:当前文件的完整路径</span><br></pre></td></tr></table></figure><h3 id="fs文件管理"><a href="#fs文件管理" class="headerlink" title="fs文件管理"></a>fs文件管理</h3><p>node.js自带的模块</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var fs = require(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取文件信息</span></span><br><span class="line">fs.stat(<span class="string">&quot;./text&quot;</span>,(err,info)=&gt;&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">console.log(info.isFile())  <span class="comment">#判断是否为一个文件</span></span><br><span class="line">console.log(info.isDirectory()) <span class="comment">#判断是否是一个目录</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取文件内容</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./test.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,(err,info)=&gt;&#123;</span><br><span class="line">    <span class="comment">#err 是否报错</span></span><br><span class="line">    <span class="comment">#info 读取文件内容</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入文件信息</span></span><br><span class="line"><span class="comment">#第一个参数是文件路径，第二个参数是需要写入的内容(会覆盖原来的内容),最后一个参数是回调函数.</span></span><br><span class="line"><span class="comment">#第三个参数可以指定文件的位置</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#     r+ 打开文件用于读写。</span></span><br><span class="line"><span class="comment"># w+ 打开文件用于读写，将流定位到文件的开头。如果文件不存在则创建文件。</span></span><br><span class="line"><span class="comment"># a  打开文件用于写入，将流定位到文件的末尾。如果文件不存在则创建文件。</span></span><br><span class="line"><span class="comment"># a+ 打开文件用于读写，将流定位到文件的末尾。如果文件不存在则创建文件。</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">fs.writeFile(<span class="string">&quot;./text/txt&quot;</span>,<span class="string">&quot;11&quot;</span>,&#123;flag:<span class="string">&quot;w+&quot;</span>&#125;,(err)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;console.log(<span class="string">&quot;写入失败&quot;</span>)&#125;<span class="keyword">else</span>&#123;console.log(<span class="string">&quot;写入成功&quot;</span>)&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#appendFile 把内容插入到最后，同上但是没有第三个参数</span></span><br><span class="line"><span class="comment">#unlink 删除内容</span></span><br></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/MD5/212708?fr=aladdin">md5加密</a>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var cpo = require(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line">var results = cpo.createHash(<span class="string">&quot;md5&quot;</span>).update(<span class="string">&quot;xiazhi201226&quot;</span>).digest(<span class="string">&quot;hex&quot;</span>);console.log(results);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
