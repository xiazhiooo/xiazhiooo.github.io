<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《Node.js》笔记</title>
      <link href="/2021/07/15/Node.js%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/15/Node.js%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="http://nodejs.cn/">Node.js</a>发布于2009年5月，是一个基于Chrome V8引擎的JavaScript运行环境，使用了一个<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/9597519">事件驱动</a>、非阻塞式<a href="https://baike.baidu.com/item/i%2Fo/84718">I/O</a>模型。轻量而高效，非常适合在分布式设备上运行数据密集型的实时应用.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">通过[node.js官网](http://nodejs.cn/)选择对应的版本进行安装，我这边下载的是v12.22.2版本（建议选择左边的稳定版本，右边的最新版本可能会出现莫名bug）</span><br></pre></td></tr></table></figure><h3 id="npm基本了解及命令"><a href="#npm基本了解及命令" class="headerlink" title="npm基本了解及命令"></a>npm基本了解及命令</h3><p><a href="https://www.npmjs.com/">npm</a>是随同node.js一起安装的包管理工具,能解决node.js代码部署上很多问题.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm init 初始化空项目,且自动生成一个package.json文件（定义包的属性）</span><br><span class="line">$ npm install &lt;模块名&gt; 用来安装模块</span><br><span class="line">$ npm i express 本地安装（安装项目依赖），加-g就是全局安装（安装工具）</span><br><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org 淘宝npm镜像</span><br><span class="line">$ npm ls 查看本目录模块,加-g查看所有全局安装</span><br><span class="line">$ npm i &lt;模块名&gt; --save-dev 安装模块写入package.json</span><br><span class="line">使用 --save-dev 安装的 插件，被写入到 devDependencies（开发环境）对象里面去</span><br><span class="line">使用 --save 安装的插件，则被写入到 dependencies（生产环境）对象里面去</span><br></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E5%8F%B7/7674145?fr=aladdin">版本号</a>: 一个标准的版本号必须是X.Y.Z的形式，X是主版本，Y是副版本，Z是补丁版本.</p><h3 id="node-js模块"><a href="#node-js模块" class="headerlink" title="node.js模块"></a>node.js模块</h3><p>在node环境中，一个.js文件就称之为一个模块（module）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nodejs模块系统共有四种类型的模块:原生模块 &gt; .js文件类型模块 &gt; .json模块 &gt; .node模块</span><br><span class="line">用require(<span class="string">&quot;./demo.js&quot;</span>) 来加载一个模块,require查找的优先级是从大小的</span><br><span class="line">module.exports = &#123;<span class="string">&quot;+&quot;</span>:add&#125; 导出模块 <span class="string">&quot;+&quot;</span>是对象 add是一个函数</span><br><span class="line">__dirname:当前目录信息</span><br><span class="line">__filename:当前文件的完整路径</span><br></pre></td></tr></table></figure><h3 id="fs文件管理"><a href="#fs文件管理" class="headerlink" title="fs文件管理"></a>fs文件管理</h3><p>node.js自带的模块</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var fs = require(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取文件信息</span></span><br><span class="line">fs.stat(<span class="string">&quot;./text&quot;</span>,(err,info)=&gt;&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">console.log(info.isFile())  <span class="comment">#判断是否为一个文件</span></span><br><span class="line">console.log(info.isDirectory()) <span class="comment">#判断是否是一个目录</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取文件内容</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./test.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,(err,info)=&gt;&#123;</span><br><span class="line">    <span class="comment">#err 是否报错</span></span><br><span class="line">    <span class="comment">#info 读取文件内容</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入文件信息</span></span><br><span class="line"><span class="comment">#第一个参数是文件路径，第二个参数是需要写入的内容(会覆盖原来的内容),最后一个参数是回调函数.</span></span><br><span class="line"><span class="comment">#第三个参数可以指定文件的位置</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#     r+ 打开文件用于读写。</span></span><br><span class="line"><span class="comment"># w+ 打开文件用于读写，将流定位到文件的开头。如果文件不存在则创建文件。</span></span><br><span class="line"><span class="comment"># a  打开文件用于写入，将流定位到文件的末尾。如果文件不存在则创建文件。</span></span><br><span class="line"><span class="comment"># a+ 打开文件用于读写，将流定位到文件的末尾。如果文件不存在则创建文件。</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">fs.writeFile(<span class="string">&quot;./text/txt&quot;</span>,<span class="string">&quot;11&quot;</span>,&#123;flag:<span class="string">&quot;w+&quot;</span>&#125;,(err)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;console.log(<span class="string">&quot;写入失败&quot;</span>)&#125;<span class="keyword">else</span>&#123;console.log(<span class="string">&quot;写入成功&quot;</span>)&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#appendFile 把内容插入到最后，同上但是没有第三个参数</span></span><br><span class="line"><span class="comment">#unlink 删除内容</span></span><br></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/MD5/212708?fr=aladdin">md5加密</a>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var cpo = require(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line">var results = cpo.createHash(<span class="string">&quot;md5&quot;</span>).update(<span class="string">&quot;xiazhi201226&quot;</span>).digest(<span class="string">&quot;hex&quot;</span>);console.log(results);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
