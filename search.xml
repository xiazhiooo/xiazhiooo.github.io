<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MangoDB笔记</title>
      <link href="/2021/07/21/MangoDB%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/21/MangoDB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/mongodb/60411?fr=aladdin">MangoDB</a>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展.MongoDB是工作在集合和文档上一种概念.集合是一组MongoDB的文件,它与一个RDBMS表是等效的.文档是一组键值对.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>如果想要快速上手,可以通过<a href="https://www.yiibai.com/mongodb/mongodb_quick_guide.html">易百教程</a>来学习.</p><h3 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h3><p><a href="https://baike.baidu.com/item/NoSQL/8828247?fr=aladdin">NOSQL</a>，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。<br>传统的数据库处理数据是由关系数据库管理系统（RDBMS）来处理的，关系型数据库遵循ACID规则，事务在英文中是transaction，和现实世界的交易很类似，它有四个特性也就是ACID规则的由来。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Atomicity原子性</span><br><span class="line">Consistency一致性</span><br><span class="line">Isolation独立性</span><br><span class="line">Durabiliy持久性</span><br></pre></td></tr></table></figure><h3 id="RDBMS-vs-NoSQL"><a href="#RDBMS-vs-NoSQL" class="headerlink" title="RDBMS vs NoSQL"></a>RDBMS vs NoSQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RDBMS</span><br><span class="line">- 高度组织化结构化数据</span><br><span class="line">- 结构化查询语言（SQL）</span><br><span class="line">- 数据和关系都存储在单独的表中</span><br><span class="line">- 数据操纵语言，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础事务</span><br><span class="line"></span><br><span class="line">NoSQL</span><br><span class="line">- 代表着不仅仅是SQL</span><br><span class="line">- 没有声明性查询语言</span><br><span class="line">- 没有预定义的模式</span><br><span class="line">- 键 - 值对存储，列存储，文档存储，图形数据库</span><br><span class="line">- 最终一致性，而非ACID属性</span><br><span class="line">- 非结构化和不可预知的数据</span><br><span class="line">- CAP定理</span><br><span class="line">- 高性能，高可用性和可伸缩性</span><br></pre></td></tr></table></figure><h3 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h3><p>CAP定理的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个.所以根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大</span><br><span class="line">CP - 满足一致性，分区容忍性的系统，通常性能不是特别高</span><br><span class="line">AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些</span><br></pre></td></tr></table></figure><p>分布式系统由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成.分布式系统是建立在网络之上的软件系统.</p><h3 id="mongodb命令"><a href="#mongodb命令" class="headerlink" title="mongodb命令"></a>mongodb命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看所有数据库 =&gt; show dbs</span><br><span class="line">查看所有集合 =&gt;show collections</span><br><span class="line">数据库切换创建 =&gt; use 数据库名称</span><br><span class="line">创建集合 =&gt; db.createCollection(<span class="string">&#x27;集合名称&#x27;</span>)</span><br><span class="line"></span><br><span class="line">查找数据 =&gt; db.集合名称.find(&#123;查找条件&#125;)</span><br><span class="line">查找数据且自带格式 =&gt; db.集合名称.find().pretty()</span><br><span class="line">插入数据 =&gt; db.集合名称.insert(&#123;name:<span class="string">&quot;zhangsan&quot;</span>,password:<span class="string">&quot;1234&quot;</span>&#125;)</span><br><span class="line">修改数据会被覆盖 =&gt; db.集合名称.update(&#123;查找条件&#125;,&#123;修改的数据&#125;)</span><br><span class="line">修改数据不会被覆盖 =&gt; db.集合名称.update(&#123;查找条件&#125;,&#123;<span class="variable">$set</span>:&#123;修改的数据&#125;&#125;)</span><br><span class="line">删除数据 =&gt; db.集合名称.remove(&#123;查找条件&#125;)</span><br><span class="line">删除集合 =&gt; db.集合名词.drop()</span><br><span class="line">删除数据库 =&gt; db.dropDatabase()</span><br><span class="line"></span><br><span class="line">高级查找数据</span><br><span class="line">=&gt; db.集合名称.find(&#123;查找条件&#125;,&#123;<span class="string">&#x27;需要显示的字段&#x27;</span>:1&#125;) 1显示 0不显示</span><br><span class="line">=&gt; db.集合名称.find(&#123;age:&#123;<span class="variable">$gt</span>:15&#125;&#125;) 大于15</span><br><span class="line">=&gt; db.集合名称.find(&#123;age:&#123;<span class="variable">$lt</span>:15&#125;&#125;) 小于15</span><br><span class="line">=&gt; db.user.find(&#123;</span><br><span class="line">    <span class="variable">$and</span>:[</span><br><span class="line">        &#123;sex:<span class="string">&quot;女&quot;</span>&#125;,&#123;height:&#123;<span class="variable">$gt</span>:160&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;) 身高大于160且为女生</span><br><span class="line"></span><br><span class="line">跳过2条数据 =&gt; db.集合名称.find().skip(2)</span><br><span class="line">限制多少条 =&gt; db.集合名称.find().<span class="built_in">limit</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="node操作数据库"><a href="#node操作数据库" class="headerlink" title="node操作数据库"></a>node操作数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入依赖</span></span><br><span class="line">var mongoose = require(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"><span class="comment">#连接mongodb数据库 student是数据库名</span></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost:27017/student&quot;</span>)</span><br><span class="line"><span class="comment">#实时监控连接状态</span></span><br><span class="line">mongoose.connection.on(<span class="string">&quot;connected&quot;</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  console.log(<span class="string">&quot;连接成功&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个user Schma</span></span><br><span class="line">var userSchema = mongoose.Schema(&#123;</span><br><span class="line">    id:String,</span><br><span class="line">    name:String</span><br><span class="line">&#125;,&#123;collection:<span class="string">&quot;user&quot;</span>&#125;) <span class="comment">#collection:&quot;user&quot; 指定集合</span></span><br><span class="line"><span class="comment">#通过user Schma创建一个Model &quot;user&quot;是表</span></span><br><span class="line">var userModel = mongoose.model(<span class="string">&quot;user&quot;</span>,userSchema)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询</span></span><br><span class="line"><span class="comment">#通过_id来查询数据</span></span><br><span class="line">userModel.findById(<span class="string">&quot;60f8d89ef1390ef4ac2ff4e3&quot;</span>,<span class="keyword">function</span>(err,u)&#123;</span><br><span class="line">    console.log(u)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">#通过Model来查询所有数据  参数1：错误信息 参数2：集合中的所有值</span></span><br><span class="line">userModel.find((err,user)=&gt;&#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">    console.log(user);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加</span></span><br><span class="line"><span class="comment">#使用userModel 创建一个&quot;user&quot;实例</span></span><br><span class="line">var user = new userModel(&#123;</span><br><span class="line">    id:1,</span><br><span class="line">    name:<span class="string">&quot;李四&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">#通过save方法保存到数据库 参数1：错误信息 参数2：保存后的值</span></span><br><span class="line">user.save((err,u)=&gt;&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">    console.log(u)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"><span class="comment">#通过_id来修改数据</span></span><br><span class="line">userModel.findByIdAndUpdate(·)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="comment">#通过_id来删除数据</span></span><br><span class="line">userModel.findByIdAndRemove()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MangoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Node.js》笔记</title>
      <link href="/2021/07/15/Node.js%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/15/Node.js%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/node.js/7567977?fr=aladdin">Node.js</a>发布于2009年5月，是一个基于Chrome V8引擎的JavaScript运行环境，使用了一个<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/9597519">事件驱动</a>、非阻塞式<a href="https://baike.baidu.com/item/i%2Fo/84718">I/O</a>模型。轻量而高效，非常适合在分布式设备上运行数据密集型的实时应用.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="http://nodejs.cn/">官网</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">通过node.js官网选择对应的版本进行安装，我这边下载的是v12.22.2版本（建议选择左边的稳定版本，右边的最新版本可能会出现莫名bug）</span><br></pre></td></tr></table></figure><h3 id="npm基本了解及命令"><a href="#npm基本了解及命令" class="headerlink" title="npm基本了解及命令"></a>npm基本了解及命令</h3><p><a href="https://www.npmjs.com/">npm</a>是随同node.js一起安装的包管理工具,能解决node.js代码部署上很多问题.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm init 初始化空项目,且自动生成一个package.json文件（定义包的属性）</span><br><span class="line">$ npm install &lt;模块名&gt; 用来安装模块</span><br><span class="line">$ npm i express 本地安装（安装项目依赖），加-g就是全局安装（安装工具）</span><br><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org 淘宝npm镜像</span><br><span class="line">$ npm ls 查看本目录模块,加-g查看所有全局安装</span><br><span class="line">$ npm i &lt;模块名&gt; --save-dev 安装模块写入package.json</span><br><span class="line">使用 --save-dev 安装的 插件，被写入到 devDependencies（开发环境）对象里面去</span><br><span class="line">使用 --save 安装的插件，则被写入到 dependencies（生产环境）对象里面去</span><br></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E5%8F%B7/7674145?fr=aladdin">版本号</a>: 一个标准的版本号必须是X.Y.Z的形式，X是主版本，Y是副版本，Z是补丁版本.</p><h3 id="node-js模块"><a href="#node-js模块" class="headerlink" title="node.js模块"></a>node.js模块</h3><p>在node环境中，一个.js文件就称之为一个模块（module）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nodejs模块系统共有四种类型的模块:原生模块 &gt; .js文件类型模块 &gt; .json模块 &gt; .node模块</span><br><span class="line">用require(<span class="string">&quot;./demo.js&quot;</span>) 来加载一个模块,require查找的优先级是从大小的</span><br><span class="line">module.exports = &#123;<span class="string">&quot;+&quot;</span>:add&#125; 导出模块 <span class="string">&quot;+&quot;</span>是对象 add是一个函数</span><br><span class="line">__dirname:当前目录信息</span><br><span class="line">__filename:当前文件的完整路径</span><br></pre></td></tr></table></figure><h3 id="fs文件管理"><a href="#fs文件管理" class="headerlink" title="fs文件管理"></a>fs文件管理</h3><p>node.js自带的模块</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var fs = require(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取文件信息</span></span><br><span class="line">fs.stat(<span class="string">&quot;./text&quot;</span>,(err,info)=&gt;&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">console.log(info.isFile())  <span class="comment">#判断是否为一个文件</span></span><br><span class="line">console.log(info.isDirectory()) <span class="comment">#判断是否是一个目录</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取文件内容</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./test.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,(err,info)=&gt;&#123;</span><br><span class="line">    <span class="comment">#err 是否报错</span></span><br><span class="line">    <span class="comment">#info 读取文件内容</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入文件信息</span></span><br><span class="line"><span class="comment">#第一个参数是文件路径，第二个参数是需要写入的内容(会覆盖原来的内容),最后一个参数是回调函数.</span></span><br><span class="line"><span class="comment">#第三个参数可以指定文件的位置</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#     r+ 打开文件用于读写。</span></span><br><span class="line"><span class="comment"># w+ 打开文件用于读写，将流定位到文件的开头。如果文件不存在则创建文件。</span></span><br><span class="line"><span class="comment"># a  打开文件用于写入，将流定位到文件的末尾。如果文件不存在则创建文件。</span></span><br><span class="line"><span class="comment"># a+ 打开文件用于读写，将流定位到文件的末尾。如果文件不存在则创建文件。</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">fs.writeFile(<span class="string">&quot;./text/txt&quot;</span>,<span class="string">&quot;11&quot;</span>,&#123;flag:<span class="string">&quot;w+&quot;</span>&#125;,(err)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;console.log(<span class="string">&quot;写入失败&quot;</span>)&#125;<span class="keyword">else</span>&#123;console.log(<span class="string">&quot;写入成功&quot;</span>)&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#appendFile 把内容插入到最后，同上但是没有第三个参数</span></span><br><span class="line"><span class="comment">#unlink 删除内容</span></span><br></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/MD5/212708?fr=aladdin">md5加密</a>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var cpo = require(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line">var results = cpo.createHash(<span class="string">&quot;md5&quot;</span>).update(<span class="string">&quot;xiazhi201226&quot;</span>).digest(<span class="string">&quot;hex&quot;</span>);console.log(results);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
